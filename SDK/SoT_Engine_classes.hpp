#pragma once

// Sea of Thieves (2) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "SoT_Engine_structs.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.ActorComponent
// 0x00A0 (0x00C8 - 0x0028)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	FActorComponentTickFunction                        PrimaryComponentTick;                                     // 0x0030(0x0050) (Edit, DisableEditOnInstance)
	TArray<FName>                                      ComponentTags;                                            // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<FSimpleMemberReference>                     UCSModifiedProperties;                                    // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET
	TArray<UAssetUserData*>                            AssetUserData;                                            // 0x00B0(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02 : 3;                                        // 0x00C0(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bNetAddressable : 1;                                      // 0x00C0(0x0001)
	unsigned char                                      UnknownData03 : 3;                                        // 0x00C0(0x0001)
	unsigned char                                      UnknownData04 : 6;                                        // 0x00C1(0x0001)
	unsigned char                                      bCreatedByConstructionScript : 1;                         // 0x00C1(0x0001) (Deprecated)
	unsigned char                                      bInstanceComponent : 1;                                   // 0x00C1(0x0001) (Deprecated)
	unsigned char                                      bAutoActivate : 1;                                        // 0x00C2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsActive : 1;                                            // 0x00C2(0x0001) (Net, Transient)
	unsigned char                                      bEditableWhenInherited : 1;                               // 0x00C2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05 : 5;                                        // 0x00C2(0x0001)
	unsigned char                                      UnknownData06 : 3;                                        // 0x00C3(0x0001)
	unsigned char                                      bNeedsLoadForClient : 1;                                  // 0x00C3(0x0001) (Edit)
	unsigned char                                      bNeedsLoadForServer : 1;                                  // 0x00C3(0x0001) (Edit)
	TEnumAsByte<EComponentNetDormancy>                 TargetNetDormancy;                                        // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EComponentCreationMethod>              CreationMethod;                                           // 0x00C5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ActorComponent"));
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickEnabled(bool bEnabled);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	TEnumAsByte<EComponentNetDormancy> GetTargetNetDormancy();
	AActor* GetOwner();
	bool FlushNetDormancy();
	void Deactivate();
	bool ComponentHasTag(const FName& Tag);
	void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class Engine.Actor
// 0x03A8 (0x03D0 - 0x0028)
class AActor : public UObject
{
public:
	FActorTickFunction                                 PrimaryActorTick;                                         // 0x0028(0x0050) (Edit, DisableEditOnInstance)
	float                                              CustomTimeDilation;                                       // 0x0078(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowRemovalFromServerWhenCollisionMerged : 1;           // 0x007C(0x0001) (Edit)
	unsigned char                                      bAllowRemovalFromServerWhenAutomaticallyInstanced : 1;    // 0x007C(0x0001) (Edit)
	unsigned char                                      bHidden : 1;                                              // 0x007C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bNetTemporary : 1;                                        // 0x007C(0x0001)
	unsigned char                                      bNetStartup : 1;                                          // 0x007C(0x0001)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                 // 0x007C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant : 1;                                      // 0x007C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bReplicateMovement : 1;                                   // 0x007C(0x0001) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      bTearOff : 1;                                             // 0x007D(0x0001)
	unsigned char                                      bExchangedRoles : 1;                                      // 0x007D(0x0001) (Transient)
	unsigned char                                      bPendingNetUpdate : 1;                                    // 0x007D(0x0001) (Transient)
	unsigned char                                      bNetLoadOnClient : 1;                                     // 0x007D(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                // 0x007D(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bBlockInput : 1;                                          // 0x007D(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00 : 1;                                        // 0x007D(0x0001)
	unsigned char                                      bCanBeInCluster : 1;                                      // 0x007D(0x0001) (Edit)
	unsigned char                                      UnknownData01 : 2;                                        // 0x007E(0x0001)
	unsigned char                                      bActorEnableCollision : 1;                                // 0x007E(0x0001)
	unsigned char                                      UnknownData02 : 1;                                        // 0x007E(0x0001)
	unsigned char                                      bReplicateAttachment : 1;                                 // 0x007E(0x0001)
	unsigned char                                      UnknownData03 : 1;                                        // 0x007E(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x007E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x1];                                       // 0x007F(0x0001) MISSED OFFSET
	FScriptMulticastSparseDelegate                     OnPreNetOwnershipChange;                                  // 0x0080(0x0001) (InstancedReference, BlueprintAssignable)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0081(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0082(0x0006) MISSED OFFSET
	AActor*                                            Owner;                                                    // 0x0088(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EActorSpawnRestrictions>               SpawnRestrictions;                                        // 0x0090(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	FRepMovement                                       ReplicatedMovement;                                       // 0x0094(0x0038) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	FRepAttachment                                     AttachmentReplication;                                    // 0x00D0(0x0048) (Net, Transient)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0118(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0119(0x0001) MISSED OFFSET
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                         // 0x011A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x011B(0x0001) MISSED OFFSET
	int                                                InputPriority;                                            // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	UInputComponent*                                   InputComponent;                                           // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	int                                                NetTag;                                                   // 0x0130(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NetUpdateTime;                                            // 0x0134(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              NetUpdateFrequency;                                       // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetPriority;                                              // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastNetUpdateTime;                                        // 0x0140(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	FName                                              NetDriverName;                                            // 0x0144(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                             // 0x014C(0x0001) (BlueprintVisible)
	unsigned char                                      bCanBeDamaged : 1;                                        // 0x014C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bActorIsBeingDestroyed : 1;                               // 0x014C(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bCollideWhenPlacing : 1;                                  // 0x014C(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                   // 0x014C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRelevantForNetworkReplays : 1;                           // 0x014C(0x0001)
	unsigned char                                      UnknownData11[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	TEnumAsByte<ESpawnActorCollisionHandlingMethod>    SpawnCollisionHandlingMethod;                             // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
	APawn*                                             Instigator;                                               // 0x0158(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<AActor*>                                    Children;                                                 // 0x0160(0x0010) (ZeroConstructor, Transient)
	USceneComponent*                                   RootComponent;                                            // 0x0170(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<AMatineeActor*>                             ControllingMatineeActors;                                 // 0x0178(0x0010) (ZeroConstructor, Transient)
	float                                              InitialLifeSpan;                                          // 0x0188(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;              // 0x0190(0x0001)
	unsigned char                                      UnknownData14[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	TArray<FName>                                      Layers;                                                   // 0x0198(0x0010) (ZeroConstructor)
	FActorPtr                                          ParentComponentActor;                                     // 0x01A8(0x0008)
	TArray<TWeakObjectPtr<class AActor>>               ChildComponentActors;                                     // 0x01B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData15[0x8];                                       // 0x01C0(0x0008) MISSED OFFSET
	unsigned char                                      bActorSeamlessTraveled : 1;                               // 0x01C8(0x0001)
	unsigned char                                      bIgnoresOriginShifting : 1;                               // 0x01C8(0x0001) (Edit)
	unsigned char                                      bEnableAutoLODGeneration : 1;                             // 0x01C8(0x0001) (Edit)
	unsigned char                                      UnknownData16[0x7];                                       // 0x01C9(0x0007) MISSED OFFSET
	TArray<FName>                                      Tags;                                                     // 0x01D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	FName                                              Feature;                                                  // 0x01E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint64_t                                           HiddenEditorViews;                                        // 0x01E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	FScriptMulticastSparseDelegate                     OnActorBeginOverlap;                                      // 0x01F0(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnActorEndOverlap;                                        // 0x01F1(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnActorHit;                                               // 0x01F2(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnDestroyed;                                              // 0x01F3(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0x3C];                                      // 0x01F4(0x003C) MISSED OFFSET
	FScriptMulticastSparseDelegate                     OnEndPlay;                                                // 0x0230(0x0001) (InstancedReference, BlueprintAssignable)
	bool                                               bDoOverlapNotifiesOnLoad;                                 // 0x0231(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0xF6];                                      // 0x0232(0x00F6) MISSED OFFSET
	TArray<UActorComponent*>                           BlueprintCreatedComponents;                               // 0x0328(0x0010) (ExportObject, ZeroConstructor)
	TArray<UActorComponent*>                           InstanceComponents;                                       // 0x0338(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<AActor*>                                    ChildActorInterfaceProviders;                             // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData20[0x68];                                      // 0x0360(0x0068) MISSED OFFSET
	double                                             DormancyLingeringInSeconds;                               // 0x03C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Actor"));
		return ptr;
	}


	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(AActor* InParentActor, const FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetIgnoreNetTransformUpdates(bool bInIgnoreNetTransformUpdates);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const FVector& NewScale3D);
	bool SetActorRotation(const FRotator& NewRotation);
	void SetActorRelativeScale3D(const FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, const FVector& Origin, const FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser);
	void ReceivePointDamage(float Damage, UDamageType* DamageType, const FVector& HitLocation, const FVector& HitNormal, UPrimitiveComponent* HitComponent, const FName& BoneName, const FVector& ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser);
	void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, const FVector& HitLocation, const FVector& HitNormal, const FVector& NormalImpulse, const FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
	void ReceiveActorOnReleased();
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked();
	void ReceiveActorEndOverlap(AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void OnEndPlayDynamicMulticastEvent__DelegateSignature(AActor* EndPlayActor);
	void OnDestroyedDynamicMulticastEvent__DelegateSignature(AActor* DeletedActor);
	void MakeNoise(float Loudness, APawn* NoiseInstigator, const FVector& NoiseLocation, float MaxRange, const FName& Tag);
	UMaterialInstanceDynamic* MakeMIDForMaterial(UMaterialInterface* Parent);
	bool K2_TeleportTo(const FVector& DestLocation, const FRotator& DestRotation);
	bool K2_SetActorTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetActorRelativeTransform(const FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const FVector& NewRelativeLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(APlayerController* PC);
	void K2_OnBecomeViewTarget(APlayerController* PC);
	USceneComponent* K2_GetRootComponent();
	FRotator K2_GetActorRotation();
	FVector K2_GetActorLocation();
	void K2_DestroyComponent(UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachRootComponentToActor(AActor* InParentActor, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	bool IsOverlappingActor(AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasNetOwner();
	bool HasAuthority();
	float GetVerticalDistanceTo(AActor* OtherActor);
	FVector GetVelocity();
	FTransform GetTransform();
	bool GetTickableWhenPaused();
	unsigned char GetPxActorCapacityForPhysXAggregate();
	AActor* GetParentActor();
	AActor* GetOwner();
	void GetOverlappingComponents(TArray<UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(UClass* ClassFilter, TArray<AActor*>* OverlappingActors);
	float GetLifeSpan();
	UObject* GetInterfaceImplementer(UClass* InterfaceClass);
	AController* GetInstigatorController();
	APawn* GetInstigator();
	FVector GetInputVectorAxisValue(const FKey& InputAxisKey);
	float GetInputAxisValue(const FName& InputAxisName);
	float GetInputAxisKeyValue(const FKey& InputAxisKey);
	float GetHorizontalDotProductTo(AActor* OtherActor);
	float GetHorizontalDistanceTo(AActor* OtherActor);
	float GetDotProductTo(AActor* OtherActor);
	float GetDistanceTo(AActor* OtherActor);
	TArray<UActorComponent*> GetComponentsByTag(UClass* ComponentClass, const FName& Tag);
	TArray<UActorComponent*> GetComponentsByClass(UClass* ComponentClass);
	void GetComponentInterfacesByClass(UClass* InterfaceClass, TArray<UActorComponent*>* OutInterfaces);
	UActorComponent* GetComponentInterfaceByClass(UClass* InterfaceClass);
	UActorComponent* GetComponentByClass(UClass* ComponentClass);
	AActor* GetAttachParentActor();
	FVector GetActorUpVector();
	float GetActorTimeDilation();
	FVector GetActorScale3D();
	FVector GetActorRightVector();
	FVector GetActorRelativeScale3D();
	FVector GetActorForwardVector();
	void GetActorEyesViewPoint(FVector* OutLocation, FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, FVector* Origin, FVector* BoxExtent);
	void ForceNetUpdate();
	bool FlushNetDormancy();
	void EnableInput(APlayerController* PlayerController);
	void DisableInput(APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AttachRootComponentToNoReplication(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void AttachActorToActorNoReplication(AActor* InParentActor, const FName& InSocketName, bool bWeldSimulatedBodies);
	void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(AActor* PrerequisiteActor);
	UActorComponent* AddComponent(const FName& TemplateName, bool bManualAttachment, const FTransform& RelativeTransform, UObject* ComponentTemplateContext);
	bool ActorHasTag(const FName& Tag);
};


// Class Engine.DataAsset
// 0x0000 (0x0028 - 0x0028)
class UDataAsset : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DataAsset"));
		return ptr;
	}

};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlueprintFunctionLibrary"));
		return ptr;
	}

};


// Class Engine.SceneComponent
// 0x01E8 (0x02B0 - 0x00C8)
class USceneComponent : public UActorComponent
{
public:
	USceneComponent*                                   AttachParent;                                             // 0x00C8(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<USceneComponent*>                           AttachChildren;                                           // 0x00D0(0x0010) (ExportObject, ZeroConstructor, Transient)
	FName                                              AttachSocketName;                                         // 0x00E0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRequiresCustomLocation : 1;                              // 0x00E8(0x0001)
	unsigned char                                      bAbsoluteLocation : 1;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteTranslation : 1;                                 // 0x00E8(0x0001) (Deprecated)
	unsigned char                                      bAbsoluteRotation : 1;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteScale : 1;                                       // 0x00E8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bVisible : 1;                                             // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bHiddenInGame : 1;                                        // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                           // 0x00E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;            // 0x00E9(0x0001)
	unsigned char                                      bUseAttachParentBound : 1;                                // 0x00E9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bComponentIsUnionOfChildren : 1;                          // 0x00E9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00 : 1;                                        // 0x00E9(0x0001)
	unsigned char                                      bJitterReduction : 1;                                     // 0x00E9(0x0001) (Edit)
	unsigned char                                      UnknownData01 : 1;                                        // 0x00E9(0x0001)
	unsigned char                                      CacheRootVelocity : 1;                                    // 0x00E9(0x0001) (Edit)
	unsigned char                                      bWorldToComponentUpdated : 1;                             // 0x00E9(0x0001) (Transient)
	unsigned char                                      UnknownData02[0xE];                                       // 0x00EA(0x000E) MISSED OFFSET
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                            // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x0100(0x001C) MISSED OFFSET
	FVector                                            RelativeScale3D;                                          // 0x011C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeLocation;                                         // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	FRotator                                           RelativeRotation;                                         // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xE0];                                      // 0x0140(0x00E0) MISSED OFFSET
	TEnumAsByte<EComponentMobility>                    Mobility;                                                 // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0221(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xA];                                       // 0x0222(0x000A) MISSED OFFSET
	FVector                                            ComponentVelocity;                                        // 0x022C(0x000C) (ZeroConstructor, IsPlainOldData)
	FScriptMulticastDelegate                           PhysicsVolumeChangedDelegate;                             // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0248(0x0010) MISSED OFFSET
	TArray<FName>                                      SocketVelocitiesToCache;                                  // 0x0258(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData07[0x48];                                      // 0x0268(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneComponent"));
		return ptr;
	}

	FBoxSphereBounds GetBounds()
	{
		return *reinterpret_cast<FBoxSphereBounds*>(reinterpret_cast<uintptr_t>(this) + 0x100);
	}


	void ToggleVisibility(bool bPropagateToChildren);
	void SnapTo(USceneComponent* InParent, const FName& InSocketName);
	bool SharesBasis(USceneComponent* Other);
	void SetWorldScale3D(const FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const FVector& NewScale3D);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	bool K2_TryGetCachedSocketVelocity(const FName& SocketName, FVector* OutVelocity);
	void K2_SetWorldTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	FTransform K2_GetComponentToWorld();
	FVector K2_GetComponentScale();
	FRotator K2_GetComponentRotation();
	FVector K2_GetComponentLocation();
	void K2_AttachTo(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const FName& BoneName);
	bool IsAnySimulatingPhysics();
	FVector GetUpVector();
	FTransform GetSocketTransform(const FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	FRotator GetSocketRotation(const FName& InSocketName);
	FQuat GetSocketQuaternion(const FName& InSocketName);
	FVector GetSocketLocation(const FName& InSocketName);
	FVector GetRightVector();
	FTransform GetRelativeTransform();
	APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	FVector GetForwardVector();
	FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>* Children);
	USceneComponent* GetChildComponent(int ChildIndex);
	FName GetAttachSocketName();
	USceneComponent* GetAttachParent();
	FTransform GetAttachedBasisTransform();
	TArray<FName> GetAllSocketNames();
	bool DoesSocketExist(const FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.Pawn
// 0x0078 (0x0448 - 0x03D0)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch : 1;                          // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw : 1;                            // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll : 1;                           // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                       // 0x03D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                            // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                        // 0x03E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoPossessAI>                        AutoPossessAI;                                            // 0x03E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03E2(0x0006) MISSED OFFSET
	UClass*                                            AIControllerClass;                                        // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	APlayerState*                                      PlayerState;                                              // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      RemoteViewPitch;                                          // 0x03F8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	AController*                                       LastHitBy;                                                // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	AController*                                       Controller;                                               // 0x0408(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0410(0x0018) MISSED OFFSET
	FVector                                            ControlInputVector;                                       // 0x0428(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	FVector                                            LastControlInputVector;                                   // 0x0434(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0440(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Pawn"));
		return ptr;
	}


	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue);
	void ReceiveUnpossessed(AController* OldController);
	void ReceivePossessed(AController* NewController);
	void PawnMakeNoise(float Loudness, const FVector& NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	FVector K2_GetMovementInputVector();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	FVector GetPendingMovementInputVector();
	FVector GetNavAgentLocation();
	UPawnMovementComponent* GetMovementComponent();
	static AActor* GetMovementBaseActor(APawn* Pawn);
	FVector GetLastMovementInputVector();
	FRotator GetControlRotation();
	AController* GetController();
	FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	FVector ConsumeMovementInputVector();
	void AddMovementInput(const FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};


// Class Engine.Character
// 0x0198 (0x05E0 - 0x0448)
class ACharacter : public APawn
{
public:
	USkeletalMeshComponent*                            Mesh;                                                     // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UCharacterMovementComponent*                       CharacterMovement;                                        // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UCapsuleComponent*                                 CapsuleComponent;                                         // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	FBasedMovementInfo                                 BasedMovement;                                            // 0x0460(0x0038)
	FBasedMovementInfo                                 ReplicatedBasedMovement;                                  // 0x0498(0x0038) (Net)
	FVector                                            BaseTranslationOffset;                                    // 0x04D0(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	FQuat                                              BaseRotationOffset;                                       // 0x04E0(0x0010) (IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x04F0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInBaseReplication;                                       // 0x04F1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04F2(0x0002) MISSED OFFSET
	float                                              CrouchedEyeHeight;                                        // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                          // 0x04F8(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPressedJump : 1;                                         // 0x04F8(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bClientUpdating : 1;                                      // 0x04F8(0x0001) (Transient)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x04F8(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotion : 1;                          // 0x04F8(0x0001) (Transient)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x04F8(0x0001)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                          // 0x04F8(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04F9(0x0003) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                          // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0504(0x0004) MISSED OFFSET
	FScriptMulticastDelegate                           OnReachedJumpApex;                                        // 0x0508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0518(0x0010) MISSED OFFSET
	FScriptMulticastDelegate                           OnCharacterMovementUpdated;                               // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0538(0x0008) MISSED OFFSET
	FRootMotionMovementParams                          ClientRootMotionParams;                                   // 0x0540(0x0040) (Transient)
	TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves;                                       // 0x0580(0x0010) (ZeroConstructor, Transient)
	FRepRootMotionMontage                              RepRootMotion;                                            // 0x0590(0x0040) (Net)
	unsigned char                                      UnknownData06[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Character"));
		return ptr;
	}


	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(UAnimMontage* AnimMontage);
	void SetReplicateMovement(bool bInReplicateMovement);
	float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, const FName& StartSectionName);
	void OnWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsCrouched();
	void OnLaunched(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	UAnimMontage* GetCurrentMontage();
	void Crouch(bool bClientSimulation);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	bool CanJumpInternal();
	bool CanJump();
};


// Class Engine.AnimInstance
// 0x0418 (0x0440 - 0x0028)
class UAnimInstance : public UObject
{
public:
	USkeleton*                                         CurrentSkeleton;                                          // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FAnimTickRecord>                            UngroupedActivePlayers;                                   // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<FAnimGroupInstance>                         SyncGroups;                                               // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<FActiveVertexAnim>                          VertexAnims;                                              // 0x0050(0x0010) (ZeroConstructor, Transient)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0060(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x0061(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0062(0x0006) MISSED OFFSET
	FScriptMulticastDelegate                           OnMontageBlendingOut;                                     // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnMontageStarted;                                         // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnMontageEnded;                                           // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnStateEntered;                                           // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnStateExited;                                            // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnStateInitialised;                                       // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnAnimUpdated;                                            // 0x00C8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x70];                                      // 0x00D8(0x0070) MISSED OFFSET
	bool                                               bQueueMontageEvents;                                      // 0x0148(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF7];                                      // 0x0149(0x00F7) MISSED OFFSET
	TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState;                                    // 0x0240(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x100];                                     // 0x0250(0x0100) MISSED OFFSET
	int16_t                                            SlotNodeInitializationCounter;                            // 0x0350(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	int16_t                                            GraphTraversalCounter;                                    // 0x0352(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x54];                                      // 0x0354(0x0054) MISSED OFFSET
	bool                                               bBoneCachesInvalidated;                                   // 0x03A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8F];                                      // 0x03A9(0x008F) MISSED OFFSET
	unsigned char                                      UnknownData06 : 1;                                        // 0x0438(0x0001)
	unsigned char                                      bBlueprintAnimUpdateEnabled : 1;                          // 0x0438(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0439(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimInstance"));
		return ptr;
	}


	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const FName& SlotNodeName);
	void SetMorphTarget(const FName& MorphTargetName, float Value);
	UAnimMontage* PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, const FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime);
	float PlaySlotAnimation(UAnimSequenceBase* Asset, const FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage);
	void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const FName& SectionNameToChange, const FName& NextSection, UAnimMontage* Montage);
	void Montage_Resume(UAnimMontage* Montage);
	float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate);
	void Montage_Pause(UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const FName& SectionName, UAnimMontage* Montage);
	void Montage_JumpToSection(const FName& SectionName, UAnimMontage* Montage);
	bool Montage_IsPlaying(UAnimMontage* Montage);
	bool Montage_IsActive(UAnimMontage* Montage);
	FName Montage_GetCurrentSection(UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, const FName& SlotNodeName);
	float GetSyncGroupPosition(const FName& Name);
	float GetStateWeight(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	USkeletalMeshComponent* GetOwningComponent();
	AActor* GetOwningActor();
	float GetMaxPlayingAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetMaxAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const FName& CurveName);
	FName GetCurrentStateName(int MachineIndex);
	float GetCurrentStateElapsedTime(int MachineIndex);
	static float GetAnimAssetPlayerTimeFromEndFraction(UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFromEnd(UAnimationAsset* AnimAsset, float CurrentTime);
	static float GetAnimAssetPlayerTimeFraction(UAnimationAsset* AnimAsset, float CurrentTime);
	static float GetAnimAssetPlayerLength(UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(const FVector& Velocity, const FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintUninitializeAnimation();
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void AnimNotify_Sound(UAnimNotify* Notify);
};


// Class Engine.AnimNotify
// 0x0010 (0x0038 - 0x0028)
class UAnimNotify : public UObject
{
public:
	bool                                               PlayedWithSequencer;                                      // 0x0028(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0029(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotify"));
		return ptr;
	}


	bool Received_Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);
	FString GetNotifyName();
};


// Class Engine.AnimNotifyState
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyState : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotifyState"));
		return ptr;
	}


	bool Received_NotifyTick(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float TotalDuration);
	FString GetNotifyName();
};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (0x0058 - 0x0028)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	UParticleSystem*                                   PSTemplate;                                               // 0x0028(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FName                                              SocketName;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            LocationOffset;                                           // 0x0038(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FRotator                                           RotationOffset;                                           // 0x0044(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOwnerOnlySee;                                            // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOwnerNoSee;                                              // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWorldOwnedEffect;                                        // 0x0053(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotifyState_TimedParticleEffect"));
		return ptr;
	}

};


// Class Engine.CameraComponent
// 0x0570 (0x0820 - 0x02B0)
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                              // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AspectRatio;                                              // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x02C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                // 0x02C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x02C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C5(0x0003) MISSED OFFSET
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	float                                              PostProcessBlendWeight;                                   // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FPostProcessSettings                               PostProcessSettings;                                      // 0x02D0(0x0540) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerViewRotation : 1;                           // 0x0810(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0811(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraComponent"));
		return ptr;
	}


	FVector ProjectWorldLocation(const FVector& WorldLocation, const FIntPoint& ViewDimensions);
	void GetCameraView(float DeltaTime, FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.MovementComponent
// 0x0048 (0x0110 - 0x00C8)
class UMovementComponent : public UActorComponent
{
public:
	USceneComponent*                                   UpdatedComponent;                                         // 0x00C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	UPrimitiveComponent*                               UpdatedPrimitive;                                         // 0x00D0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D8(0x0004) MISSED OFFSET
	FVector                                            Velocity;                                                 // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainToPlane : 1;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                  // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	TEnumAsByte<EPlaneConstraintAxisSetting>           PlaneConstraintAxisSetting;                               // 0x00EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	FVector                                            PlaneConstraintNormal;                                    // 0x00F0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	FVector                                            PlaneConstraintOrigin;                                    // 0x00FC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                // 0x0108(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                          // 0x0108(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                        // 0x0108(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MovementComponent"));
		return ptr;
	}


	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const FVector& Forward, const FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting);
	void PhysicsVolumeChanged(APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* OutHit);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	FVector GetPlaneConstraintOrigin();
	FVector GetPlaneConstraintNormal();
	TEnumAsByte<EPlaneConstraintAxisSetting> GetPlaneConstraintAxisSetting();
	APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	FVector ConstrainNormalToPlane(const FVector& Normal);
	FVector ConstrainLocationToPlane(const FVector& Location);
	FVector ConstrainDirectionToPlane(const FVector& Direction);
};


// Class Engine.NavMovementComponent
// 0x0048 (0x0158 - 0x0110)
class UNavMovementComponent : public UMovementComponent
{
public:
	FNavAgentProperties                                NavAgentProps;                                            // 0x0110(0x0030) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                   // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	FMovementProperties                                MovementState;                                            // 0x0144(0x0004)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	bool                                               UseDefaultNavWalkingSearchRadiusScale;                    // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseDefaultNavWalkingSearchHeightScale;                    // 0x0151(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0152(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavMovementComponent"));
		return ptr;
	}


	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
	FVector GetActorFeetLocation();
};


// Class Engine.PawnMovementComponent
// 0x0008 (0x0160 - 0x0158)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	APawn*                                             PawnOwner;                                                // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PawnMovementComponent"));
		return ptr;
	}


	FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	FVector GetPendingInputVector();
	APawn* GetPawnOwner();
	FVector GetLastInputVector();
	FVector ConsumeInputVector();
	void AddInputVector(const FVector& WorldVector, bool bForce);
};


// Class Engine.CharacterMovementComponent
// 0x0400 (0x0560 - 0x0160)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0160(0x0018) MISSED OFFSET
	ACharacter*                                        CharacterOwner;                                           // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              GravityScale;                                             // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x0194(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0198(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x0199(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x26];                                      // 0x019A(0x0026) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedBackwards;                                    // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkBackwardsMinAngle;                                    // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkBackwardsMaxAngle;                                    // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxChargeAcceleration;                                    // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                          // 0x01F4(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01F5(0x0003) MISSED OFFSET
	float                                              BrakingDecelerationWalking;                               // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControl;                                               // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FRotator                                           RotationRate;                                             // 0x0228(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x0234(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x0234(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x0234(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x0234(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x0234(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x0235(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x0235(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x0235(0x0001)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0236(0x0002) MISSED OFFSET
	USceneComponent*                                   DeferredUpdatedMoveComponent;                             // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnablePhysicsInteraction;                                // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bTouchForceScaledToMass;                                  // 0x024D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPushForceScaledToMass;                                   // 0x024E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bScalePushForceToVelocity;                                // 0x024F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandingDownwardForceScale;                               // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetMoveDelta;                                             // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bForceBraking : 1;                                        // 0x0274(0x0001) (Deprecated)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0275(0x0003) MISSED OFFSET
	float                                              CrouchedSpeedMultiplier;                                  // 0x0278(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              UpperImpactNormalScale;                                   // 0x027C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            Acceleration;                                             // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData)
	FVector                                            LastUpdateLocation;                                       // 0x028C(0x000C) (ZeroConstructor, IsPlainOldData)
	FVector                                            PendingImpulseToApply;                                    // 0x0298(0x000C) (ZeroConstructor, IsPlainOldData)
	FVector                                            PendingForceToApply;                                      // 0x02A4(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x02B0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x02B4(0x0010) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSmoothNetUpdateDist;                                   // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoSmoothNetUpdateDist;                                    // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FFindFloorResult                                   CurrentFloor;                                             // 0x02E4(0x008C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x0370(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x0371(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x0372(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0373(0x0001) MISSED OFFSET
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x0374(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x0374(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x0374(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x0374(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x0374(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                                      // 0x0374(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x0374(0x0001) (Transient)
	unsigned char                                      bBasedMovementUpdateReceived : 1;                         // 0x0374(0x0001) (Transient)
	unsigned char                                      bMovementUpdateReceived : 1;                              // 0x0375(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x0375(0x0001) (Transient)
	unsigned char                                      bNotifyApex : 1;                                          // 0x0375(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCheatFlying : 1;                                         // 0x0375(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x0375(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x0375(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x0375(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x0375(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x0376(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x0376(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x0376(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x0376(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x0376(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x0376(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPreventSimulatedFloorChecks : 1;                         // 0x0376(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPreventNavMeshFalling : 1;                               // 0x0376(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x0377(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x0377(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x0377(0x0001) (Transient)
	unsigned char                                      UnknownData07 : 2;                                        // 0x0377(0x0001)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x0377(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x14];                                      // 0x0378(0x0014) MISSED OFFSET
	float                                              SmoothingClientPositionTolerance;                         // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AvoidanceConsiderationRadius;                             // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            RequestedVelocity;                                        // 0x0394(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	FNavAvoidanceMask                                  AvoidanceGroup;                                           // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FNavAvoidanceMask                                  GroupsToAvoid;                                            // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FNavAvoidanceMask                                  GroupsToIgnore;                                           // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            PendingLaunchVelocity;                                    // 0x03B4(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x98];                                      // 0x03C0(0x0098) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x0458(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x045C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseNavMeshProjectionTimeModifier;                        // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0461(0x0003) MISSED OFFSET
	float                                              MaxNavMeshProjectionInterval;                             // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0468(0x0004) MISSED OFFSET
	float                                              NavMeshProjectionInterpSpeed;                             // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUsePlaneBasedNavMeshProjectionInterpSystem;              // 0x0470(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0471(0x0003) MISSED OFFSET
	float                                              MaxAllowedZOffsetFromCurrentPlane;                        // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxZDiffFromPrevPlane;                                    // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x1C];                                      // 0x047C(0x001C) MISSED OFFSET
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseControllerRotationInNavWalkingMoveComponent;           // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	FCharacterMovementComponentPreClothTickFunction    PreClothComponentTick;                                    // 0x04A8(0x0050)
	unsigned char                                      UnknownData15[0x14];                                      // 0x04F8(0x0014) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x050C(0x0004) (ZeroConstructor, IsPlainOldData)
	FRootMotionMovementParams                          RootMotionParams;                                         // 0x0510(0x0040) (Transient)
	bool                                               bWasSimulatingRootMotion;                                 // 0x0550(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0xF];                                       // 0x0551(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CharacterMovementComponent"));
		return ptr;
	}


	void UpdateMaxNavMeshProjectionIntervalAndModifier(float DesiredMaxNavMeshProjectionInterval);
	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetNavMeshProjectionInterval(float InNavMeshProjectionInterval);
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerMoveOld(float OldTimeStamp, const FVector_NetQuantize10& OldAccel, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char OldMoveFlags);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	bool IsWalking();
	bool IsWalkable(const FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	float GetNavMeshProjectionInterval();
	UPrimitiveComponent* GetMovementBase();
	float GetMaxJumpHeight();
	float GetMaxAcceleration();
	FVector GetImpartedMovementBaseVelocity();
	FVector GetCurrentAcceleration();
	ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClientVeryShortAdjustPosition(float TimeStamp, const FVector& NewLoc, UPrimitiveComponent* NewBase, const FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const FVector& ServerLoc, const FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, const FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const FVector& NewLoc, const FVector& NewVel, UPrimitiveComponent* NewBase, const FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void CapsuleTouched(AActor* Other, UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const FVector& Impulse, bool bVelocityChange);
	void AddForce(const FVector& Force);
};


// Class Engine.InputComponent
// 0x0088 (0x0150 - 0x00C8)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x00C8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputComponent"));
		return ptr;
	}


	bool WasControllerKeyJustReleased(const FKey& Key);
	bool WasControllerKeyJustPressed(const FKey& Key);
	bool IsControllerKeyDown(const FKey& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	FVector GetControllerVectorKeyState(const FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const FKey& Key);
};


// Class Engine.DeveloperSettings
// 0x0010 (0x0038 - 0x0028)
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DeveloperSettings"));
		return ptr;
	}

};


// Class Engine.Engine
// 0x0950 (0x0978 - 0x0028)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	UFont*                                             TinyFont;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              TinyFontName;                                             // 0x0038(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             SmallFont;                                                // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              SmallFontName;                                            // 0x0050(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             MediumFont;                                               // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              MediumFontName;                                           // 0x0068(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             LargeFont;                                                // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              LargeFontName;                                            // 0x0080(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             MonoFont;                                                 // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              MonoFontName;                                             // 0x0098(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             SubtitleFont;                                             // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              SubtitleFontName;                                         // 0x00B0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UFont*                                             HugeFont;                                                 // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              HugeFontName;                                             // 0x00C8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<UFont*>                                     AdditionalFonts;                                          // 0x00D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET
	TArray<FString>                                    AdditionalFontNames;                                      // 0x00F0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UClass*                                            ConsoleClass;                                             // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              ConsoleClassName;                                         // 0x0108(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            GameViewportClientClass;                                  // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              GameViewportClientClassName;                              // 0x0120(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            LocalPlayerClass;                                         // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              LocalPlayerClassName;                                     // 0x0138(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            WorldSettingsClass;                                       // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              WorldSettingsClassName;                                   // 0x0150(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	FStringClassReference                              NavigationSystemClassName;                                // 0x0160(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            NavigationSystemClass;                                    // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              AvoidanceManagerClassName;                                // 0x0178(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            AvoidanceManagerClass;                                    // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	UClass*                                            PhysicsCollisionHandlerClass;                             // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              PhysicsCollisionHandlerClassName;                         // 0x0198(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	FStringClassReference                              GameUserSettingsClassName;                                // 0x01A8(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	UClass*                                            GameUserSettingsClass;                                    // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              AIControllerClassName;                                    // 0x01C0(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	UGameUserSettings*                                 GameUserSettings;                                         // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	UClass*                                            LevelScriptActorClass;                                    // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              LevelScriptActorClassName;                                // 0x01E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	FStringClassReference                              DefaultBlueprintBaseClassName;                            // 0x01F0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	FStringClassReference                              GameSingletonClassName;                                   // 0x0200(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	UObject*                                           GameSingleton;                                            // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData)
	UClass*                                            DefaultPreviewPawnClass;                                  // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringClassReference                              DefaultPreviewPawnClassName;                              // 0x0220(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	FString                                            PlayOnConsoleSaveDir;                                     // 0x0230(0x0010) (ZeroConstructor, Config)
	UTexture2D*                                        DefaultTexture;                                           // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DefaultTextureName;                                       // 0x0248(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture*                                          DefaultDiffuseTexture;                                    // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DefaultDiffuseTextureName;                                // 0x0260(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        DefaultBSPVertexTexture;                                  // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DefaultBSPVertexTextureName;                              // 0x0278(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        HighFrequencyNoiseTexture;                                // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              HighFrequencyNoiseTextureName;                            // 0x0290(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        DefaultBokehTexture;                                      // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DefaultBokehTextureName;                                  // 0x02A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        HDRCalibrationTexture;                                    // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              HDRCalibrationTextureName;                                // 0x02C0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         WireframeMaterial;                                        // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            WireframeMaterialName;                                    // 0x02D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         DebugMeshMaterial;                                        // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DebugMeshMaterialName;                                    // 0x02F0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         LevelColorationLitMaterial;                               // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            LevelColorationLitMaterialName;                           // 0x0308(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         LevelColorationUnlitMaterial;                             // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            LevelColorationUnlitMaterialName;                         // 0x0320(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         TriangleDensityScreenSpaceMaterial;                       // 0x0330(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            TriangleDensityScreenSpaceMaterialName;                   // 0x0338(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         TriangleDensityWorldSpaceMaterial;                        // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            TriangleDensityWorldSpaceMaterialName;                    // 0x0350(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         LightingTexelDensityMaterial;                             // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            LightingTexelDensityName;                                 // 0x0368(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         ShadedLevelColorationLitMaterial;                         // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            ShadedLevelColorationLitMaterialName;                     // 0x0380(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         ShadedLevelColorationUnlitMaterial;                       // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            ShadedLevelColorationUnlitMaterialName;                   // 0x0398(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         RemoveSurfaceMaterial;                                    // 0x03A8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              RemoveSurfaceMaterialName;                                // 0x03B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorMaterial;                                      // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorMaterialName;                                  // 0x03C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorViewModeMaterial_ColorOnly;                    // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorViewModeMaterialName_ColorOnly;                // 0x03E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorViewModeMaterial_AlphaAsColor;                 // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorViewModeMaterialName_AlphaAsColor;             // 0x03F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorViewModeMaterial_RedOnly;                      // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorViewModeMaterialName_RedOnly;                  // 0x0410(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorViewModeMaterial_GreenOnly;                    // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorViewModeMaterialName_GreenOnly;                // 0x0428(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         VertexColorViewModeMaterial_BlueOnly;                     // 0x0438(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            VertexColorViewModeMaterialName_BlueOnly;                 // 0x0440(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         ConstraintLimitMaterial;                                  // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData)
	UMaterialInstanceDynamic*                          ConstraintLimitMaterialX;                                 // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	UMaterialInstanceDynamic*                          ConstraintLimitMaterialY;                                 // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData)
	UMaterialInstanceDynamic*                          ConstraintLimitMaterialZ;                                 // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              ConstraintLimitMaterialName;                              // 0x0470(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         InvalidLightmapSettingsMaterial;                          // 0x0480(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              InvalidLightmapSettingsMaterialName;                      // 0x0488(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         PreviewShadowsIndicatorMaterial;                          // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              PreviewShadowsIndicatorMaterialName;                      // 0x04A0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	UMaterial*                                         ArrowMaterial;                                            // 0x04B0(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              ArrowMaterialName;                                        // 0x04B8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	FLinearColor                                       LightingOnlyBrightness;                                   // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<FColor>                                     LightComplexityColors;                                    // 0x04D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FLinearColor>                               ShaderComplexityColors;                                   // 0x04E8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FLinearColor>                               StationaryLightOverlapColors;                             // 0x04F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FLinearColor>                               LODColorationColors;                                      // 0x0508(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x0518(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                 // 0x051C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MinLightMapDensity;                                       // 0x0520(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x0524(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x0528(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                      // 0x052C(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData02[0x3];                                       // 0x052D(0x0003) MISSED OFFSET
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x0530(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x0534(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	FLinearColor                                       LightMapDensityVertexMappedColor;                         // 0x0538(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	FLinearColor                                       LightMapDensitySelectedColor;                             // 0x0548(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<FStatColorMapping>                          StatColorMappings;                                        // 0x0558(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UPhysicalMaterial*                                 DefaultPhysMaterial;                                      // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              DefaultPhysMaterialName;                                  // 0x0570(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FGameNameRedirect>                          ActiveGameNameRedirects;                                  // 0x0580(0x0010) (ZeroConstructor, Config)
	TArray<FClassRedirect>                             ActiveClassRedirects;                                     // 0x0590(0x0010) (ZeroConstructor, Config)
	TArray<FPluginRedirect>                            ActivePluginRedirects;                                    // 0x05A0(0x0010) (ZeroConstructor, Config)
	TArray<FStructRedirect>                            ActiveStructRedirects;                                    // 0x05B0(0x0010) (ZeroConstructor, Config)
	UTexture2D*                                        PreIntegratedSkinBRDFTexture;                             // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              PreIntegratedSkinBRDFTextureName;                         // 0x05C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        MiniFontTexture;                                          // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              MiniFontTextureName;                                      // 0x05E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture*                                          WeightMapPlaceholderTexture;                              // 0x05F0(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              WeightMapPlaceholderTextureName;                          // 0x05F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UTexture2D*                                        LightMapDensityTexture;                                   // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData)
	FStringAssetReference                              LightMapDensityTextureName;                               // 0x0610(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0620(0x0008) MISSED OFFSET
	UGameViewportClient*                               GameViewport;                                             // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FString>                                    DeferredCommands;                                         // 0x0630(0x0010) (ZeroConstructor)
	int                                                TickCycles;                                               // 0x0640(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                GameCycles;                                               // 0x0644(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ClientCycles;                                             // 0x0648(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              NearClipPlane;                                            // 0x064C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bHardwareSurveyEnabled : 1;                               // 0x0650(0x0001) (Deprecated)
	unsigned char                                      bSubtitlesEnabled : 1;                                    // 0x0650(0x0001) (Edit, Config)
	unsigned char                                      bSubtitlesForcedOff : 1;                                  // 0x0650(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0651(0x0003) MISSED OFFSET
	int                                                MaximumLoopIterationCount;                                // 0x0654(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                          // 0x0658(0x0001) (Edit, Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;           // 0x0658(0x0001) (Edit, Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                         // 0x0658(0x0001) (Config)
	unsigned char                                      UnknownData05 : 1;                                        // 0x0658(0x0001)
	unsigned char                                      bSmoothFrameRate : 1;                                     // 0x0658(0x0001) (Edit, Config)
	unsigned char                                      bUseFixedFrameRate : 1;                                   // 0x0658(0x0001) (Edit, Config)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0659(0x0003) MISSED OFFSET
	float                                              FixedFrameRate;                                           // 0x065C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FFloatRange                                        SmoothedFrameRateRange;                                   // 0x0660(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x0670(0x0001) (Config)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0671(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x0674(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                   // 0x0678(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0679(0x0003) MISSED OFFSET
	FColor                                             C_WorldBox;                                               // 0x067C(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_BrushWire;                                              // 0x0680(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_AddWire;                                                // 0x0684(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_SubtractWire;                                           // 0x0688(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_SemiSolidWire;                                          // 0x068C(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_NonSolidWire;                                           // 0x0690(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_WireBackground;                                         // 0x0694(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_ScaleBoxHi;                                             // 0x0698(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_VolumeCollision;                                        // 0x069C(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_BSPCollision;                                           // 0x06A0(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_OrthoBackground;                                        // 0x06A4(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_Volume;                                                 // 0x06A8(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             C_BrushShape;                                             // 0x06AC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x06B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x06B4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x06B5(0x0003) MISSED OFFSET
	FString                                            TransitionDescription;                                    // 0x06B8(0x0010) (ZeroConstructor)
	FString                                            TransitionGameMode;                                       // 0x06C8(0x0010) (ZeroConstructor)
	float                                              MeshLODRange;                                             // 0x06D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bAllowMatureLanguage : 1;                                 // 0x06DC(0x0001) (Config)
	unsigned char                                      UnknownData10[0x3];                                       // 0x06DD(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                                  // 0x06E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x06E4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x06E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x06EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                  // 0x06F0(0x0001) (Config)
	unsigned char                                      UnknownData11[0x3];                                       // 0x06F1(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                        // 0x06F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x06F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x06FC(0x0004) MISSED OFFSET
	TArray<FDropNoteInfo>                              PendingDroppedNotes;                                      // 0x0700(0x0010) (ZeroConstructor, Transient)
	FRigidBodyErrorCorrection                          PhysicErrorCorrection;                                    // 0x0710(0x001C) (Config)
	float                                              NetClientTicksPerSecond;                                  // 0x072C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bHasPendingGlobalReregister : 1;                          // 0x0730(0x0001) (Transient)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0731(0x0003) MISSED OFFSET
	float                                              DisplayGamma;                                             // 0x0734(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x0738(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FLinearColor                                       DefaultSelectedMaterialColor;                             // 0x073C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	FLinearColor                                       SelectedMaterialColor;                                    // 0x074C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	FLinearColor                                       SelectionOutlineColor;                                    // 0x075C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	FLinearColor                                       SubduedSelectionOutlineColor;                             // 0x076C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	FLinearColor                                       SelectedMaterialColorOverride;                            // 0x077C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOverridingSelectedColor;                               // 0x078C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x078D(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                         // 0x0790(0x0001) (Config, GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x0790(0x0001) (Transient)
	unsigned char                                      bSuppressMapWarnings : 1;                                 // 0x0790(0x0001) (Config, GlobalConfig)
	unsigned char                                      bCookSeparateSharedMPGameContent : 1;                     // 0x0790(0x0001) (Config, GlobalConfig)
	unsigned char                                      bDisableAILogging : 1;                                    // 0x0790(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0791(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x0794(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0798(0x0004) MISSED OFFSET
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x079C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                                  // 0x07A0(0x0001) (Transient)
	unsigned char                                      UnknownData17[0x7];                                       // 0x07A1(0x0007) MISSED OFFSET
	FString                                            ParticleEventManagerClassPath;                            // 0x07A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData18[0x10];                                      // 0x07B8(0x0010) MISSED OFFSET
	float                                              SelectionHighlightIntensity;                              // 0x07C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x07CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HoverHighlightIntensity;                                  // 0x07D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x07D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x130];                                     // 0x07D8(0x0130) MISSED OFFSET
	TArray<FNetDriverDefinition>                       NetDriverDefinitions;                                     // 0x0908(0x0010) (ZeroConstructor, Transient, Config)
	TArray<FString>                                    ServerActors;                                             // 0x0918(0x0010) (ZeroConstructor, Config)
	TArray<FString>                                    RuntimeServerActors;                                      // 0x0928(0x0010) (ZeroConstructor)
	unsigned char                                      bStartedLoadMapMovie : 1;                                 // 0x0938(0x0001) (Transient)
	unsigned char                                      UnknownData20[0x17];                                      // 0x0939(0x0017) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x0950(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x24];                                      // 0x0954(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Engine"));
		return ptr;
	}

};


// Class Engine.GameEngine
// 0x0070 (0x09E8 - 0x0978)
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                             // 0x0978(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x097C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x68];                                      // 0x0980(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameEngine"));
		return ptr;
	}

};


// Class Engine.GameInstance
// 0x0060 (0x0088 - 0x0028)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<ULocalPlayer*>                              LocalPlayers;                                             // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	UOnlineSession*                                    OnlineSession;                                            // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0058(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameInstance"));
		return ptr;
	}


	void ReceiveShutdown();
	void ReceiveInit();
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
};


// Class Engine.Info
// 0x0000 (0x03D0 - 0x03D0)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Info"));
		return ptr;
	}

};


// Class Engine.GameMode
// 0x00F8 (0x04C8 - 0x03D0)
class AGameMode : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	unsigned char                                      bDisableAsyncOcclusionChecking : 1;                       // 0x03D8(0x0001) (Edit)
	unsigned char                                      bUseSeamlessTravel : 1;                                   // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseable : 1;                                           // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators : 1;                            // 0x03D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bDelayedStart : 1;                                        // 0x03D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	FString                                            OptionsString;                                            // 0x03E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	UClass*                                            DefaultPawnClass;                                         // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UClass*                                            HUDClass;                                                 // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumSpectators;                                            // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumPlayers;                                               // 0x0404(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumBots;                                                  // 0x0408(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	AGameSession*                                      GameSession;                                              // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x0418(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	FText                                              DefaultPlayerName;                                        // 0x0420(0x0038) (Edit)
	UClass*                                            EngineMessageClass;                                       // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	UClass*                                            PlayerControllerClass;                                    // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	UClass*                                            SpectatorClass;                                           // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	UClass*                                            ReplaySpectatorPlayerControllerClass;                     // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	UClass*                                            PlayerStateClass;                                         // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	UClass*                                            GameStateClass;                                           // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	AGameState*                                        GameState;                                                // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<APlayerState*>                              InactivePlayerArray;                                      // 0x0490(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x04A0(0x0010) MISSED OFFSET
	TArray<FGameClassShortName>                        GameModeClassAliases;                                     // 0x04B0(0x0010) (ZeroConstructor, Config)
	float                                              InactivePlayerStateLifeSpan;                              // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHandleDedicatedServerReplays;                            // 0x04C4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameMode"));
		return ptr;
	}


	void StartPlay();
	void StartMatch();
	APawn* SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot);
	bool ShouldReset(AActor* ActorToReset);
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void ReturnToMainMenuHost();
	void RestartGame();
	void ResetLevel();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	bool PlayerCanRestart(APlayerController* Player);
	bool MustSpectate(APlayerController* NewPlayerController);
	void K2_PostLogin(APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC);
	void K2_OnSetMatchState(const FName& NewState);
	void K2_OnRestartPlayer(AController* NewPlayer);
	void K2_OnLogout(AController* ExitingController);
	void K2_OnChangeName(AController* Other, const FString& NewName, bool bNameChange);
	AActor* K2_FindPlayerStart(AController* Player);
	bool IsMatchInProgress();
	void InitStartSpot(AActor* StartSpot, AController* NewPlayer);
	bool HasMatchStarted();
	bool HasMatchEnded();
	int GetNumPlayers();
	FName GetMatchState();
	UClass* GetDefaultPawnClassForController(AController* InController);
	AActor* FindPlayerStart(AController* Player, const FString& IncomingName);
	void EndMatch();
	AActor* ChoosePlayerStart(AController* Player);
	void ChangeName(AController* Controller, const FString& NewName, bool bNameChange);
	bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget);
	void AbortMatch();
};


// Class Engine.PrimitiveComponent
// 0x02E0 (0x0590 - 0x02B0)
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02B0(0x0008) MISSED OFFSET
	float                                              MinDrawDistance;                                          // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	float                                              LDMaxDrawDistance;                                        // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x02C8(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x02C9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x02CA(0x0002) MISSED OFFSET
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                            // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents : 1;                               // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bMultiBodyOverlap : 1;                                    // 0x02CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                               // 0x02CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove : 1;                                  // 0x02CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove : 1;                                // 0x02CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x02CC(0x0001)
	unsigned char                                      bAllowCullDistanceVolume : 1;                             // 0x02CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                         // 0x02CD(0x0001)
	unsigned char                                      bRenderInMainPass : 1;                                    // 0x02CD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInCustomPrePass : 1;                               // 0x02CD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReflected : 1;                                           // 0x02CD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03 : 1;                                        // 0x02CD(0x0001)
	unsigned char                                      bReflectedOnLowQuality : 1;                               // 0x02CD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFFTWaterMask : 1;                                        // 0x02CD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bVolumeFogMask : 1;                                       // 0x02CD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04 : 1;                                        // 0x02CE(0x0001)
	unsigned char                                      bAffectsFlatWater : 1;                                    // 0x02CE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGPUParticlesKillPlane : 1;                               // 0x02CE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDontCull : 1;                                            // 0x02CE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDontSizeOnScreenCull : 1;                                // 0x02CE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x1];                                       // 0x02CF(0x0001) MISSED OFFSET
	float                                              OverriddenShadowMinTexelSize;                             // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideShadowMinSizeCulling;                            // 0x02D4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideShadowCascadesExclusion;                         // 0x02D5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EExcludeFromCascades>                  ExcludedShadowCascades;                                   // 0x02D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x02D7(0x0001) MISSED OFFSET
	unsigned char                                      bReceivesDecals : 1;                                      // 0x02D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOwnerNoSee : 1;                                          // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee : 1;                                        // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                       // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsACloud : 1;                                            // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder : 1;                                       // 0x02D8(0x0001)
	unsigned char                                      bSelectable : 1;                                          // 0x02D8(0x0001)
	unsigned char                                      bForceMipStreaming : 1;                                   // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                            // 0x02D9(0x0001)
	unsigned char                                      CastShadow : 1;                                           // 0x02D9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x02D9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFarCascadeLPVBiasMultiplier : 1;                      // 0x02D9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                         // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow : 1;                                   // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow : 1;                                    // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                     // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly : 1;                                      // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastFarShadow : 1;                                       // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow : 1;                                     // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow : 1;                                 // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow : 1;                                    // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowOnLowQuality : 1;                              // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic : 1;                                     // 0x02DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                             // 0x02DB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                             // 0x02DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHasCachedStaticLighting;                                 // 0x02DD(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bStaticLightingBuildEnqueued;                             // 0x02DE(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x02DF(0x0001) MISSED OFFSET
	unsigned char                                      bIgnoreRadialImpulse : 1;                                 // 0x02E0(0x0001)
	unsigned char                                      bIgnoreRadialForce : 1;                                   // 0x02E0(0x0001)
	unsigned char                                      AlwaysLoadOnClient : 1;                                   // 0x02E0(0x0001)
	unsigned char                                      AlwaysLoadOnServer : 1;                                   // 0x02E0(0x0001)
	unsigned char                                      bUseEditorCompositing : 1;                                // 0x02E0(0x0001)
	unsigned char                                      bRenderCustomDepth : 1;                                   // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAllowVelocityInMaterial : 1;                             // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x3];                                       // 0x02E1(0x0003) MISSED OFFSET
	int                                                CustomDepthStencilValue;                                  // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TranslucencySortPriority;                                 // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisibilityId;                                             // 0x02EC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x02F0(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FarCascadeLPVBiasMultiplier;                              // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LpvIntensityMultiplier;                                   // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FCustomPrimitiveData                               CustomPrimitiveData;                                      // 0x0300(0x0010) (Edit)
	FBodyInstance                                      BodyInstance;                                             // 0x0310(0x0180) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectRain : 1;                                          // 0x0490(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanEverAffectNavigation : 1;                             // 0x0490(0x0001) (Edit)
	unsigned char                                      UnknownData10 : 1;                                        // 0x0490(0x0001)
	unsigned char                                      bSkipRenderingInOuterLPVCascades : 1;                     // 0x0490(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMergeCollisionComponents : 1;                      // 0x0490(0x0001) (Edit)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerUnderwater : 1;            // 0x0490(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerAbove : 1;                 // 0x0490(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerAbove : 1;                 // 0x0490(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerUnderwater : 1;            // 0x0491(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanRenderAboveAndBelowWaterAtSameTime : 1;               // 0x0491(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData11[0x6];                                       // 0x0492(0x0006) MISSED OFFSET
	float                                              BoundsScale;                                              // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionBoundsScale;                                     // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LastRenderTime;                                           // 0x04A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bGPUVisibility;                                           // 0x04A4(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                              // 0x04A5(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                     // 0x04A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x49];                                      // 0x04A7(0x0049) MISSED OFFSET
	FScriptMulticastSparseDelegate                     OnComponentHit;                                           // 0x04F0(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnComponentBeginOverlap;                                  // 0x04F1(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnComponentEndOverlap;                                    // 0x04F2(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnComponentWake;                                          // 0x04F3(0x0001) (InstancedReference, BlueprintAssignable)
	FScriptMulticastSparseDelegate                     OnComponentSleep;                                         // 0x04F4(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData13[0x33];                                      // 0x04F5(0x0033) MISSED OFFSET
	UPrimitiveComponent*                               LODParentPrimitive;                                       // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	FPrimitiveComponentPostPhysicsTickFunction         PostPhysicsComponentTick;                                 // 0x0530(0x0050)
	UPrimitiveComponent*                               MergedCollisionComponentParent;                           // 0x0580(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0588(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PrimitiveComponent"));
		return ptr;
	}


	void WakeRigidBody(const FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const FWalkableSlopeOverride& NewOverride);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const FName& BoneName);
	void SetPhysicsLinearVelocity(const FVector& NewVel, bool bAddToCurrent, const FName& BoneName);
	void SetPhysicsAngularVelocity(const FVector& NewAngVel, bool bAddToCurrent, const FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterial(int ElementIndex, UMaterialInterface* Material);
	void SetMassScale(const FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void SetLinearDamping(float InDamping);
	void SetGenerateOverlapEvents(bool bEnable);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomPrimitiveVector(int Index, const FVector& Value);
	void SetCustomPrimitiveScalar(int Index, float Value);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void SetCenterOfMass(const FVector& CenterOfMassOffset, const FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const FVector& NewVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	FVector ScaleByMomentOfInertia(const FVector& InputVector, const FName& BoneName);
	void PutRigidBodyToSleep(const FName& BoneName);
	bool K2_LineTraceComponent(const FVector& TraceStart, const FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, FVector* HitLocation, FVector* HitNormal, FName* BoneName);
	bool IsOverlappingComponent(UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(AActor* Other);
	bool IsGravityEnabled();
	void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore);
	FWalkableSlopeOverride GetWalkableSlopeOverride();
	FVector GetPhysicsLinearVelocityAtPoint(const FVector& Point, const FName& BoneName);
	FVector GetPhysicsLinearVelocity(const FName& BoneName);
	FVector GetPhysicsAngularVelocity(const FName& BoneName);
	void GetOverlappingComponents(TArray<UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(UClass* ClassFilter, TArray<AActor*>* OverlappingActors);
	TArray<FOverlapInfo> GetOverlapInfos();
	int GetNumMaterials();
	UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	FVector GetInertiaTensor(const FName& BoneName);
	TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	FName GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> GetCollisionObjectType();
	float GetClosestPointOnCollision(const FVector& Point, const FName& BoneName, FVector* OutPointOnBody);
	FVector GetCenterOfMass(const FName& BoneName);
	float GetAngularDamping();
	UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, UMaterialInterface* SourceMaterial);
	UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, UMaterialInterface* Parent);
	UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreActors(int InSlack);
	bool CanCharacterStepUp(APawn* Pawn);
	void AddTorque(const FVector& Torque, const FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const FVector& Impulse, const FVector& Location, const FName& BoneName);
	void AddImpulse(const FVector& Impulse, const FName& BoneName, bool bVelChange);
	void AddForceAtLocation(const FVector& Force, const FVector& Location, const FName& BoneName);
	void AddForce(const FVector& Force, const FName& BoneName, bool bAccelChange);
	void AddAngularImpulse(const FVector& Impulse, const FName& BoneName, bool bVelChange);
};


// Class Engine.GameState
// 0x0058 (0x0428 - 0x03D0)
class AGameState : public AInfo
{
public:
	UClass*                                            GameModeClass;                                            // 0x03D0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	AGameMode*                                         AuthorityGameMode;                                        // 0x03D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	UClass*                                            SpectatorClass;                                           // 0x03E0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	FName                                              MatchState;                                               // 0x03E8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	FName                                              PreviousMatchState;                                       // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	TArray<APlayerState*>                              PlayerArray;                                              // 0x0400(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              ReplicatedWorldTimeSeconds;                               // 0x0410(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x0414(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x041C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameState"));
		return ptr;
	}


	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_MatchState();
	void OnRep_GameModeClass();
	void OnRep_ElapsedTime();
	float GetServerWorldTimeSeconds();
};


// Class Engine.GameUserSettings
// 0x0050 (0x0078 - 0x0028)
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0029(0x001F) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x004C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosY;                                               // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDesktopResolutionForFullscreen;                       // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                FullscreenMode;                                           // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           Version;                                                  // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameUserSettings"));
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0008 (0x0030 - 0x0028)
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ScriptViewportClient"));
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x0220 (0x0250 - 0x0030)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	UConsole*                                          ViewportConsole;                                          // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FDebugDisplayProperty>                      DebugProperties;                                          // 0x0040(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0050(0x0030) MISSED OFFSET
	UWorld*                                            World;                                                    // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	UGameInstance*                                     GameInstance;                                             // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C0];                                     // 0x0090(0x01C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameViewportClient"));
		return ptr;
	}


	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
};


// Class Engine.PlayerState
// 0x0088 (0x0458 - 0x03D0)
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                    // 0x03D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Ping;                                                     // 0x03D4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	FString                                            PlayerName;                                               // 0x03D8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	int                                                PlayerId;                                                 // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsSpectator : 1;                                         // 0x03FC(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlySpectator : 1;                                       // 0x03FC(0x0001)
	unsigned char                                      bIsABot : 1;                                              // 0x03FC(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02 : 1;                                        // 0x03FC(0x0001)
	unsigned char                                      bIsInactive : 1;                                          // 0x03FC(0x0001)
	unsigned char                                      bFromPreviousLevel : 1;                                   // 0x03FC(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET
	int                                                StartTime;                                                // 0x0400(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	UClass*                                            EngineMessageClass;                                       // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0410(0x0018) MISSED OFFSET
	FUniqueNetIdRepl                                   UniqueId;                                                 // 0x0428(0x0018) (Net)
	unsigned char                                      UnknownData06[0x18];                                      // 0x0440(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerState"));
		return ptr;
	}


	void OnRep_UniqueId();
	void OnRep_PlayerName();
};


// Class Engine.Controller
// 0x0060 (0x0430 - 0x03D0)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	APawn*                                             Pawn;                                                     // 0x03D8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	ACharacter*                                        Character;                                                // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData)
	APlayerState*                                      PlayerState;                                              // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	USceneComponent*                                   TransformComponent;                                       // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	FRotator                                           ControlRotation;                                          // 0x0400(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAttachToPawn : 1;                                        // 0x040C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0xB];                                       // 0x040D(0x000B) MISSED OFFSET
	FName                                              StateName;                                                // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData)
	FScriptMulticastDelegate                           OnInstigatedAnyDamage;                                    // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Controller"));
		return ptr;
	}


	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation);
	void SetControlRotation(const FRotator& NewRotation);
	void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser);
	void Possess(APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(AActor* Other, const FVector& ViewPoint, bool bAlternateChecks);
	APawn* K2_GetPawn();
	bool IsLocalPlayerController();
	bool IsLocalController();
	AActor* GetViewTarget();
	FRotator GetDesiredRotation();
	FRotator GetControlRotation();
	void ClientSetRotation(const FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const FVector& NewLocation, const FRotator& NewRotation);
	APlayerController* CastToPlayerController();
};


// Class Engine.PlayerController
// 0x02F8 (0x0728 - 0x0430)
class APlayerController : public AController
{
public:
	UPlayer*                                           Player;                                                   // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0438(0x0008) MISSED OFFSET
	APawn*                                             AcknowledgedPawn;                                         // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	UInterpTrackInstDirector*                          ControllingDirTrackInst;                                  // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0450(0x0008) MISSED OFFSET
	AHUD*                                              MyHUD;                                                    // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	APlayerCameraManager*                              PlayerCameraManager;                                      // 0x0460(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UClass*                                            PlayerCameraManagerClass;                                 // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoManageActiveCameraTarget;                            // 0x0470(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0471(0x0003) MISSED OFFSET
	FRotator                                           TargetViewRotation;                                       // 0x0474(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	TArray<AActor*>                                    HiddenActors;                                             // 0x0490(0x0010) (ZeroConstructor)
	float                                              LastSpectatorStateSynchTime;                              // 0x04A0(0x0004) (ZeroConstructor, IsPlainOldData)
	FVector                                            LastSpectatorSyncLocation;                                // 0x04A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	FRotator                                           LastSpectatorSyncRotation;                                // 0x04B0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ClientCap;                                                // 0x04BC(0x0004) (ZeroConstructor, IsPlainOldData)
	UCheatManager*                                     CheatManager;                                             // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UClass*                                            CheatClass;                                               // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData)
	UPlayerInput*                                      PlayerInput;                                              // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects;                               // 0x04D8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x90];                                      // 0x04E8(0x0090) MISSED OFFSET
	unsigned char                                      UnknownData05 : 2;                                        // 0x0578(0x0001)
	unsigned char                                      bPlayerIsWaiting : 1;                                     // 0x0578(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0579(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                           // 0x057C(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	bool                                               bHasVoiceHandshakeCompleted;                              // 0x057D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x057E(0x0002) MISSED OFFSET
	UNetConnection*                                    PendingSwapConnection;                                    // 0x0580(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	UNetConnection*                                    NetConnection;                                            // 0x0588(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0590(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputRollScale;                                           // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableClickEvents : 1;                                   // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchEvents : 1;                                   // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents : 1;                               // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents : 1;                               // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled : 1;                                // 0x05A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData09[0x3];                                       // 0x05A9(0x0003) MISSED OFFSET
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                       // 0x05AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                       // 0x05AD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                 // 0x05AE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                 // 0x05AF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForceFeedbackIntensity;                                   // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x88];                                      // 0x05B8(0x0088) MISSED OFFSET
	UInputComponent*                                   InactiveStateInputComponent;                              // 0x0640(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData11[0x20];                                      // 0x0648(0x0020) MISSED OFFSET
	UTouchInterface*                                   CurrentTouchInterface;                                    // 0x0668(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x30];                                      // 0x0670(0x0030) MISSED OFFSET
	ASpectatorPawn*                                    SpectatorPawn;                                            // 0x06A0(0x0008) (ZeroConstructor, IsPlainOldData)
	FVector                                            SpawnLocation;                                            // 0x06A8(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x06B4(0x0004) MISSED OFFSET
	TMap<ULevel*, UInputComponent*>                    LevelInputComponents;                                     // 0x06B8(0x0050) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData14[0x14];                                      // 0x0708(0x0014) MISSED OFFSET
	bool                                               bIsLocalPlayerController;                                 // 0x071C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x1];                                       // 0x071D(0x0001) MISSED OFFSET
	uint16_t                                           SeamlessTravelCount;                                      // 0x071E(0x0002) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x0720(0x0002) (ZeroConstructor, IsPlainOldData)
	bool                                               bInCinematicMode;                                         // 0x0722(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x5];                                       // 0x0723(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerController"));
		return ptr;
	}


	bool WasInputKeyJustReleased(const FKey& Key);
	bool WasInputKeyJustPressed(const FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const FString& URL);
	void StopHapticEffect(TEnumAsByte<EControllerHand> Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const FString& S);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<EControllerHand> Hand);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(USceneComponent* AttachToComponent, const FVector& Location, const FRotator& Rotation);
	void ServerViewSelf(const FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateCamera(const FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const FVector& NewLoc, const FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const FName& WorldPackageName);
	void ServerMutePlayer(const FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const FString& S);
	void ServerCamera(const FName& NewMode);
	void ServerAcknowledgePossession(APawn* P);
	void SendToConsole(const FString& Command);
	void RestartLevel();
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	bool ProjectWorldLocationToScreen(const FVector& WorldLocation, FVector2D* ScreenLocation);
	void PlayHapticEffect(UHapticFeedbackEffect* HapticEffect, TEnumAsByte<EControllerHand> Hand, float Scale);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const FString& URL);
	bool IsSeamlessTravelInProgress();
	bool IsPossessingServerAcknowledgedPawn();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsInputKeyDown(const FKey& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	FVector GetInputVectorKeyState(const FKey& Key);
	void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(FVector* Tilt, FVector* RotationRate, FVector* Gravity, FVector* Acceleration);
	float GetInputKeyTimeDown(const FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const FKey& Key);
	AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult* HitResult);
	FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector* WorldLocation, FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(FVector* WorldLocation, FVector* WorldDirection);
	void ConsoleKey(const FKey& Key);
	void ClientWasKicked(const FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateLevelStreamingStatusBatched(const FString& PackageBasePath, TArray<FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo);
	void ClientUpdateLevelStreamingStatus(const FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const FGuid& MapPackageGuid);
	void ClientTravel(const FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const FGuid& MapPackageGuid);
	void ClientTeamMessage(APlayerState* SenderPlayerState, const FString& S, const FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, const FName& Tag);
	void ClientStopCameraShake(UClass* Shake);
	void ClientStopCameraAnim(UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(AActor* A, const FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const FColor& FadeColor, const FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientSeamlessTravelComplete();
	void ClientReturnToMainMenu(const FString& ReturnReason);
	void ClientRetryClientRestart(APawn* NewPawn);
	void ClientRestart(APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(UObject* Object);
	void ClientReceiveLocalizedMessage(UClass* Message, int Switch, APlayerState* RelatedPlayerState_2, APlayerState* RelatedPlayerState_3, UObject* OptionalObject);
	void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(USoundBase* Sound, const FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const FName& Tag);
	void ClientPlayCameraShake(UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const FRotator& CustomPlaySpace);
	void ClientMutePlayer(const FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const FString& S, const FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const FName& NewState);
	void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientBlendOutCameraShake(UClass* Shake);
	void ClientAddTextureStreamingLoc(const FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(UTouchInterface* NewTouchInterface);
};


// Class Engine.StaticMeshActor
// 0x0010 (0x03E0 - 0x03D0)
class AStaticMeshActor : public AActor
{
public:
	UStaticMeshComponent*                              StaticMeshComponent;                                      // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bStaticMeshReplicateMovement;                             // 0x03D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENavDataGatheringMode>                 NavigationGeometryGatheringMode;                          // 0x03D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03DA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StaticMeshActor"));
		return ptr;
	}

};


// Class Engine.Brush
// 0x0038 (0x0408 - 0x03D0)
class ABrush : public AActor
{
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	FColor                                             BrushColor;                                               // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                PolyFlags;                                                // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bColored : 1;                                             // 0x03DC(0x0001)
	unsigned char                                      bSolidWhenSelected : 1;                                   // 0x03DC(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                           // 0x03DC(0x0001)
	unsigned char                                      bNotForClientOrServer : 1;                                // 0x03DC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	UModel*                                            Brush;                                                    // 0x03E0(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	UBrushComponent*                                   BrushComponent;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                                      // 0x03F0(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	TArray<FGeomSelection>                             SavedSelections;                                          // 0x03F8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Brush"));
		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x0408 - 0x0408)
class AVolume : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Volume"));
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0000 (0x0408 - 0x0408)
class ABlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlockingVolume"));
		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x01B8 (0x0588 - 0x03D0)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	unsigned char                                      bEnableWorldBoundsChecks : 1;                             // 0x03D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem : 1;                              // 0x03D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	TEnumAsByte<EWorldCompositionSetting>              WorldCompositionSetting;                                  // 0x03DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	FStringAssetReference                              InstancedNavMeshesDataAssetOveride;                       // 0x03E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                           // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet : 1;                                     // 0x03F0(0x0001) (Transient)
	unsigned char                                      bGlobalGravitySet : 1;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              KillZ;                                                    // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UClass*                                            KillZDamageType;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	UClass*                                            DefaultPhysicsVolumeClass;                                // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	UClass*                                            PhysicsCollisionHandlerClass;                             // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UClass*                                            DefaultGameMode;                                          // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<FGameModePrefix>                            DefaultMapPrefixes;                                       // 0x0420(0x0010) (ZeroConstructor, Config)
	UClass*                                            GameNetworkManagerClass;                                  // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMinimizeBSPSections : 1;                                 // 0x043C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	FVector                                            DefaultColorScale;                                        // 0x0440(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                                // 0x044C(0x0001) (Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                     // 0x044C(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x044D(0x0003) MISSED OFFSET
	int                                                VisibilityCellSize;                                       // 0x0450(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x0454(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	unsigned char                                      bForceNoPrecomputedLighting : 1;                          // 0x0458(0x0001) (Edit)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	FLightmassWorldInfoSettings                        LightmassSettings;                                        // 0x045C(0x0044) (Edit)
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x04A0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	FReverbSettings                                    DefaultReverbSettings;                                    // 0x04A8(0x0018) (Edit, Config)
	FInteriorSettings                                  DefaultAmbientZoneSettings;                               // 0x04C0(0x0024) (Edit, Config)
	unsigned char                                      UnknownData10[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	USoundMix*                                         DefaultBaseSoundMix;                                      // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	UBookMark*                                         BookMarks[0xA];                                           // 0x04F8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              TimeDilation;                                             // 0x0548(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x054C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x0550(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHighPriorityLoading : 1;                                 // 0x0554(0x0001) (Net)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                            // 0x0554(0x0001)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0555(0x0003) MISSED OFFSET
	TArray<FNetViewer>                                 ReplicationViewers;                                       // 0x0558(0x0010) (ZeroConstructor)
	TArray<UAssetUserData*>                            AssetUserData;                                            // 0x0568(0x0010) (ExportObject, ZeroConstructor)
	float                                              WorldGravityZ;                                            // 0x0578(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x057C(0x0004) MISSED OFFSET
	APlayerState*                                      Pauser;                                                   // 0x0580(0x0008) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WorldSettings"));
		return ptr;
	}


	void OnRep_WorldGravityZ();
};


// Class Engine.PostProcessComponent
// 0x0560 (0x0810 - 0x02B0)
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02B0(0x0010) MISSED OFFSET
	FPostProcessSettings                               Settings;                                                 // 0x02C0(0x0540) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0800(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0804(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0808(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x080C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x080C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x080D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PostProcessComponent"));
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.Texture
// 0x0110 (0x0138 - 0x0028)
class UTexture : public UObject
{
public:
	int                                                LODBias;                                                  // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SRGB : 1;                                                 // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      NeverStream : 1;                                          // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoTiling : 1;                                            // 0x0030(0x0001)
	unsigned char                                      bUseCinematicMipLevels : 1;                               // 0x0030(0x0001) (Transient)
	unsigned char                                      CompressionNone : 1;                                      // 0x0030(0x0001) (Edit)
	unsigned char                                      bUAV : 1;                                                 // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	uint32_t                                           MaxQualityReduction;                                      // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                CachedCombinedLODBias;                                    // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x003C(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0043(0x0001) MISSED OFFSET
	float                                              StreamingPriorityBoost;                                   // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0048(0x0058) MISSED OFFSET
	TArray<FExternalMip>                               ExternalMips;                                             // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x88];                                      // 0x00B0(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Texture"));
		return ptr;
	}

};


// Class Engine.TextureRenderTarget
// 0x0008 (0x0140 - 0x0138)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                              // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureRenderTarget"));
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0028 (0x0168 - 0x0140)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0144(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       ClearColor;                                               // 0x0148(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0159(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x015A(0x0002) MISSED OFFSET
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x015C(0x0001)
	unsigned char                                      bHDR : 1;                                                 // 0x015C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoGenerateMips : 1;                                    // 0x015C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDontClearOnCreation;                                     // 0x0161(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0162(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureRenderTarget2D"));
		return ptr;
	}

};


// Class Engine.DebugCameraController
// 0x0050 (0x0778 - 0x0728)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bUseOriginalPlayerHUD : 1;                                // 0x0728(0x0001) (Config, GlobalConfig)
	unsigned char                                      bShowSelectedInfo : 1;                                    // 0x0728(0x0001) (Config, GlobalConfig)
	unsigned char                                      bIsFrozenRendering : 1;                                   // 0x0728(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0729(0x0007) MISSED OFFSET
	UDrawFrustumComponent*                             DrawFrustum;                                              // 0x0730(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0738(0x0010) MISSED OFFSET
	APlayerController*                                 OriginalControllerRef;                                    // 0x0748(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPlayer*                                           OriginalPlayer;                                           // 0x0750(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpeedScale;                                               // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x075C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialDecel;                                             // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedScaleAdjustment;                                     // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FovScaleAdjustment;                                       // 0x076C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0770(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DebugCameraController"));
		return ptr;
	}


	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void IncreaseFOV();
	void IncreaseCameraSpeed();
	void DecreaseFOV();
	void DecreaseCameraSpeed();
};


// Class Engine.HUD
// 0x00F8 (0x04C8 - 0x03D0)
class AHUD : public AActor
{
public:
	FColor                                             WhiteColor;                                               // 0x03D0(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             GreenColor;                                               // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             RedColor;                                                 // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	APlayerController*                                 PlayerOwner;                                              // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                                     // 0x03E8(0x0001) (Transient)
	unsigned char                                      bShowHUD : 1;                                             // 0x03E8(0x0001) (Config)
	unsigned char                                      bShowDebugInfo : 1;                                       // 0x03E8(0x0001)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                 // 0x03E8(0x0001)
	unsigned char                                      bShowOverlays : 1;                                        // 0x03E8(0x0001)
	unsigned char                                      bEnableDebugTextShadow : 1;                               // 0x03E8(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	TArray<AActor*>                                    PostRenderedActors;                                       // 0x03F0(0x0010) (ZeroConstructor)
	float                                              LastHUDRenderTime;                                        // 0x0400(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RenderDelta;                                              // 0x0404(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FName>                                      DebugDisplay;                                             // 0x0408(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FName>                                      ToggledDebugCategories;                                   // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig)
	UCanvas*                                           Canvas;                                                   // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData)
	UCanvas*                                           DebugCanvas;                                              // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FDebugTextInfo>                             DebugTextList;                                            // 0x0438(0x0010) (ZeroConstructor)
	UClass*                                            ShowDebugTargetDesiredClass;                              // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	AActor*                                            ShowDebugTargetActor;                                     // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x70];                                      // 0x0458(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.HUD"));
		return ptr;
	}


	void ShowHUD();
	void ShowDebugToggleSubCategory(const FName& Category);
	void ShowDebugForReticleTargetToggle(UClass* DesiredClass);
	void ShowDebug(const FName& DebugType);
	void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const FName& BoxName);
	void ReceiveHitBoxClick(const FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	FVector Project(const FVector& Location);
	void GetTextSize(const FString& Text, UFont* Font, float Scale, float* OutWidth, float* OutHeight);
	APlayerController* GetOwningPlayerController();
	APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(UClass* ClassFilter, const FVector2D& FirstPoint, const FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<AActor*>* OutActors);
	void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const FVector2D& RotPivot);
	void DrawText(const FString& Text, const FLinearColor& TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(UMaterialInterface* Material, const FVector2D& V0_Pos, const FVector2D& V1_Pos, const FVector2D& V2_Pos, const FVector2D& V0_UV, const FVector2D& V1_UV, const FVector2D& V2_UV, const FLinearColor& V0_Color, const FLinearColor& V1_Color, const FLinearColor& V2_Color);
	void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const FLinearColor& LineColor);
	void Deproject(float ScreenX, float ScreenY, FVector* WorldPosition, FVector* WorldDirection);
	void AddHitBox(const FVector2D& Position, const FVector2D& Size, const FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const FString& DebugText, AActor* SrcActor, float Duration, const FVector& Offset, const FVector& DesiredOffset, const FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.FeatureToggledStringAssetReference
// 0x0018 (0x0040 - 0x0028)
class UFeatureToggledStringAssetReference : public UDataAsset
{
public:
	TArray<FFeatureToggledStringAssetReferenceEntry>   Entries;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)
	UClass*                                            ClassType;                                                // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FeatureToggledStringAssetReference"));
		return ptr;
	}

};


// Class Engine.LevelScriptActor
// 0x0008 (0x03D8 - 0x03D0)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                        // 0x03D0(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelScriptActor"));
		return ptr;
	}


	void WorldOriginLocationChanged(const FIntVector& OldOriginLocation, const FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const FName& EventName);
	void MatchStarted();
	void LevelReset();
	void InitialNetRelevantActorsCreated();
};


// Class Engine.MeshComponent
// 0x0010 (0x05A0 - 0x0590)
class UMeshComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MeshComponent"));
		return ptr;
	}


	void ResetDefaultMaterials();
	TArray<UMaterialInterface*> GetMaterials();
};


// Class Engine.StaticMeshComponent
// 0x0050 (0x05F0 - 0x05A0)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                MinLOD;                                                   // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05A4(0x0004) MISSED OFFSET
	UStaticMesh*                                       StaticMesh;                                               // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideWireframeColor;                                  // 0x05B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x05B1(0x0003) MISSED OFFSET
	FColor                                             WireframeColorOverride;                                   // 0x05B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x05B8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes : 1;                                 // 0x05B8(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x05B9(0x0003) MISSED OFFSET
	int                                                OverriddenLightMapRes;                                    // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET
	TArray<FGuid>                                      IrrelevantLights;                                         // 0x05C8(0x0010) (ZeroConstructor)
	TArray<FStaticMeshComponentLODInfo>                LODData;                                                  // 0x05D8(0x0010) (ZeroConstructor, Transient)
	UMaterialInterface*                                CustomDepthMaterial;                                      // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StaticMeshComponent"));
		return ptr;
	}


	bool SetStaticMesh(UStaticMesh* NewMesh);
	void SetForcedLodModel(int NewForcedLodModel);
	void SetCustomDepthMaterial(UMaterialInterface* Material);
	void OnRep_StaticMesh(UStaticMesh* OldStaticMesh);
	void GetLocalBounds(FVector* Min, FVector* Max);
	UMaterialInterface* GetCustomDepthMaterial();
};


// Class Engine.FogVolume
// 0x0010 (0x03E0 - 0x03D0)
class AFogVolume : public AActor
{
public:
	USphereComponent*                                  SphereComponent;                                          // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UFogVolumeComponent*                               FogVolumeComponent;                                       // 0x03D8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FogVolume"));
		return ptr;
	}

};


// Class Engine.ThreadedActor
// 0x0000 (0x03D0 - 0x03D0)
class AThreadedActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ThreadedActor"));
		return ptr;
	}

};


// Class Engine.MaterialInterface
// 0x0030 (0x0058 - 0x0028)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	USubsurfaceProfile*                                SubsurfaceProfile;                                        // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0038(0x0004) MISSED OFFSET
	FLightmassMaterialInterfaceSettings                LightmassSettings;                                        // 0x003C(0x0014) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialInterface"));
		return ptr;
	}


	UPhysicalMaterial* GetPhysicalMaterial();
	UMaterial* GetBaseMaterial();
};


// Class Engine.Material
// 0x09C0 (0x0A18 - 0x0058)
class UMaterial : public UMaterialInterface
{
public:
	UPhysicalMaterial*                                 PhysMaterial;                                             // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FColorMaterialInput                                DiffuseColor;                                             // 0x0060(0x0040) (Deprecated)
	FColorMaterialInput                                SpecularColor;                                            // 0x00A0(0x0040) (Deprecated)
	FColorMaterialInput                                BaseColor;                                                // 0x00E0(0x0040)
	FScalarMaterialInput                               Metallic;                                                 // 0x0120(0x0040)
	FScalarMaterialInput                               Specular;                                                 // 0x0160(0x0040)
	FScalarMaterialInput                               Roughness;                                                // 0x01A0(0x0040)
	FVectorMaterialInput                               Normal;                                                   // 0x01E0(0x0048)
	FColorMaterialInput                                EmissiveColor;                                            // 0x0228(0x0040)
	FScalarMaterialInput                               Opacity;                                                  // 0x0268(0x0040)
	FScalarMaterialInput                               OpacityMask;                                              // 0x02A8(0x0040)
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                           // 0x02E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x02E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                           // 0x02EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                    // 0x02EB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x02EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02ED(0x0003) MISSED OFFSET
	float                                              OpacityMaskClipValue;                                     // 0x02F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DepthWeightScale;                                         // 0x02F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DepthWeightExponent;                                      // 0x02F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DepthWeightBase;                                          // 0x02FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bBlendedOITAfterTranslucency : 1;                         // 0x0300(0x0001) (Edit)
	unsigned char                                      bForceResolution : 1;                                     // 0x0300(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0301(0x0003) MISSED OFFSET
	TEnumAsByte<ELowResTranslucencyCascade>            ForcedResolution;                                         // 0x0304(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0305(0x0003) MISSED OFFSET
	float                                              FirstSplitDistance;                                       // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondSplitDistance;                                      // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FullResInFrontMaxDistance;                                // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      FullResInFront : 1;                                       // 0x0314(0x0001) (Edit)
	unsigned char                                      PopPerParticle : 1;                                       // 0x0314(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	FVectorMaterialInput                               WorldPositionOffset;                                      // 0x0318(0x0048)
	FVectorMaterialInput                               WorldDisplacement;                                        // 0x0360(0x0048)
	FScalarMaterialInput                               TessellationMultiplier;                                   // 0x03A8(0x0040)
	FColorMaterialInput                                SubsurfaceColor;                                          // 0x03E8(0x0040)
	FScalarMaterialInput                               ClearCoat;                                                // 0x0428(0x0040)
	FScalarMaterialInput                               ClearCoatRoughness;                                       // 0x0468(0x0040)
	FScalarMaterialInput                               AmbientOcclusion;                                         // 0x04A8(0x0040)
	FScalarMaterialInput                               Refraction;                                               // 0x04E8(0x0040)
	FColorMaterialInput                                BillboardColor;                                           // 0x0528(0x0040)
	FVectorMaterialInput                               BillboardParams;                                          // 0x0568(0x0048)
	FVector2MaterialInput                              CustomizedUVs[0x8];                                       // 0x05B0(0x0048)
	FMaterialAttributesInput                           MaterialAttributes;                                       // 0x07F0(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0828(0x0010) MISSED OFFSET
	FScalarMaterialInput                               PixelDepthOffset;                                         // 0x0838(0x0040)
	unsigned char                                      bTranslucentBeforeTranslucency : 1;                       // 0x0878(0x0001) (Edit)
	unsigned char                                      bTranslucentBeforeVolumeFog : 1;                          // 0x0878(0x0001) (Edit)
	unsigned char                                      bTranslucentWithDepthWrite : 1;                           // 0x0878(0x0001) (Edit)
	unsigned char                                      bEnableSeparateTranslucency : 1;                          // 0x0878(0x0001) (Edit)
	unsigned char                                      bEnableResponsiveAA : 1;                                  // 0x0878(0x0001) (Edit)
	unsigned char                                      bScreenSpaceReflections : 1;                              // 0x0878(0x0001) (Edit)
	unsigned char                                      TwoSided : 1;                                             // 0x0878(0x0001) (Edit)
	unsigned char                                      DitheredLODTransition : 1;                                // 0x0878(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0879(0x0003) MISSED OFFSET
	TEnumAsByte<EConstantMaterial>                     ConstantMaterial;                                         // 0x087C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x087D(0x0003) MISSED OFFSET
	float                                              SkyLightWhenOccluded;                                     // 0x0880(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowsInfluence;                                    // 0x0884(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumCustomizedUVs;                                         // 0x0888(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                 // 0x088C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x088D(0x0003) MISSED OFFSET
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x0890(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LightColorInfluence;                                      // 0x0894(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmbientLightColorInfluence;                               // 0x0898(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LightIntensityInfluence;                                  // 0x089C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmbientLightIntensityInfluence;                           // 0x08A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlternativeAmbientLightColorInfluence;                    // 0x08A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlternativeAmbientLightIntensityInfluence;                // 0x08A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEvaluateLightningAtParticleCenter : 1;                   // 0x08AC(0x0001) (Edit)
	unsigned char                                      UnknownData08[0x3];                                       // 0x08AD(0x0003) MISSED OFFSET
	float                                              TranslucencyScaleForReflection;                           // 0x08B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bObjectFadeEnabled : 1;                                   // 0x08B4(0x0001) (Edit)
	unsigned char                                      UnknownData09[0x3];                                       // 0x08B5(0x0003) MISSED OFFSET
	float                                              ObjectFadeRate;                                           // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ObjectFadeDistanceThreshold;                              // 0x08BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowDensityScale;                            // 0x08C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x08C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x08C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x08CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x08D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       TranslucentMultipleScatteringExtinction;                  // 0x08D4(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x08E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeFogScale;                                           // 0x08E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DistanceFog : 1;                                          // 0x08EC(0x0001) (Edit)
	unsigned char                                      bDisableDepthTest : 1;                                    // 0x08EC(0x0001) (Edit)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                    // 0x08EC(0x0001) (Edit)
	unsigned char                                      bDontRenderWhenPlayerInsideShip : 1;                      // 0x08EC(0x0001) (Edit)
	unsigned char                                      bTangentSpaceNormal : 1;                                  // 0x08EC(0x0001) (Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                   // 0x08EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockGI : 1;                                             // 0x08EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x08EC(0x0001) (DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing : 1;                           // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithLandscape : 1;                                   // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites : 1;                             // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithCPUParticleSprites : 1;                          // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticMesh : 1;                                  // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithCoverage : 1;                                    // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGPUInstanceCulling : 1;                          // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails : 1;                                  // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles : 1;                               // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting : 1;                              // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithFluidSurfaces : 1;                               // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets : 1;                                // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                       // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsesDistortion : 1;                                      // 0x08EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithClothing : 1;                                    // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithDeformables : 1;                                 // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithFFTWaterMask : 1;                                // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithVolumeFogMask : 1;                               // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithDynamicObjectFading : 1;                         // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithWaterBoundary : 1;                               // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithClouds : 1;                                      // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedRopes : 1;                              // 0x08EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithPlanarReflection : 1;                            // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithPointLightShadows : 1;                           // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMaskPass : 1;                                    // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithUI : 1;                                          // 0x08F0(0x0001) (Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                       // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAllowEmissiveOnLandscape : 1;                            // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bApplyWaterMask : 1;                                      // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseReZ : 1;                                              // 0x08F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bFullyRough : 1;                                          // 0x08F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseLightmapDirectionality : 1;                           // 0x08F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x2];                                       // 0x08F2(0x0002) MISSED OFFSET
	TEnumAsByte<EMaterialGeometryMode>                 GeometryMode;                                             // 0x08F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                    // 0x08F5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x08F6(0x0002) MISSED OFFSET
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                         // 0x08F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                          // 0x08F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData12[0x3];                                       // 0x08F9(0x0003) MISSED OFFSET
	float                                              MaxDisplacement;                                          // 0x08FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Wireframe : 1;                                            // 0x0900(0x0001) (Edit)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                            // 0x0900(0x0001) (Edit)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0901(0x0003) MISSED OFFSET
	float                                              NormalOffsetShadowBiasScale;                              // 0x0904(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EditorX;                                                  // 0x0908(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorY;                                                  // 0x090C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorPitch;                                              // 0x0910(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorYaw;                                                // 0x0914(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<UMaterialExpression*>                       Expressions;                                              // 0x0918(0x0010) (ZeroConstructor)
	TArray<FMaterialFunctionInfo>                      MaterialFunctionInfos;                                    // 0x0928(0x0010) (ZeroConstructor)
	TArray<FMaterialParameterCollectionInfo>           MaterialParameterCollectionInfos;                         // 0x0938(0x0010) (ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                            // 0x0948(0x0001)
	unsigned char                                      bIsMasked : 1;                                            // 0x0948(0x0001) (Deprecated)
	unsigned char                                      bIsPreviewMaterial : 1;                                   // 0x0948(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes : 1;                               // 0x0948(0x0001) (Edit)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                            // 0x0948(0x0001) (Edit)
	unsigned char                                      bUseDensityMapOnTranslucencyVertexFog : 1;                // 0x0948(0x0001) (Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                       // 0x0948(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                       // 0x0948(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0949(0x0003) MISSED OFFSET
	uint32_t                                           UsageFlagWarnings;                                        // 0x094C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                        // 0x0950(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0951(0x0003) MISSED OFFSET
	int                                                BlendablePriority;                                        // 0x0954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsAlphaBlended : 1;                                      // 0x0958(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0959(0x0003) MISSED OFFSET
	float                                              RefractionDepthBias;                                      // 0x095C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FGuid                                              StateId;                                                  // 0x0960(0x0010) (ZeroConstructor, IsPlainOldData)
	int                                                UnwrappedUVSet;                                           // 0x0970(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x8C];                                      // 0x0974(0x008C) MISSED OFFSET
	TArray<UTexture*>                                  ExpressionTextureReferences;                              // 0x0A00(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0A10(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Material"));
		return ptr;
	}

};


// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                               // 0x0028(0x0001) (Edit)
	unsigned char                                      bExclusive : 1;                                           // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	APlayerCameraManager*                              CameraOwner;                                              // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Alpha;                                                    // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraModifier"));
		return ptr;
	}


	bool IsDisabled();
	AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const FVector& ViewLocation, const FRotator& ViewRotation, float FOV, FVector* NewViewLocation, FRotator* NewViewRotation, float* NewFOV);
};


// Class Engine.PhysicsVolume
// 0x0010 (0x0418 - 0x0408)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                         // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Priority;                                                 // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FluidFriction;                                            // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                         // 0x0414(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPhysicsOnContact : 1;                                    // 0x0414(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0415(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsVolume"));
		return ptr;
	}

};


// Class Engine.ParticleSystemComponent
// 0x02E0 (0x0870 - 0x0590)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	TArray<UMaterialInterface*>                        EmitterMaterials;                                         // 0x0590(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<USkeletalMeshComponent*>                    SkelMeshComponents;                                       // 0x05A0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData00 : 6;                                        // 0x05B0(0x0001)
	unsigned char                                      bResetOnDetach : 1;                                       // 0x05B0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                             // 0x05B0(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05B1(0x0007) MISSED OFFSET
	TArray<FParticleSysParam>                          InstanceParameters;                                       // 0x05B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	FParticleSysParam                                  EmitterPointParameter;                                    // 0x05C8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FScriptMulticastDelegate                           OnParticleSpawn;                                          // 0x0618(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleBurst;                                          // 0x0628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleDeath;                                          // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleCollide;                                        // 0x0648(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FVector                                            OldPosition;                                              // 0x0658(0x000C) (ZeroConstructor, IsPlainOldData)
	FVector                                            PartSysVelocity;                                          // 0x0664(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0670(0x0018) MISSED OFFSET
	FVector                                            CustomInheritedVelocity;                                  // 0x0688(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0694(0x000C) MISSED OFFSET
	float                                              CustomParameterDrivingCurves;                             // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       ColourTint;                                               // 0x06A4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WarmUpTime;                                               // 0x06B4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x06B8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWarmingUp : 1;                                           // 0x06BC(0x0001)
	unsigned char                                      UnknownData04[0x1B];                                      // 0x06BD(0x001B) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x06D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x06DC(0x0008) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x06E4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x06E8(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideLODMethod : 1;                                   // 0x06EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x3];                                       // 0x06ED(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x06F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x06F1(0x0003) MISSED OFFSET
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x06F4(0x0001)
	unsigned char                                      UnknownData09[0x3];                                       // 0x06F5(0x0003) MISSED OFFSET
	TArray<FMaterialRelevance>                         CachedViewRelevanceFlags;                                 // 0x06F8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0708(0x0008) MISSED OFFSET
	TArray<UParticleSystemReplay*>                     ReplayClips;                                              // 0x0710(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData11[0x60];                                      // 0x0720(0x0060) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x0780(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0784(0x0004) MISSED OFFSET
	FScriptMulticastDelegate                           OnSystemFinished;                                         // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bUnbound : 1;                                             // 0x0798(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData13[0xD7];                                      // 0x0799(0x00D7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleSystemComponent"));
		return ptr;
	}


	void SetVectorParameter(const FName& ParameterName, const FVector& Param);
	void SetTrailSourceData(const FName& InFirstSocketName, const FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(UParticleSystem* NewTemplate);
	void SetMaterialParameter(const FName& ParameterName, UMaterialInterface* Param);
	void SetFloatParameter(const FName& ParameterName, float Param);
	void SetEnableDistanceFading(bool bEnable);
	void SetEmitterEnable(const FName& EmitterName, bool bNewEnableState);
	void SetCustomLocalSpaceWorldSpace();
	void SetCustomLocalSpaceComponent(USceneComponent* InComponent);
	void SetColorParameter(const FName& ParameterName, const FLinearColor& Param);
	void SetBeamTargetTangent(int EmitterIndex, const FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const FVector& NewEndPoint);
	void SetActorParameter(const FName& ParameterName, AActor* Param);
	int GetNumActiveParticles();
	UMaterialInterface* GetNamedMaterial(const FName& InName);
	void GenerateParticleEvent(const FName& InEventName, float InEmitterTime, const FVector& InLocation, const FVector& InDirection, const FVector& InVelocity);
	void EndTrails();
	UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const FName& InName, UMaterialInterface* SourceMaterial);
	void BeginTrails(const FName& InFirstSocketName, const FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void AddKillSphere(const FVector4& KillSphere);
	void AddEmitterPoint(const FVector4& Position, const FVector4& InheritedVelocity, const FVector4& Orientation, const FVector& Scale);
};


// Class Engine.SplineComponent
// 0x0080 (0x0610 - 0x0590)
class USplineComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET
	FInterpCurveQuat                                   SplineRotInfo;                                            // 0x05A0(0x0018) (ZeroConstructor)
	FInterpCurveVector                                 SplineScaleInfo;                                          // 0x05B8(0x0018) (ZeroConstructor)
	FInterpCurveFloat                                  SplineReparamTable;                                       // 0x05D0(0x0018) (ZeroConstructor)
	bool                                               bAllowSplineEditingPerInstance;                           // 0x05E8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x05E9(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                                   // 0x05EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x05F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x05F5(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x05F6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x05F7(0x0001) MISSED OFFSET
	FVector                                            DefaultUpVector;                                          // 0x05F8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0604(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SplineComponent"));
		return ptr;
	}


	void SetWorldLocationAtSplinePoint(int PointIndex, const FVector& InLocation);
	void SetUnselectedSplineSegmentColor(const FLinearColor& SegmentColor);
	void SetTangentAtSplinePoint(int PointIndex, const FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineWorldPoints(TArray<FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type);
	void SetSplinePoints(TArray<FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineLocalPoints(TArray<FVector> Points);
	void SetSelectedSplineSegmentColor(const FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetDefaultUpVector(const FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoop(bool bInClosedLoop);
	bool IsClosedLoop();
	FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	FVector GetWorldLocationAtSplinePoint(int PointIndex);
	FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	FVector GetScaleAtSplinePoint(int PointIndex);
	FVector GetScaleAtDistanceAlongSpline(float Distance);
	FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FQuat GetQuaternionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FQuat GetQuaternionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FQuat GetQuaternionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplinePoints();
	FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, FVector* Location, FVector* Tangent);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, FVector* LocalLocation, FVector* LocalTangent);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints();
	void AddSplineWorldPoint(const FVector& Position);
	void AddSplinePoint(const FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void AddSplineLocalPoint(const FVector& Position);
};


// Class Engine.ShapeComponent
// 0x0020 (0x05B0 - 0x0590)
class UShapeComponent : public UPrimitiveComponent
{
public:
	UBodySetup*                                        ShapeBodySetup;                                           // 0x0590(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                  // 0x0598(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                            // 0x0598(0x0001)
	unsigned char                                      bDynamicObstacle : 1;                                     // 0x0598(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	UClass*                                            AreaClass;                                                // 0x05A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ShapeComponent"));
		return ptr;
	}

};


// Class Engine.CapsuleComponent
// 0x0000 (0x05B0 - 0x05B0)
class UCapsuleComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CapsuleComponent"));
		return ptr;
	}


	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight();
};


// Class Engine.TextureProxy
// 0x0008 (0x0140 - 0x0138)
class UTextureProxy : public UTexture
{
public:
	UTexture*                                          Texture;                                                  // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureProxy"));
		return ptr;
	}

};


// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UCommandlet : public UObject
{
public:
	FString                                            HelpDescription;                                          // 0x0028(0x0010) (ZeroConstructor)
	FString                                            HelpUsage;                                                // 0x0038(0x0010) (ZeroConstructor)
	FString                                            HelpWebLink;                                              // 0x0048(0x0010) (ZeroConstructor)
	TArray<FString>                                    HelpParamNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	TArray<FString>                                    HelpParamDescriptions;                                    // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsClient : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsEditor : 1;                                             // 0x0078(0x0001)
	unsigned char                                      LogToConsole : 1;                                         // 0x0078(0x0001)
	unsigned char                                      ShowErrorCount : 1;                                       // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Commandlet"));
		return ptr;
	}

};


// Class Engine.InstancedStaticMeshComponent
// 0x00B0 (0x06A0 - 0x05F0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                        // 0x05F0(0x0010) (Edit, ZeroConstructor, Transient, DuplicateTransient)
	int                                                InstancingRandomSeed;                                     // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstanceStartCullDistance;                                // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x0608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x060C(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                                     // 0x0610(0x0010) (ZeroConstructor)
	TArray<int>                                        RemovedInstances;                                         // 0x0620(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0630(0x0048) MISSED OFFSET
	UPhysicsSerializer*                                PhysicsSerializer;                                        // 0x0678(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                NumPendingLightmaps;                                      // 0x0680(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0684(0x0004) MISSED OFFSET
	TArray<FInstancedStaticMeshMappingInfo>            CachedMappings;                                           // 0x0688(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0698(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedStaticMeshComponent"));
		return ptr;
	}


	bool UpdateInstanceTransform(int InstanceIndex, const FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, bool bWorldSpace, FTransform* OutInstanceTransform);
	TArray<int> GetInstancesOverlappingSphere(const FVector& Center, float Radius, bool bSphereInWorldSpace);
	int GetInstanceCount();
	void EnableGPUVisibility(bool bEnable);
	void ClearInstances();
	int AddInstanceWorldSpace(const FTransform& WorldTransform);
	void AddInstances(TArray<FTransform> InstanceTransforms);
	int AddInstance(const FTransform& InstanceTransform);
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00D0 (0x0770 - 0x06A0)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x06A0(0x0040) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                          // 0x06E0(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x06F0(0x0004) (ZeroConstructor, IsPlainOldData)
	FBox                                               BuiltInstanceBounds;                                      // 0x06F4(0x001C) (ZeroConstructor, IsPlainOldData)
	FBox                                               UnbuiltInstanceBounds;                                    // 0x0710(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x072C(0x0004) MISSED OFFSET
	TArray<FBox>                                       UnbuiltInstanceBoundsList;                                // 0x0730(0x0010) (ZeroConstructor)
	int                                                OcclusionLayerNumNodes;                                   // 0x0740(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0744(0x0002) MISSED OFFSET
	bool                                               bDisableCollision;                                        // 0x0746(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x29];                                      // 0x0747(0x0029) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.HierarchicalInstancedStaticMeshComponent"));
		return ptr;
	}


	bool RemoveInstances(TArray<int> InstancesToRemove);
};


// Class Engine.MaterialInstance
// 0x0160 (0x01B8 - 0x0058)
class UMaterialInstance : public UMaterialInterface
{
public:
	UPhysicalMaterial*                                 PhysMaterial;                                             // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UMaterialInterface*                                Parent;                                                   // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                        // 0x0068(0x0001)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                           // 0x0068(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	FGuid                                              ParentLightingGuid;                                       // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData)
	TArray<FFontParameterValue>                        FontParameterValues;                                      // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                    // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<FTextureParameterValue>                     TextureParameterValues;                                   // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<FVectorParameterValue>                      VectorParameterValues;                                    // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides;                                    // 0x00C0(0x0084) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x74];                                      // 0x0144(0x0074) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialInstance"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0000 (0x01B8 - 0x01B8)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialInstanceConstant"));
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0048 (0x0070 - 0x0028)
class UMaterialExpression : public UObject
{
public:
	UMaterial*                                         Material;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	UMaterialFunction*                                 Function;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	FString                                            Desc;                                                     // 0x0038(0x0010) (Edit, ZeroConstructor)
	FColor                                             BorderColor;                                              // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRealtimePreview : 1;                                     // 0x004C(0x0001)
	unsigned char                                      bNeedToUpdatePreview : 1;                                 // 0x004C(0x0001) (Transient)
	unsigned char                                      bIsParameterExpression : 1;                               // 0x004C(0x0001)
	unsigned char                                      bCommentBubbleVisible : 1;                                // 0x004C(0x0001)
	unsigned char                                      bShowOutputNameOnPin : 1;                                 // 0x004C(0x0001)
	unsigned char                                      bHidePreviewWindow : 1;                                   // 0x004C(0x0001)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001)
	unsigned char                                      bShaderInputData : 1;                                     // 0x004C(0x0001)
	unsigned char                                      bShowInputs : 1;                                          // 0x004D(0x0001)
	unsigned char                                      bShowOutputs : 1;                                         // 0x004D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	TArray<FText>                                      MenuCategories;                                           // 0x0050(0x0010) (ZeroConstructor)
	TArray<FExpressionOutput>                          Outputs;                                                  // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpression"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCustomOutput"));
		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0000 (0x0028 - 0x0028)
class UBlueprintAsyncActionBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlueprintAsyncActionBase"));
		return ptr;
	}


	void Activate();
};


// Class Engine.BlueprintGeneratedClass
// 0x0068 (0x0228 - 0x01C0)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x01C0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	TArray<UDynamicBlueprintBinding*>                  DynamicBindingObjects;                                    // 0x01C8(0x0010) (ZeroConstructor)
	TArray<UActorComponent*>                           ComponentTemplates;                                       // 0x01D8(0x0010) (ExportObject, ZeroConstructor)
	TArray<UTimelineTemplate*>                         Timelines;                                                // 0x01E8(0x0010) (ZeroConstructor)
	USimpleConstructionScript*                         SimpleConstructionScript;                                 // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)
	UInheritableComponentHandler*                      InheritableComponentHandler;                              // 0x0200(0x0008) (ZeroConstructor, IsPlainOldData)
	UStructProperty*                                   UberGraphFramePointerProperty;                            // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData)
	UFunction*                                         UberGraphFunction;                                        // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FEventGraphFastCallPair>                    FastCallPairs;                                            // 0x0218(0x0010) (ZeroConstructor, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlueprintGeneratedClass"));
		return ptr;
	}

};


// Class Engine.AISystemBase
// 0x0018 (0x0040 - 0x0028)
class UAISystemBase : public UObject
{
public:
	FStringClassReference                              AISystemClassName;                                        // 0x0028(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	FName                                              AISystemModuleName;                                       // 0x0038(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AISystemBase"));
		return ptr;
	}

};


// Class Engine.UserDefinedStruct
// 0x0010 (0x00A8 - 0x0098)
class UUserDefinedStruct : public UScriptStruct
{
public:
	FGuid                                              Guid;                                                     // 0x0098(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.UserDefinedStruct"));
		return ptr;
	}

};


// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	APlayerController*                                 PlayerController;                                         // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNetSpeed;                                          // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Player"));
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x34540 (0x34588 - 0x0048)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	TArray<UChildConnection*>                          Children;                                                 // 0x0050(0x0010) (ZeroConstructor, Transient)
	UNetDriver*                                        Driver;                                                   // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	UPackageMap*                                       PackageMap;                                               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UChannel*>                                  OpenChannels;                                             // 0x0070(0x0010) (ZeroConstructor)
	TArray<AActor*>                                    SentTemporaries;                                          // 0x0080(0x0010) (ZeroConstructor)
	AActor*                                            ViewTarget;                                               // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	AActor*                                            OwningActor;                                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                          // 0x00A4(0x0001)
	unsigned char                                      UnknownData01[0x2FB];                                     // 0x00A5(0x02FB) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x340C0];                                   // 0x03A8(0x340C0) MISSED OFFSET
	int                                                MaxDormantActorsCheckedFromRelevancy;                     // 0x34468(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x54];                                      // 0x3446C(0x0054) MISSED OFFSET
	TArray<UChannel*>                                  DeferredCloseChannels;                                    // 0x344C0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0xB8];                                      // 0x344D0(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetConnection"));
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0450 (0x0478 - 0x0028)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	FString                                            NetConnectionClassName;                                   // 0x0038(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                          // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                           // 0x004C(0x0001) (Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                                     // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	UNetConnection*                                    ServerConnection;                                         // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UNetConnection*>                            ClientConnections;                                        // 0x0080(0x0010) (ZeroConstructor)
	UWorld*                                            World;                                                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0098(0x0030) MISSED OFFSET
	UClass*                                            NetConnectionClass;                                       // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	UProperty*                                         RoleProperty;                                             // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
	UProperty*                                         RemoteRoleProperty;                                       // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	FName                                              NetDriverName;                                            // 0x00E0(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x390];                                     // 0x00E8(0x0390) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetDriver"));
		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.OnlineSession"));
		return ptr;
	}

};


// Class Engine.Model
// 0x0550 (0x0578 - 0x0028)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x550];                                     // 0x0028(0x0550) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Model"));
		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0068 (0x0090 - 0x0028)
class UEdGraphNode : public UObject
{
public:
	TArray<UEdGraphPin*>                               Pins;                                                     // 0x0028(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodePosY;                                                 // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeHeight;                                               // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasCompilerMessage : 1;                                  // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	FString                                            NodeComment;                                              // 0x0050(0x0010) (ZeroConstructor)
	bool                                               bCommentBubblePinned;                                     // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCommentBubbleVisible;                                    // 0x0061(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	int                                                ErrorType;                                                // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData)
	FString                                            ErrorMsg;                                                 // 0x0068(0x0010) (ZeroConstructor)
	FGuid                                              NodeGuid;                                                 // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                       // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsNodeEnabled;                                           // 0x0089(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugFunction;                                         // 0x008A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x008B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EdGraphNode"));
		return ptr;
	}

};


// Class Engine.EdGraphPin
// 0x0100 (0x0128 - 0x0028)
class UEdGraphPin : public UObject
{
public:
	FString                                            PinName;                                                  // 0x0028(0x0010) (ZeroConstructor)
	FString                                            PinToolTip;                                               // 0x0038(0x0010) (ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	FEdGraphPinType                                    PinType;                                                  // 0x0050(0x0050)
	FString                                            DefaultValue;                                             // 0x00A0(0x0010) (ZeroConstructor)
	FString                                            AutogeneratedDefaultValue;                                // 0x00B0(0x0010) (ZeroConstructor)
	UObject*                                           DefaultObject;                                            // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	FText                                              DefaultTextValue;                                         // 0x00C8(0x0038)
	TArray<UEdGraphPin*>                               LinkedTo;                                                 // 0x0100(0x0010) (ZeroConstructor)
	TArray<UEdGraphPin*>                               SubPins;                                                  // 0x0110(0x0010) (ZeroConstructor)
	UEdGraphPin*                                       ParentPin;                                                // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EdGraphPin"));
		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EngineBaseTypes"));
		return ptr;
	}

};


// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                       // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass : 1;                                 // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRadialDamageVelChange : 1;                               // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              DestructibleImpulse;                                      // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DamageType"));
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EngineTypes"));
		return ptr;
	}

};


// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UBlueprintCore : public UObject
{
public:
	UClass*                                            SkeletonGeneratedClass;                                   // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UClass*                                            GeneratedClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyNeedToPurgeSkelRefs;                               // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyGeneratedClassIsAuthoritative;                     // 0x0039(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	FGuid                                              BlueprintGuid;                                            // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlueprintCore"));
		return ptr;
	}

};


// Class Engine.Blueprint
// 0x0088 (0x00D8 - 0x0050)
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bRecompileOnLoad : 1;                                     // 0x0050(0x0001) (Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	UClass*                                            ParentClass;                                              // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	UObject*                                           PRIVATE_InnermostPreviousCDO;                             // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bHasBeenRegenerated : 1;                                  // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	USimpleConstructionScript*                         SimpleConstructionScript;                                 // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UActorComponent*>                           ComponentTemplates;                                       // 0x0078(0x0010) (ExportObject, ZeroConstructor)
	TArray<UTimelineTemplate*>                         Timelines;                                                // 0x0088(0x0010) (ZeroConstructor)
	UInheritableComponentHandler*                      InheritableComponentHandler;                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                            // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                BlueprintSystemVersion;                                   // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x00A8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Blueprint"));
		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UInterface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Interface_AssetUserData"));
		return ptr;
	}

};


// Class Engine.TestInterface
// 0x0000 (0x0028 - 0x0028)
class UTestInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TestInterface"));
		return ptr;
	}

};


// Class Engine.DerivedTestInterface
// 0x0000 (0x0028 - 0x0028)
class UDerivedTestInterface : public UTestInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DerivedTestInterface"));
		return ptr;
	}

};


// Class Engine.ComponentWithDerivedTestInterface
// 0x0008 (0x00D0 - 0x00C8)
class UComponentWithDerivedTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ComponentWithDerivedTestInterface"));
		return ptr;
	}

};


// Class Engine.ActorWithComponentWithDerivedTestInterface
// 0x0008 (0x03D8 - 0x03D0)
class AActorWithComponentWithDerivedTestInterface : public AActor
{
public:
	UComponentWithDerivedTestInterface*                ComponentWithDerivedTestInterface;                        // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ActorWithComponentWithDerivedTestInterface"));
		return ptr;
	}

};


// Class Engine.ActorWithTestInterface
// 0x0008 (0x03D8 - 0x03D0)
class AActorWithTestInterface : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ActorWithTestInterface"));
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x03D8 - 0x03D0)
class AAmbientSound : public AActor
{
public:
	UAudioComponent*                                   AudioComponent;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AmbientSound"));
		return ptr;
	}


	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};


// Class Engine.AutomaticInstancingActor
// 0x0058 (0x0428 - 0x03D0)
class AAutomaticInstancingActor : public AActor
{
public:
	USceneComponent*                                   DummyRoot;                                                // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<FName, FAutomaticInstancingMeshComponentArray> CookedInstancedStaticMeshes;                              // 0x03D8(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AutomaticInstancingActor"));
		return ptr;
	}

};


// Class Engine.PendingNetGame
// 0x00D8 (0x0100 - 0x0028)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	UNetDriver*                                        NetDriver;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0038(0x00B0) MISSED OFFSET
	UPackage*                                          PreLoadedMapPackage;                                      // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UWorld*                                            PreLoadedWorld;                                           // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PendingNetGame"));
		return ptr;
	}

};


// Class Engine.World
// 0x0840 (0x0868 - 0x0028)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	ULevel*                                            PersistentLevel;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UNetDriver*                                        NetDriver;                                                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	ULineBatchComponent*                               LineBatcher;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	ULineBatchComponent*                               PersistentLineBatcher;                                    // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	ULineBatchComponent*                               ForegroundLineBatcher;                                    // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	AGameState*                                        GameState;                                                // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	AGameNetworkManager*                               NetworkManager;                                           // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UPhysicsCollisionHandler*                          PhysicsCollisionHandler;                                  // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<UObject*>                                   ExtraReferencedObjects;                                   // 0x0070(0x0010) (ZeroConstructor, Transient)
	TArray<UObject*>                                   PerModuleDataObjects;                                     // 0x0080(0x0010) (ZeroConstructor, Transient)
	TArray<ULevelStreaming*>                           StreamingLevels;                                          // 0x0090(0x0010) (ZeroConstructor, Transient)
	FString                                            StreamingLevelsPrefix;                                    // 0x00A0(0x0010) (ZeroConstructor)
	ULevel*                                            CurrentLevelPendingVisibility;                            // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	AParticleEventManager*                             MyParticleEventManager;                                   // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData)
	APhysicsVolume*                                    DefaultPhysicsVolume;                                     // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<ULevelStreaming*>                           DirtyStreamingLevels;                                     // 0x00C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x00D8(0x001C) MISSED OFFSET
	FName                                              Feature;                                                  // 0x00F4(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TArray<FName>                                      FeatureReferences;                                        // 0x0100(0x0010) (ZeroConstructor)
	bool                                               ParticleLOD_bUseGameThread;                               // 0x0110(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ParticleLOD_bUseMultipleViewportCase;                     // 0x0111(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	FVector                                            ParticleLOD_PlayerViewpointLocation;                      // 0x0114(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	FString                                            TestMetadata;                                             // 0x0120(0x0010) (ZeroConstructor)
	UNavigationSystem*                                 NavigationSystem;                                         // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	AGameMode*                                         AuthorityGameMode;                                        // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UAISystemBase*                                     AISystem;                                                 // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UAvoidanceManager*                                 AvoidanceManager;                                         // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<ULevel*>                                    Levels;                                                   // 0x0150(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x50];                                      // 0x0160(0x0050) MISSED OFFSET
	ULevel*                                            CurrentLevel;                                             // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01B8(0x0008) MISSED OFFSET
	UGameInstance*                                     OwningGameInstance;                                       // 0x01C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<UMaterialParameterCollectionInstance*>      ParameterCollectionInstances;                             // 0x01C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x5C0];                                     // 0x01D8(0x05C0) MISSED OFFSET
	UWorldComposition*                                 WorldComposition;                                         // 0x0798(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3D];                                      // 0x07A0(0x003D) MISSED OFFSET
	unsigned char                                      UnknownData08 : 7;                                        // 0x07DD(0x0001)
	unsigned char                                      bAreConstraintsDirty : 1;                                 // 0x07DD(0x0001) (Transient)
	unsigned char                                      UnknownData09[0x8A];                                      // 0x07DE(0x008A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.World"));
		return ptr;
	}

};


// Class Engine.Level
// 0x02D8 (0x0300 - 0x0028)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0028(0x00A0) MISSED OFFSET
	ULevelActorContainer*                              ActorCluster;                                             // 0x00C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	UWorld*                                            OwningWorld;                                              // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UModel*                                            Model;                                                    // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UModelComponent*>                           ModelComponents;                                          // 0x00E0(0x0010) (ExportObject, ZeroConstructor)
	ALevelScriptActor*                                 LevelScriptActor;                                         // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	ANavigationObjectBase*                             NavListStart;                                             // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	ANavigationObjectBase*                             NavListEnd;                                               // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UNavigationDataChunk*>                      NavDataChunks;                                            // 0x0108(0x0010) (ZeroConstructor)
	float                                              LightmapTotalSize;                                        // 0x0118(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ShadowmapTotalSize;                                       // 0x011C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<FVector>                                    StaticNavigableGeometry;                                  // 0x0120(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x130];                                     // 0x0130(0x0130) MISSED OFFSET
	bool                                               LevelVisibility;                                          // 0x0260(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0261(0x000F) MISSED OFFSET
	unsigned char                                      UnknownData03 : 3;                                        // 0x0270(0x0001)
	unsigned char                                      Blocked : 1;                                              // 0x0270(0x0001)
	unsigned char                                      UnknownData04[0x67];                                      // 0x0271(0x0067) MISSED OFFSET
	TArray<UAssetUserData*>                            AssetUserData;                                            // 0x02D8(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData05[0x18];                                      // 0x02E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Level"));
		return ptr;
	}

	TArray<class AActor*> GetActors()
	{
		return *reinterpret_cast<TArray<AActor*>*>(reinterpret_cast<uintptr_t>(this) + 0xA0);
	}

};


// Class Engine.BrushShape
// 0x0000 (0x0408 - 0x0408)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BrushShape"));
		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0050 (0x0458 - 0x0408)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x040C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	FReverbSettings                                    Settings;                                                 // 0x0410(0x0018) (Edit, BlueprintVisible)
	FInteriorSettings                                  AmbientZoneSettings;                                      // 0x0428(0x0024) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	AAudioVolume*                                      NextLowerPriorityVolume;                                  // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AudioVolume"));
		return ptr;
	}

};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x0408 - 0x0408)
class ACameraBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraBlockingVolume"));
		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0018 (0x0420 - 0x0408)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<FCullDistanceSizePair>                      CullDistances;                                            // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                             // 0x0418(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0419(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CullDistanceVolume"));
		return ptr;
	}

};


// Class Engine.FFTWater
// 0x0010 (0x0418 - 0x0408)
class AFFTWater : public AVolume
{
public:
	UFFTWaterComponent*                                FFTWaterComponent;                                        // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UFFTWaterExtendedPlaneComponent*                   ExtendedPlaneComponent;                                   // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FFTWater"));
		return ptr;
	}


	bool ValidateVertexBuffer();
	bool ValidateParticlesVelocity();
	bool ValidateIndexBuffer();
	void SetWireframe(bool bWireframe);
	void SetWaterColour(const FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetLightFunctionMaterial(UMaterialInterface* Material);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const FLinearColor& FoamHighlightColour);
	void SetFoamColour(const FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCausticsDepth(float Depth);
	void SetBackLitColour(const FLinearColor& BackLitColour);
	void SetAmbientColour(const FLinearColor& AmbientColour);
	bool HasLightFunctionMaterial();
	UFFTWaterComponent* GetComponent();
};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0420 - 0x0408)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<FName>                                      StreamingLevelNames;                                      // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                    // 0x0418(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                            // 0x0418(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x041D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelStreamingVolume"));
		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0408 - 0x0408)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightmassCharacterIndirectDetailVolume"));
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0408 - 0x0408)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightmassImportanceVolume"));
		return ptr;
	}

};


// Class Engine.NavigationTypes
// 0x0000 (0x0028 - 0x0028)
class UNavigationTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationTypes"));
		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0010 (0x0418 - 0x0408)
class ANavMeshBoundsVolume : public AVolume
{
public:
	FNavAgentSelector                                  SupportedAgents;                                          // 0x0408(0x0004) (Edit)
	FName                                              OriginatingLevelName;                                     // 0x040C(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0414(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavMeshBoundsVolume"));
		return ptr;
	}

};


// Class Engine.InstancedNavMeshBoundsVolume
// 0x0000 (0x0418 - 0x0418)
class AInstancedNavMeshBoundsVolume : public ANavMeshBoundsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedNavMeshBoundsVolume"));
		return ptr;
	}

};


// Class Engine.NavArea
// 0x0018 (0x0040 - 0x0028)
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              FixedAreaEnteringCost;                                    // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FColor                                             DrawColor;                                                // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FNavAgentSelector                                  SupportedAgents;                                          // 0x0034(0x0004) (Edit, Config)
	unsigned char                                      bSupportsAgent0 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent1 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent2 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent3 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent4 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent5 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent6 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent7 : 1;                                      // 0x0038(0x0001) (Config)
	unsigned char                                      bSupportsAgent8 : 1;                                      // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent9 : 1;                                      // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent10 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent11 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent12 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent13 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent14 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      bSupportsAgent15 : 1;                                     // 0x0039(0x0001) (Config)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavArea"));
		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
class UNavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavRelevantInterface"));
		return ptr;
	}

};


// Class Engine.NavModifierVolume
// 0x0010 (0x0418 - 0x0408)
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	UClass*                                            AreaClass;                                                // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavModifierVolume"));
		return ptr;
	}


	void SetAreaClass(UClass* NewAreaClass);
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0418 - 0x0418)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DefaultPhysicsVolume"));
		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x0418 - 0x0418)
class AKillZVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KillZVolume"));
		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x0440 - 0x0418)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                         // 0x0418(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UClass*                                            DamageType;                                               // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PainInterval;                                             // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                           // 0x042C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x042C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	AController*                                       DamageInstigator;                                         // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0438(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PainCausingVolume"));
		return ptr;
	}

};


// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
class UBlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlendableInterface"));
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Scene"));
		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
class UInterface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Interface_PostProcessVolume"));
		return ptr;
	}

};


// Class Engine.PostProcessVolume
// 0x0558 (0x0960 - 0x0408)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	FPostProcessSettings                               Settings;                                                 // 0x0410(0x0540) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0958(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x095C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x095C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x095D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PostProcessVolume"));
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x0438 - 0x0408)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<AActor*>                                    OverrideVisibleActors;                                    // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<AActor*>                                    OverrideInvisibleActors;                                  // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<FName>                                      OverrideInvisibleLevels;                                  // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PrecomputedVisibilityOverrideVolume"));
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0408 - 0x0408)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PrecomputedVisibilityVolume"));
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0408 - 0x0408)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TriggerVolume"));
		return ptr;
	}

};


// Class Engine.CalmWaterZone
// 0x0008 (0x03D8 - 0x03D0)
class ACalmWaterZone : public AActor
{
public:
	UCalmWaterComponent*                               CalmWaterComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CalmWaterZone"));
		return ptr;
	}

};


// Class Engine.CameraActor
// 0x0570 (0x0940 - 0x03D0)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                    // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	UCameraComponent*                                  CameraComponent;                                          // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x03E8(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x03EC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x03F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x03F4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	FPostProcessSettings                               PostProcessSettings;                                      // 0x0400(0x0540) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraActor"));
		return ptr;
	}


	int GetAutoActivatePlayerIndex();
};


// Class Engine.ClientOnlyTestActor
// 0x0000 (0x03D0 - 0x03D0)
class AClientOnlyTestActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ClientOnlyTestActor"));
		return ptr;
	}

};


// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UNavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavAgentInterface"));
		return ptr;
	}

};


// Class Engine.CameraShake
// 0x0118 (0x0140 - 0x0028)
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                      // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              OscillationDuration;                                      // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendInTime;                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendOutTime;                                  // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FROscillator                                       RotOscillation;                                           // 0x0038(0x0024) (Edit)
	FVOscillator                                       LocOscillation;                                           // 0x005C(0x0024) (Edit)
	FFOscillator                                       FOVOscillation;                                           // 0x0080(0x000C) (Edit)
	float                                              AnimPlayRate;                                             // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimScale;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                                // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	UCameraAnim*                                       Anim;                                                     // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomAnimSegment : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x17];                                      // 0x00A9(0x0017) MISSED OFFSET
	APlayerCameraManager*                              CameraOwner;                                              // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x00C8(0x0068) MISSED OFFSET
	float                                              ShakeScale;                                               // 0x0130(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              OscillatorTimeRemaining;                                  // 0x0134(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	UCameraAnimInst*                                   AnimInst;                                                 // 0x0138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraShake"));
		return ptr;
	}


	void ReceiveStopShake();
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const FMinimalViewInfo& POV, FMinimalViewInfo* ModifiedPOV);
};


// Class Engine.PlayerCameraManager
// 0x1880 (0x1C50 - 0x03D0)
class APlayerCameraManager : public AActor
{
public:
	APlayerController*                                 PCOwner;                                                  // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	USceneComponent*                                   TransformComponent;                                       // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                                       // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x44];                                      // 0x03FC(0x0044) MISSED OFFSET
	FCameraCacheEntry                                  CameraCache;                                              // 0x0440(0x05B0) (Transient)
	FCameraCacheEntry                                  LastFrameCameraCache;                                     // 0x09F0(0x05B0) (Transient)
	FTViewTarget                                       ViewTarget;                                               // 0x0FA0(0x05C0) (Transient)
	FTViewTarget                                       PendingViewTarget;                                        // 0x1560(0x05C0) (Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x1B20(0x0018) MISSED OFFSET
	TArray<UCameraModifier*>                           ModifierList;                                             // 0x1B38(0x0010) (ZeroConstructor, Transient)
	TArray<UClass*>                                    DefaultModifiers;                                         // 0x1B48(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FreeCamDistance;                                          // 0x1B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            FreeCamOffset;                                            // 0x1B5C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            ViewTargetOffset;                                         // 0x1B68(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                                      // 0x1B74(0x0014) MISSED OFFSET
	TArray<AEmitterCameraLensEffectBase*>              CameraLensEffects;                                        // 0x1B88(0x0010) (ZeroConstructor, Transient)
	UCameraModifier_CameraShake*                       CachedCameraShakeMod;                                     // 0x1B98(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UCameraAnimInst*                                   AnimInstPool[0x8];                                        // 0x1BA0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FPostProcessSettings>                       PostProcessBlendCache;                                    // 0x1BE0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x10];                                      // 0x1BF0(0x0010) MISSED OFFSET
	TArray<UCameraAnimInst*>                           ActiveAnims;                                              // 0x1C00(0x0010) (ZeroConstructor, Transient)
	TArray<UCameraAnimInst*>                           FreeAnims;                                                // 0x1C10(0x0010) (ZeroConstructor, Transient)
	ACameraActor*                                      AnimCameraActor;                                          // 0x1C20(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                                      // 0x1C28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07 : 5;                                        // 0x1C28(0x0001)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                          // 0x1C28(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08 : 1;                                        // 0x1C28(0x0001)
	unsigned char                                      UnknownData09 : 5;                                        // 0x1C29(0x0001)
	unsigned char                                      bFollowHmdOrientation : 1;                                // 0x1C29(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10[0x2];                                       // 0x1C2A(0x0002) MISSED OFFSET
	float                                              ViewPitchMin;                                             // 0x1C2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x1C30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x1C34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x1C38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMin;                                              // 0x1C3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMax;                                              // 0x1C40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0xC];                                       // 0x1C44(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerCameraManager"));
		return ptr;
	}


	void StopCameraShake(UCameraShake* ShakeInstance);
	void StopCameraFade();
	void StopCameraAnimInst(UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(UClass* Shake);
	void StopAllInstancesOfCameraAnim(UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes();
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const FLinearColor& Color, bool bInFadeAudio);
	bool RemoveCameraModifier(UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter);
	UCameraShake* PlayCameraShake(UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot);
	UCameraAnimInst* PlayCameraAnim(UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot, UCurveFloat* BlendInCurve);
	bool IsScreenFullyOccluded();
	bool IsFadeInProgress();
	APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	FRotator GetCameraRotation();
	FVector GetCameraLocation();
	UCameraModifier* FindCameraModifierByClass(UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(AActor* CameraTarget, FVector* NewCameraLocation, FRotator* NewCameraRotation, float* NewCameraFOV);
	void BlendOutAllInstancesOfCameraShake(UClass* Shake);
	UCameraModifier* AddNewCameraModifier(UClass* ModifierClass);
	AEmitterCameraLensEffectBase* AddCameraLensEffect(UClass* LensEffectEmitterClass);
};


// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveBase"));
		return ptr;
	}


	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};


// Class Engine.CurveFloat
// 0x0080 (0x00B0 - 0x0030)
class UCurveFloat : public UCurveBase
{
public:
	FRichCurve                                         FloatCurve;                                               // 0x0030(0x0078)
	bool                                               bIsEventCurve;                                            // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveFloat"));
		return ptr;
	}


	float GetFloatValue(float InTime);
};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0040 - 0x0028)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<FForceFeedbackChannelDetails>               ChannelDetails;                                           // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ForceFeedbackEffect"));
		return ptr;
	}

};


// Class Engine.LogVisualizerCameraController
// 0x0018 (0x0790 - 0x0778)
class ALogVisualizerCameraController : public ADebugCameraController
{
public:
	AActor*                                            PickedActor;                                              // 0x0778(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0780(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LogVisualizerCameraController"));
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0008 (0x03D8 - 0x03D0)
class ADecalActor : public AActor
{
public:
	UDecalComponent*                                   Decal;                                                    // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DecalActor"));
		return ptr;
	}


	void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);
	UMaterialInterface* GetDecalMaterial();
	UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.DestructibleActor
// 0x0020 (0x03F0 - 0x03D0)
class ADestructibleActor : public AActor
{
public:
	UDestructibleComponent*                            DestructibleComponent;                                    // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAffectNavigation : 1;                                    // 0x03D8(0x0001) (Edit, BlueprintVisible, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	FScriptMulticastDelegate                           OnActorFracture;                                          // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DestructibleActor"));
		return ptr;
	}

};


// Class Engine.DocumentationActor
// 0x0008 (0x03D8 - 0x03D0)
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DocumentationActor"));
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0050 (0x0420 - 0x03D0)
class AEmitter : public AActor
{
public:
	UParticleSystemComponent*                          ParticleSystemComponent;                                  // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                               // 0x03D8(0x0001)
	unsigned char                                      bPostUpdateTickGroup : 1;                                 // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCurrentlyActive : 1;                                     // 0x03D8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	FScriptMulticastDelegate                           OnParticleSpawn;                                          // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleBurst;                                          // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleDeath;                                          // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnParticleCollide;                                        // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Emitter"));
		return ptr;
	}


	void ToggleActive();
	void SetVectorParameter(const FName& ParameterName, const FVector& Param);
	void SetTemplate(UParticleSystem* NewTemplate);
	void SetMaterialParameter(const FName& ParameterName, UMaterialInterface* Param);
	void SetFloatParameter(const FName& ParameterName, float Param);
	void SetColorParameter(const FName& ParameterName, const FLinearColor& Param);
	void SetActorParameter(const FName& ParameterName, AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	FName GetEmitterName();
	void Deactivate();
	void Activate();
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0038 (0x0458 - 0x0420)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	UParticleSystem*                                   PS_CameraEffect;                                          // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData)
	UParticleSystem*                                   PS_CameraEffectNonExtremeContent;                         // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x0430(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DistFromCamera;                                           // 0x0434(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                              // 0x0438(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	TArray<UClass*>                                    EmittersToTreatAsSame;                                    // 0x0440(0x0010) (ZeroConstructor)
	APlayerCameraManager*                              BaseCamera;                                               // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EmitterCameraLensEffectBase"));
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x04C8 - 0x04C8)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DebugCameraHUD"));
		return ptr;
	}

};


// Class Engine.LogVisualizerHUD
// 0x0028 (0x04F0 - 0x04C8)
class ALogVisualizerHUD : public ADebugCameraHUD
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x04C8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LogVisualizerHUD"));
		return ptr;
	}

};


// Class Engine.AtmosphericFog
// 0x0008 (0x03D8 - 0x03D0)
class AAtmosphericFog : public AInfo
{
public:
	UAtmosphericFogComponent*                          AtmosphericFogComponent;                                  // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AtmosphericFog"));
		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x03E0 - 0x03D0)
class AExponentialHeightFog : public AInfo
{
public:
	UExponentialHeightFogComponent*                    Component;                                                // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03D8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ExponentialHeightFog"));
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.NavigationObjectBase
// 0x0028 (0x03F8 - 0x03D0)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	UCapsuleComponent*                                 CapsuleComponent;                                         // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UBillboardComponent*                               GoodSprite;                                               // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UBillboardComponent*                               BadSprite;                                                // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                                    // 0x03F0(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationObjectBase"));
		return ptr;
	}

};


// Class Engine.PlayerStart
// 0x0008 (0x0400 - 0x03F8)
class APlayerStart : public ANavigationObjectBase
{
public:
	FName                                              PlayerStartTag;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerStart"));
		return ptr;
	}

};


// Class Engine.GameNetworkManager
// 0x0070 (0x0440 - 0x03D0)
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                         // 0x03D0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x03D8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x03DC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x03E0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                            // 0x03E4(0x0001) (Config)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                            // 0x03E4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E5(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                                       // 0x03E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x03EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x03F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x03F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x03F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x03FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0400(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x0404(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x0408(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x0410(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x0414(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x0418(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               ClientAuthorativePosition;                                // 0x041C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                               // 0x0420(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyDetection;                        // 0x0424(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyResolution;                       // 0x0425(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0426(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x0428(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x042C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x0430(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x0434(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x0438(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bUseDistanceBasedRelevancy;                               // 0x0439(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x043A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameNetworkManager"));
		return ptr;
	}

};


// Class Engine.GameSession
// 0x0030 (0x0400 - 0x03D0)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                            // 0x03D0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x03D4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x03D8(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bRequiresPushToTalk;                                      // 0x03D9(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03DA(0x0002) MISSED OFFSET
	FName                                              SessionName;                                              // 0x03DC(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x03E4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameSession"));
		return ptr;
	}

};


// Class Engine.SkyLight
// 0x0010 (0x03E0 - 0x03D0)
class ASkyLight : public AInfo
{
public:
	USkyLightComponent*                                LightComponent;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03D8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkyLight"));
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.WindDirectionalSource
// 0x0008 (0x03D8 - 0x03D0)
class AWindDirectionalSource : public AInfo
{
public:
	UWindDirectionalSourceComponent*                   Component;                                                // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WindDirectionalSource"));
		return ptr;
	}


	UWindDirectionalSourceComponent* GetComponent();
};


// Class Engine.LevelBounds
// 0x0008 (0x03D8 - 0x03D0)
class ALevelBounds : public AActor
{
public:
	bool                                               bAutoUpdateBounds;                                        // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelBounds"));
		return ptr;
	}

};


// Class Engine.LightComponentBase
// 0x0030 (0x02E0 - 0x02B0)
class ULightComponentBase : public USceneComponent
{
public:
	FGuid                                              LightGuid;                                                // 0x02B0(0x0010) (ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x02C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Intensity;                                                // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FColor                                             LightColor;                                               // 0x02C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                        // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastShadows : 1;                                          // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastStaticShadows : 1;                                    // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows : 1;                                   // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting : 1;                           // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPrecomputedLightingIsValid : 1;                          // 0x02CC(0x0001)
	unsigned char                                      RainOcclusion : 1;                                        // 0x02CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02CD(0x0003) MISSED OFFSET
	float                                              IndirectLightingIntensity;                                // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ScaleForTranslucency;                                     // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CapForTranslucency;                                       // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightComponentBase"));
		return ptr;
	}


	void SetCastShadows(bool bNewValue);
	FLinearColor GetLightColor();
};


// Class Engine.LightComponent
// 0x0160 (0x0440 - 0x02E0)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              Temperature;                                              // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                                      // 0x02E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                         // 0x02E8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	float                                              SourceRadius;                                             // 0x02F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              MinRoughness;                                             // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBias;                                               // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowResMaxDynamicDegradation;                           // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      InverseSquaredFalloff : 1;                                // 0x0304(0x0001) (Deprecated)
	unsigned char                                      CastTranslucentShadows : 1;                               // 0x0304(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                 // 0x0304(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x0304(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0305(0x0003) MISSED OFFSET
	UMaterialInterface*                                LightFunctionMaterial;                                    // 0x0308(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            LightFunctionScale;                                       // 0x0310(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	UTextureLightProfile*                              IESTexture;                                               // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                                    // 0x0328(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                                       // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                               // 0x0338(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0339(0x0003) MISSED OFFSET
	float                                              BloomScale;                                               // 0x033C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FColor                                             BloomTint;                                                // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracedDistanceFieldShadows;                        // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                                 // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0xF0];                                      // 0x0350(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightComponent"));
		return ptr;
	}


	void SetTemperature(float NewTemperature);
	void SetLightFunctionScale(const FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(UTextureLightProfile* NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
	int GetNumberOfShadowCastersInFirstCascade();
};


// Class Engine.Light
// 0x0010 (0x03E0 - 0x03D0)
class ALight : public AActor
{
public:
	ULightComponent*                                   LightComponent;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03D8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Light"));
		return ptr;
	}


	void ToggleEnabled();
	void SetLightFunctionScale(const FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	FLinearColor GetLightColor();
	float GetBrightness();
};


// Class Engine.AmbientLightSource
// 0x0008 (0x03E8 - 0x03E0)
class AAmbientLightSource : public ALight
{
public:
	UAmbientLightSourceComponent*                      AmbientLightSourceComponent;                              // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AmbientLightSource"));
		return ptr;
	}

};


// Class Engine.DirectionalLight
// 0x0000 (0x03E0 - 0x03E0)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DirectionalLight"));
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0008 (0x03E8 - 0x03E0)
class APointLight : public ALight
{
public:
	UPointLightComponent*                              PointLightComponent;                                      // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PointLight"));
		return ptr;
	}


	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.SpotLight
// 0x0008 (0x03E8 - 0x03E0)
class ASpotLight : public ALight
{
public:
	USpotLightComponent*                               SpotLightComponent;                                       // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SpotLight"));
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x03E8 - 0x03E8)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GeneratedMeshAreaLight"));
		return ptr;
	}

};


// Class Engine.LODActor
// 0x0038 (0x0408 - 0x03D0)
class ALODActor : public AActor
{
public:
	UStaticMeshComponent*                              StaticMeshComponent;                                      // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<AActor*>                                    SubActors;                                                // 0x03D8(0x0010) (Edit, ZeroConstructor, EditConst)
	float                                              LODDrawDistance;                                          // 0x03E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LodLevel;                                                 // 0x03EC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<UObject*>                                   SubObjects;                                               // 0x03F0(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0400(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LODActor"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x03E0 - 0x03D0)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<AActor*>                                    TargetActors;                                             // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialInstanceActor"));
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x0078 (0x0448 - 0x03D0)
class AMatineeActor : public AActor
{
public:
	UInterpData*                                       MatineeData;                                              // 0x03D0(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	FName                                              MatineeControllerName;                                    // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x03E0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                                     // 0x03E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceStartPos : 1;                                       // 0x03E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E5(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                                       // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x03EC(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bRewindOnPlay : 1;                                        // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoResetOnRewind : 1;                                     // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                              // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableRadioFilter : 1;                                  // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSideOnly : 1;                                      // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                              // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSkippable : 1;                                         // 0x03EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                                  // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                                // 0x03F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableLookAtInput : 1;                                  // 0x03F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePlayer : 1;                                          // 0x03F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideHud : 1;                                             // 0x03F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET
	TArray<FInterpGroupActorInfo>                      GroupActorInfos;                                          // 0x03F8(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                      // 0x0408(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	TArray<UInterpGroupInst*>                          GroupInst;                                                // 0x0410(0x0010) (ZeroConstructor, Transient)
	TArray<FCameraCutInfo>                             CameraCuts;                                               // 0x0420(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                           // 0x0430(0x0001) (Net, Transient)
	unsigned char                                      bReversePlayback : 1;                                     // 0x0430(0x0001) (Net)
	unsigned char                                      bPaused : 1;                                              // 0x0430(0x0001) (Net, Transient)
	unsigned char                                      bPendingStop : 1;                                         // 0x0430(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                           // 0x0434(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0438(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x043C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x043D(0x0007) MISSED OFFSET
	unsigned char                                      bServerInitialLevelStreamingComplete : 1;                 // 0x0444(0x0001) (Net, Transient)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0445(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MatineeActor"));
		return ptr;
	}


	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void PlayInstantly();
	void Play(UObject* WorldContextObject, const FLatentActionInfo& LatentInfo);
	void Pause();
	void ChangePlaybackDirection();
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x0450 - 0x0448)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	UCameraAnim*                                       CameraAnim;                                               // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MatineeActorCameraAnim"));
		return ptr;
	}

};


// Class Engine.MergedCollisionActor
// 0x0008 (0x03D8 - 0x03D0)
class AMergedCollisionActor : public AActor
{
public:
	UMergedCollisionComponent*                         MergedCollisionComponent;                                 // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MergedCollisionActor"));
		return ptr;
	}

};


// Class Engine.NavigationQueryFilter
// 0x0018 (0x0040 - 0x0028)
class UNavigationQueryFilter : public UObject
{
public:
	TArray<FNavigationFilterArea>                      Areas;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	FNavigationFilterFlags                             IncludeFlags;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FNavigationFilterFlags                             ExcludeFlags;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationQueryFilter"));
		return ptr;
	}

};


// Class Engine.NavigationData
// 0x01C0 (0x0590 - 0x03D0)
class ANavigationData : public AActor
{
public:
	UPrimitiveComponent*                               RenderingComp;                                            // 0x03D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	FNavDataConfig                                     NavDataConfig;                                            // 0x03D8(0x0058)
	unsigned char                                      bEnableDrawing : 1;                                       // 0x0430(0x0001) (Edit, Transient)
	unsigned char                                      bRebuildAtRuntime : 1;                                    // 0x0430(0x0001) (Config, Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	TEnumAsByte<ERuntimeGenerationType>                RuntimeGeneration;                                        // 0x0434(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0435(0x0003) MISSED OFFSET
	unsigned char                                      bForceRebuildOnLoad : 1;                                  // 0x0438(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	float                                              ObservedPathsTickInterval;                                // 0x043C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE8];                                      // 0x0440(0x00E8) MISSED OFFSET
	TArray<FSupportedAreaData>                         SupportedAreas;                                           // 0x0528(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x58];                                      // 0x0538(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationData"));
		return ptr;
	}

};


// Class Engine.AbstractNavData
// 0x0000 (0x0590 - 0x0590)
class AAbstractNavData : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AbstractNavData"));
		return ptr;
	}

};


// Class Engine.NavigationGraph
// 0x0000 (0x0590 - 0x0590)
class ANavigationGraph : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationGraph"));
		return ptr;
	}

};


// Class Engine.RecastNavMesh
// 0x00B0 (0x0640 - 0x0590)
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bDrawTriangleEdges : 1;                                   // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawPolyEdges : 1;                                       // 0x0590(0x0001) (Edit, Config)
	unsigned char                                      bDrawFilledPolys : 1;                                     // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawNavMeshEdges : 1;                                    // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawTileBounds : 1;                                      // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                           // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawTileLabels : 1;                                      // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawPolygonLabels : 1;                                   // 0x0590(0x0001) (Edit)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                              // 0x0591(0x0001) (Edit)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                               // 0x0591(0x0001) (Edit)
	unsigned char                                      bDrawNavLinks : 1;                                        // 0x0591(0x0001) (Edit)
	unsigned char                                      bDrawFailedNavLinks : 1;                                  // 0x0591(0x0001) (Edit)
	unsigned char                                      bDrawClusters : 1;                                        // 0x0591(0x0001) (Edit)
	unsigned char                                      bDrawOctree : 1;                                          // 0x0591(0x0001) (Edit)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;                       // 0x0591(0x0001) (Config)
	unsigned char                                      bDrawNavMesh : 1;                                         // 0x0591(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0592(0x0002) MISSED OFFSET
	float                                              DrawOffset;                                               // 0x0594(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BuiltTileSizeUU;                                          // 0x0598(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              BuiltCellSize;                                            // 0x059C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      bFixedTilePoolSize : 1;                                   // 0x05A0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x05A1(0x0003) MISSED OFFSET
	int                                                TilePoolSize;                                             // 0x05A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TileSizeUU;                                               // 0x05A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CellSize;                                                 // 0x05AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CellHeight;                                               // 0x05B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentRadius;                                              // 0x05B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentHeight;                                              // 0x05B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxHeight;                                           // 0x05BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxSlope;                                            // 0x05C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxStepHeight;                                       // 0x05C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinRegionArea;                                            // 0x05C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MergeRegionSize;                                          // 0x05CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxSimplificationError;                                   // 0x05D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSimultaneousTileGenerationJobsCount;                   // 0x05D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                TileNumberHardLimit;                                      // 0x05D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PolyRefTileBits;                                          // 0x05DC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PolyRefNavPolyBits;                                       // 0x05E0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PolyRefSaltBits;                                          // 0x05E4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DefaultDrawDistance;                                      // 0x05E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultMaxSearchNodes;                                    // 0x05EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultMaxHierarchicalSearchNodes;                        // 0x05F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   RegionPartitioning;                                       // 0x05F4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   LayerPartitioning;                                        // 0x05F5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x05F6(0x0002) MISSED OFFSET
	int                                                RegionChunkSplits;                                        // 0x05F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LayerChunkSplits;                                         // 0x05FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSortNavigationAreasByCost : 1;                           // 0x0600(0x0001) (Edit, Config)
	unsigned char                                      bPerformVoxelFiltering : 1;                               // 0x0600(0x0001) (Edit, Config)
	unsigned char                                      bMarkLowHeightAreas : 1;                                  // 0x0600(0x0001) (Edit, Config)
	unsigned char                                      bDoFullyAsyncNavDataGathering : 1;                        // 0x0600(0x0001) (Edit, Config)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                         // 0x0600(0x0001) (Config)
	unsigned char                                      bUseVirtualFilters : 1;                                   // 0x0600(0x0001) (Config)
	unsigned char                                      bUseVoxelCache : 1;                                       // 0x0600(0x0001) (Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0601(0x0003) MISSED OFFSET
	float                                              TileSetUpdateInterval;                                    // 0x0604(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              HeuristicScale;                                           // 0x0608(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VerticalDeviationFromGroundCompensation;                  // 0x060C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x30];                                      // 0x0610(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RecastNavMesh"));
		return ptr;
	}

};


// Class Engine.NavigationGraphNode
// 0x0000 (0x03D0 - 0x03D0)
class ANavigationGraphNode : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationGraphNode"));
		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x0400 - 0x0400)
class APlayerStartPIE : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerStartPIE"));
		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
class UNavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavPathObserverInterface"));
		return ptr;
	}

};


// Class Engine.NavigationTestingActor
// 0x00D0 (0x04A0 - 0x03D0)
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET
	UCapsuleComponent*                                 CapsuleComponent;                                         // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UNavigationInvokerComponent*                       InvokerComponent;                                         // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bActAsNavigationInvoker : 1;                              // 0x03F0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	FNavAgentProperties                                NavAgentProps;                                            // 0x03F4(0x0030) (Edit)
	FVector                                            QueryingExtent;                                           // 0x0424(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	ANavigationData*                                   MyNavData;                                                // 0x0430(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	FVector                                            ProjectedLocation;                                        // 0x0438(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bProjectedLocationValid : 1;                              // 0x0444(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bSearchStart : 1;                                         // 0x0444(0x0001) (Edit)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                          // 0x0444(0x0001) (Edit)
	unsigned char                                      bGatherDetailedInfo : 1;                                  // 0x0444(0x0001) (Edit)
	unsigned char                                      bShowNodePool : 1;                                        // 0x0444(0x0001) (Edit)
	unsigned char                                      bShowBestPath : 1;                                        // 0x0444(0x0001) (Edit)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                            // 0x0444(0x0001) (Edit)
	unsigned char                                      bShouldBeVisibleInGame : 1;                               // 0x0444(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	TEnumAsByte<ENavCostDisplay>                       CostDisplayMode;                                          // 0x0448(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	FVector2D                                          TextCanvasOffset;                                         // 0x044C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPathExist : 1;                                           // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bPathIsPartial : 1;                                       // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bPathSearchOutOfNodes : 1;                                // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	float                                              PathfindingTime;                                          // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              PathCost;                                                 // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                PathfindingSteps;                                         // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	ANavigationTestingActor*                           OtherActor;                                               // 0x0468(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            FilterClass;                                              // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ShowStepIndex;                                            // 0x0478(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	float                                              OffsetFromCornersDistance;                                // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x20];                                      // 0x0480(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationTestingActor"));
		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UNavLinkDefinition : public UObject
{
public:
	TArray<FNavigationLink>                            Links;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkDefinition"));
		return ptr;
	}

};


// Class Engine.NavLinkHostInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkHostInterface"));
		return ptr;
	}

};


// Class Engine.NavLinkProxy
// 0x0050 (0x0420 - 0x03D0)
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET
	TArray<FNavigationLink>                            PointLinks;                                               // 0x03E0(0x0010) (Edit, ZeroConstructor)
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                             // 0x03F0(0x0010) (ZeroConstructor)
	UNavLinkCustomComponent*                           SmartLinkComp;                                            // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bSmartLinkIsRelevant;                                     // 0x0408(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	FScriptMulticastDelegate                           OnSmartLinkReached;                                       // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkProxy"));
		return ptr;
	}


	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(AActor* Agent);
	void ReceiveSmartLinkReached(AActor* Agent, const FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
};


// Class Engine.Note
// 0x0000 (0x03D0 - 0x03D0)
class ANote : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Note"));
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x0118 (0x0140 - 0x0028)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              UpdateTime_FPS;                                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmUpTime;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<UParticleEmitter*>                          Emitters;                                                 // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	UParticleSystemComponent*                          PreviewComponent;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	UInterpCurveEdSetup*                               CurveEdSetup;                                             // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                             // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              LODDistanceCheckTime;                                     // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	TArray<float>                                      LODDistances;                                             // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bRegenerateLODDuplicate : 1;                              // 0x0080(0x0001)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	TArray<FParticleSystemLOD>                         LODSettings;                                              // 0x0088(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bIgnoreBoundsRotation : 1;                                // 0x0098(0x0001) (Edit)
	unsigned char                                      bBoostParticleAggregationPriority : 1;                    // 0x0098(0x0001) (Edit)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                         // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	FBox                                               FixedRelativeBoundingBox;                                 // 0x009C(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLowResTranslucencyBoundingBox : 1;                    // 0x00B8(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	FBox                                               LowResTranslucencyBoundingBox;                            // 0x00BC(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldResetPeakCounts : 1;                               // 0x00DC(0x0001)
	unsigned char                                      bHasPhysics : 1;                                          // 0x00DC(0x0001) (Transient)
	unsigned char                                      bPostPhysicsTick : 1;                                     // 0x00DC(0x0001) (Edit)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                // 0x00DC(0x0001) (Edit)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                              // 0x00DC(0x0001)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              Delay;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseDelayRange : 1;                                       // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData08[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	FVector                                            MacroUVPosition;                                          // 0x00EC(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x00FC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	FBox                                               CustomOcclusionBounds;                                    // 0x0100(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<FLODSoloTrack>                              SoloTracking;                                             // 0x0120(0x0010) (ZeroConstructor, Transient)
	TArray<FNamedEmitterMaterial>                      NamedMaterialSlots;                                       // 0x0130(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleSystem"));
		return ptr;
	}


	int GetNumLODs();
	bool ContainsEmitterType(UClass* TypeData);
};


// Class Engine.ParticleSystemAggregateTickSettings
// 0x0010 (0x0038 - 0x0028)
class UParticleSystemAggregateTickSettings : public UObject
{
public:
	int                                                FramesTickScaledOver;                                     // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxTicksPerFrame;                                         // 0x002C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityInflationPower;                                   // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleSystemAggregateTickSettings"));
		return ptr;
	}

};


// Class Engine.ParticleEventManager
// 0x0000 (0x03D0 - 0x03D0)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleEventManager"));
		return ptr;
	}

};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Interface_CollisionDataProvider"));
		return ptr;
	}

};


// Class Engine.MeshPatchAsset
// 0x0010 (0x0038 - 0x0028)
class UMeshPatchAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MeshPatchAsset"));
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0210 (0x0238 - 0x0028)
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET
	USkeleton*                                         Skeleton;                                                 // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	FBoxSphereBounds                                   Bounds;                                                   // 0x0058(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<FSkeletalMaterial>                          Materials;                                                // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	TArray<FBoneMirrorInfo>                            SkelMirrorTable;                                          // 0x0088(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x009A(0x0006) MISSED OFFSET
	TArray<FSkeletalMeshLODInfo>                       LODInfo;                                                  // 0x00A0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                 // 0x00B0(0x0001) (Edit)
	unsigned char                                      bHasBeenSimplified : 1;                                   // 0x00B0(0x0001)
	unsigned char                                      bHasVertexColors : 1;                                     // 0x00B0(0x0001)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TArray<FDeformablesSettings>                       DeformablesSettings;                                      // 0x00B8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bKeepTessellationAdjacency : 1;                           // 0x00C8(0x0001) (Edit)
	unsigned char                                      bKeepSkeletalMeshBuffersInMemory : 1;                     // 0x00C8(0x0001) (Edit)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	UBodySetup*                                        BodySetup;                                                // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UPhysicsAsset*                                     PhysicsAsset;                                             // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UHIKCharacterization*                              Characterization;                                         // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPhysicsAsset*                                     DeformablesPhysicsAsset;                                  // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x00F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDiscardedTexelRatios;                            // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<UMorphTarget*>                              MorphTargets;                                             // 0x00F8(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<UMeshPatchAsset*>                           MeshPatchAssets;                                          // 0x0108(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData05[0xD8];                                      // 0x0118(0x00D8) MISSED OFFSET
	TArray<FClothingAssetData>                         ClothingAssets;                                           // 0x01F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0200(0x0010) MISSED OFFSET
	TArray<UAssetUserData*>                            AssetUserData;                                            // 0x0210(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	TArray<USkeletalMeshSocket*>                       Sockets;                                                  // 0x0228(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkeletalMesh"));
		return ptr;
	}


	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	int GetNumLODsBP();
	USkeletalMeshSocket* FindSocket(const FName& InSocketName);
};


// Class Engine.AnimationAsset
// 0x0028 (0x0050 - 0x0028)
class UAnimationAsset : public UObject
{
public:
	USkeleton*                                         Skeleton;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	TArray<UAnimMetaData*>                             MetaData;                                                 // 0x0040(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimationAsset"));
		return ptr;
	}

};


// Class Engine.DefaultPawn
// 0x0028 (0x0470 - 0x0448)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                             // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	UPawnMovementComponent*                            MovementComponent;                                        // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	USphereComponent*                                  CollisionComponent;                                       // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UStaticMeshComponent*                              MeshComponent;                                            // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                          // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DefaultPawn"));
		return ptr;
	}


	void TurnAtRate(float Rate);
	void Turn(float Val);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
	void LookUp(float Val);
};


// Class Engine.SpectatorPawn
// 0x0000 (0x0470 - 0x0470)
class ASpectatorPawn : public ADefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SpectatorPawn"));
		return ptr;
	}

};


// Class Engine.ReflectionCapture
// 0x0008 (0x03D8 - 0x03D0)
class AReflectionCapture : public AActor
{
public:
	UReflectionCaptureComponent*                       CaptureComponent;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ReflectionCapture"));
		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x03D8 - 0x03D8)
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BoxReflectionCapture"));
		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x03D8 - 0x03D8)
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlaneReflectionCapture"));
		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x03E0 - 0x03D8)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	UDrawSphereComponent*                              DrawCaptureRadius;                                        // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SphereReflectionCapture"));
		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x03D0 - 0x03D0)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RigidBodyBase"));
		return ptr;
	}

};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x03F0 - 0x03D0)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	UPhysicsConstraintComponent*                       ConstraintComp;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	AActor*                                            ConstraintActor1;                                         // 0x03D8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	AActor*                                            ConstraintActor2;                                         // 0x03E0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                                    // 0x03E8(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsConstraintActor"));
		return ptr;
	}

};


// Class Engine.PhysicsThruster
// 0x0008 (0x03D8 - 0x03D0)
class APhysicsThruster : public ARigidBodyBase
{
public:
	UPhysicsThrusterComponent*                         ThrusterComponent;                                        // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsThruster"));
		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x03D8 - 0x03D0)
class ARadialForceActor : public ARigidBodyBase
{
public:
	URadialForceComponent*                             ForceComponent;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RadialForceActor"));
		return ptr;
	}


	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};


// Class Engine.SceneCapture
// 0x0008 (0x03D8 - 0x03D0)
class ASceneCapture : public AActor
{
public:
	UStaticMeshComponent*                              MeshComp;                                                 // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCapture"));
		return ptr;
	}

};


// Class Engine.SceneCapture2D
// 0x0010 (0x03E8 - 0x03D8)
class ASceneCapture2D : public ASceneCapture
{
public:
	USceneCaptureComponent2D*                          CaptureComponent2D;                                       // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UDrawFrustumComponent*                             DrawFrustum;                                              // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCapture2D"));
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureCube
// 0x0010 (0x03E8 - 0x03D8)
class ASceneCaptureCube : public ASceneCapture
{
public:
	USceneCaptureComponentCube*                        CaptureComponentCube;                                     // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UDrawFrustumComponent*                             DrawFrustum;                                              // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCaptureCube"));
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.ServerOnlyTestActor
// 0x0000 (0x03D0 - 0x03D0)
class AServerOnlyTestActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ServerOnlyTestActor"));
		return ptr;
	}

};


// Class Engine.SkinnedMeshComponent
// 0x0120 (0x06C0 - 0x05A0)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                      // 0x05A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x05A8(0x0040) MISSED OFFSET
	UMaterialInterface*                                CustomDepthMaterial;                                      // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x05F0(0x0010) MISSED OFFSET
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                    // 0x0600(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0601(0x0007) MISSED OFFSET
	TArray<FActiveVertexAnim>                          ActiveVertexAnims;                                        // 0x0608(0x0010) (ZeroConstructor, Transient)
	UPhysicsAsset*                                     PhysicsAssetOverride;                                     // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x0620(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MinLodModel;                                              // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PredictedLODLevel;                                        // 0x0628(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                OldPredictedLODLevel;                                     // 0x062C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxDistanceFactor;                                        // 0x0630(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0634(0x0004) MISSED OFFSET
	TArray<FSkelMeshComponentLODInfo>                  LODInfo;                                                  // 0x0638(0x0010) (ZeroConstructor, Transient)
	float                                              StreamingDistanceMultiplier;                              // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FColor                                             WireframeColor;                                           // 0x064C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceWireframe : 1;                                      // 0x0650(0x0001)
	unsigned char                                      bDisplayBones : 1;                                        // 0x0650(0x0001)
	unsigned char                                      bDisplayBoneCollisions : 1;                               // 0x0650(0x0001)
	unsigned char                                      bDisableMorphTarget : 1;                                  // 0x0650(0x0001)
	unsigned char                                      bHideSkin : 1;                                            // 0x0650(0x0001)
	unsigned char                                      UnknownData04[0x17];                                      // 0x0651(0x0017) MISSED OFFSET
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x0668(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                         // 0x0668(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                          // 0x0668(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0669(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshComponentUpdateFlag>              MeshComponentUpdateFlag;                                  // 0x066C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x066D(0x0003) MISSED OFFSET
	unsigned char                                      bForceMeshObjectUpdate : 1;                               // 0x0670(0x0001) (Transient)
	unsigned char                                      bChartDistanceFactor : 1;                                 // 0x0670(0x0001)
	unsigned char                                      bCanHighlightSelectedSections : 1;                        // 0x0670(0x0001) (Transient)
	unsigned char                                      bRecentlyRendered : 1;                                    // 0x0670(0x0001) (Transient)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0671(0x0003) MISSED OFFSET
	float                                              ProgressiveDrawingFraction;                               // 0x0674(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      CustomSortAlternateIndexMode;                             // 0x0678(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x13];                                      // 0x0679(0x0013) MISSED OFFSET
	FBoxSphereBounds                                   CachedLocalBounds;                                        // 0x068C(0x001C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCachedLocalBoundsUpToDate;                               // 0x06A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableUpdateRateOptimizations;                           // 0x06A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisplayDebugUpdateRateOptimizations;                     // 0x06AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x15];                                      // 0x06AB(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkinnedMeshComponent"));
		return ptr;
	}

	TArray<FTransform> GetComponentSpaceTransforms(int currentReadComponentTransforms)
	{
		return *reinterpret_cast<TArray<FTransform>*>(reinterpret_cast<uintptr_t>(this) + 0x5A8 + 0x10 * (uintptr_t)currentReadComponentTransforms);
	}

	int GetCurrentReadComponentTransforms()
	{
		return *reinterpret_cast<int*>(reinterpret_cast<uintptr_t>(this) + 0x5CC);
	}


	void UnHideBoneByName(const FName& BoneName);
	void TransformToBoneSpace(const FName& BoneName, const FVector& InPosition, const FRotator& InRotation, FVector* OutPosition, FRotator* OutRotation);
	void TransformFromBoneSpace(const FName& BoneName, const FVector& InPosition, const FRotator& InRotation, FVector* OutPosition, FRotator* OutRotation);
	void SetSkeletalMesh(USkeletalMesh* NewMesh);
	void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMasterPoseComponent(USkinnedMeshComponent* NewMasterBoneComponent);
	void SetCustomDepthMaterial(UMaterialInterface* Material);
	void OnRep_SkeletalMesh(USkeletalMesh* OldMesh);
	bool IsBoneHiddenByName(const FName& BoneName);
	void HideBoneByName(const FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	FName GetSocketBoneName(const FName& InSocketName);
	FName GetParentBone(const FName& BoneName);
	UMaterialInterface* GetCustomDepthMaterial();
	FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const FName& BoneName);
	bool BoneIsChildOf(const FName& BoneName, const FName& ParentBoneName);
};


// Class Engine.PhysicsConstraintComponent
// 0x01B0 (0x0460 - 0x02B0)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	AActor*                                            ConstraintActor1;                                         // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	FConstrainComponentPropName                        ComponentName1;                                           // 0x02B8(0x0008) (Edit)
	AActor*                                            ConstraintActor2;                                         // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	FConstrainComponentPropName                        ComponentName2;                                           // 0x02C8(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET
	UPhysicsConstraintTemplate*                        ConstraintSetup;                                          // 0x02E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	FScriptMulticastDelegate                           OnConstraintBroken;                                       // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02F8(0x0008) MISSED OFFSET
	FConstraintInstance                                ConstraintInstance;                                       // 0x0300(0x0160) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsConstraintComponent"));
		return ptr;
	}


	void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const FVector& PriAxis, const FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const FTransform& RefFrame);
	void SetConstrainedComponents(UPrimitiveComponent* Component1, const FName& BoneName1, UPrimitiveComponent* Component2, const FName& BoneName2);
	void SetAngularVelocityTarget(const FVector& InVelTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(FVector* OutLinearForce, FVector* OutAngularForce);
	void BreakConstraint();
};


// Class Engine.Skeleton
// 0x0240 (0x0268 - 0x0028)
class USkeleton : public UObject
{
public:
	TArray<FBoneNode>                                  BoneTree;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0038(0x0080) MISSED OFFSET
	TArray<FSkeletonToMeshLinkup>                      LinkupCache;                                              // 0x00B8(0x0010) (ZeroConstructor, Transient)
	TArray<USkeletalMeshSocket*>                       Sockets;                                                  // 0x00C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00D8(0x0050) MISSED OFFSET
	FSmartNameContainer                                SmartNames;                                               // 0x0128(0x0050)
	TArray<FAnimSlotGroup>                             SlotGroups;                                               // 0x0178(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0xE0];                                      // 0x0188(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Skeleton"));
		return ptr;
	}

};


// Class Engine.Interface_Animatable
// 0x0000 (0x0028 - 0x0028)
class UInterface_Animatable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Interface_Animatable"));
		return ptr;
	}


	UAnimInstance* GetAnimInstance();
};


// Class Engine.SkeletalMeshComponent
// 0x02D0 (0x0990 - 0x06C0)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x06C0(0x0010) MISSED OFFSET
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                            // 0x06D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x06D1(0x0007) MISSED OFFSET
	UClass*                                            AnimBlueprintGeneratedClass;                              // 0x06D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UAnimInstance*                                     AnimScriptInstance;                                       // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	FSingleAnimationPlayData                           AnimationData;                                            // 0x06E8(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0708(0x0010) MISSED OFFSET
	TArray<FTransform>                                 CachedLocalAtoms;                                         // 0x0718(0x0010) (ZeroConstructor, Transient)
	TArray<FTransform>                                 CachedSpaceBases;                                         // 0x0728(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0738(0x0028) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasValidBodies : 1;                                      // 0x0764(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0765(0x0003) MISSED OFFSET
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                 // 0x0768(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0769(0x0003) MISSED OFFSET
	unsigned char                                      bBlendPhysics : 1;                                        // 0x076C(0x0001) (Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                      // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                           // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableClothSimulation : 1;                              // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithEnvironment : 1;                              // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren : 1;                         // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation : 1;                                // 0x076C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClothMorphTarget : 1;                                    // 0x076C(0x0001) (Edit)
	unsigned char                                      bResetAfterTeleport : 1;                                  // 0x076D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x2];                                       // 0x076E(0x0002) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                                // 0x0770(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x0774(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x0778(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	FVector                                            RootBoneTranslation;                                      // 0x0780(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bNoSkeletonUpdate : 1;                                    // 0x078C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseAnims : 1;                                          // 0x078C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x078C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x3];                                       // 0x078D(0x0003) MISSED OFFSET
	UBodySetup*                                        BodySetup;                                                // 0x0790(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bAutonomousTickPose : 1;                                  // 0x0798(0x0001) (Transient)
	unsigned char                                      bForceRefpose : 1;                                        // 0x0798(0x0001)
	unsigned char                                      bOldForceRefPose : 1;                                     // 0x0798(0x0001)
	unsigned char                                      bShowPrePhysBones : 1;                                    // 0x0798(0x0001)
	unsigned char                                      bRequiredBonesUpToDate : 1;                               // 0x0798(0x0001) (Transient)
	unsigned char                                      bAnimTreeInitialised : 1;                                 // 0x0798(0x0001) (Transient)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                           // 0x0798(0x0001)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0799(0x0003) MISSED OFFSET
	FVector                                            LineCheckBoundsScale;                                     // 0x079C(0x000C) (ZeroConstructor, IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x07A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x07AC(0x0004) MISSED OFFSET
	FScriptMulticastDelegate                           OnConstraintBroken;                                       // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               UseRefPoseToInitialise;                                   // 0x07C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1C7];                                     // 0x07C1(0x01C7) MISSED OFFSET
	float                                              LastPoseTickTime;                                         // 0x0988(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x098C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkeletalMeshComponent"));
		return ptr;
	}


	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void Stop();
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetMorphTarget(const FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetClothMaxDistanceScale(float Scale);
	void SetAnimInstanceClass(UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);
	void SetAnimation(UAnimationAsset* NewAnimToPlay);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const FName& InBoneName, bool bNewSimulate);
	void SetAllBodiesBelowPhysicsBlendWeight(const FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	bool IsPlaying();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const FName& MorphTargetName);
	float GetClothMaxDistanceScale();
	UAnimInstance* GetAnimInstance();
	TEnumAsByte<EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	void ClearMorphTargets();
	void BindClothToMasterPoseComponent();
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MatineeAnimInterface"));
		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0040 (0x0410 - 0x03D0)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	unsigned char                                      bShouldDoAnimNotifies : 1;                                // 0x03D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart : 1;                                    // 0x03D8(0x0001) (Deprecated)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	USkeletalMeshComponent*                            SkeletalMeshComponent;                                    // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	USkeletalMesh*                                     ReplicatedMesh;                                           // 0x03E8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	UPhysicsAsset*                                     ReplicatedPhysAsset;                                      // 0x03F0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	UMaterialInterface*                                ReplicatedMaterial0;                                      // 0x03F8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	UMaterialInterface*                                ReplicatedMaterial1;                                      // 0x0400(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0408(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkeletalMeshActor"));
		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class Engine.SplineMeshActor
// 0x0008 (0x03D8 - 0x03D0)
class ASplineMeshActor : public AActor
{
public:
	USplineMeshComponent*                              SplineMeshComponent;                                      // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SplineMeshActor"));
		return ptr;
	}

};


// Class Engine.CoveredMeshActor
// 0x0008 (0x03E8 - 0x03E0)
class ACoveredMeshActor : public AStaticMeshActor
{
public:
	UInstancedCoverageMeshComponent*                   InstancedCoverageMeshComponent;                           // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CoveredMeshActor"));
		return ptr;
	}

};


// Class Engine.StreamingProbe
// 0x0000 (0x03D0 - 0x03D0)
class AStreamingProbe : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StreamingProbe"));
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x03D0 - 0x03D0)
class ATargetPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TargetPoint"));
		return ptr;
	}

};


// Class Engine.TextRenderActor
// 0x0008 (0x03D8 - 0x03D0)
class ATextRenderActor : public AActor
{
public:
	UTextRenderComponent*                              TextRender;                                               // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextRenderActor"));
		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0010 (0x03E0 - 0x03D0)
class ATriggerBase : public AActor
{
public:
	UShapeComponent*                                   CollisionComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	UBillboardComponent*                               SpriteComponent;                                          // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TriggerBase"));
		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x03E0 - 0x03E0)
class ATriggerBox : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TriggerBox"));
		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x03E0 - 0x03E0)
class ATriggerCapsule : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TriggerCapsule"));
		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x03E0 - 0x03E0)
class ATriggerSphere : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TriggerSphere"));
		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x03D8 - 0x03D0)
class AVectorFieldVolume : public AActor
{
public:
	UVectorFieldComponent*                             VectorFieldComponent;                                     // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VectorFieldVolume"));
		return ptr;
	}

};


// Class Engine.WaterEmissionVolume
// 0x0008 (0x03D8 - 0x03D0)
class AWaterEmissionVolume : public AActor
{
public:
	UWaterEmissionVolumeComponent*                     WaterEmissionVolumeComponent;                             // 0x03D0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WaterEmissionVolume"));
		return ptr;
	}

};


// Class Engine.ComponentWithTestInterface
// 0x0008 (0x00D0 - 0x00C8)
class UComponentWithTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ComponentWithTestInterface"));
		return ptr;
	}

};


// Class Engine.AnotherComponentWithTestInterface
// 0x0008 (0x00D0 - 0x00C8)
class UAnotherComponentWithTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnotherComponentWithTestInterface"));
		return ptr;
	}

};


// Class Engine.ApplicationLifecycleComponent
// 0x0050 (0x0118 - 0x00C8)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	FScriptMulticastDelegate                           ApplicationWillDeactivateDelegate;                        // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           ApplicationHasReactivatedDelegate;                        // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           ApplicationWillEnterBackgroundDelegate;                   // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           ApplicationHasEnteredForegroundDelegate;                  // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           ApplicationWillTerminateDelegate;                         // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ApplicationLifecycleComponent"));
		return ptr;
	}


	void ApplicationLifetimeDelegate__DelegateSignature();
};


// Class Engine.AggregatorInterface
// 0x0000 (0x0028 - 0x0028)
class UAggregatorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AggregatorInterface"));
		return ptr;
	}


	void UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable);
	void RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable);
};


// Class Engine.ComponentAggregatorComponent
// 0x0018 (0x00E0 - 0x00C8)
class UComponentAggregatorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET
	TArray<UObject*>                                   Aggregatables;                                            // 0x00D0(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ComponentAggregatorComponent"));
		return ptr;
	}


	void UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable);
	void RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable);
};


// Class Engine.InterpToMovementComponent
// 0x0098 (0x01A8 - 0x0110)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                 // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPauseOnImpact : 1;                                       // 0x0114(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	TEnumAsByte<EInterpToBehaviourType>                BehaviourType;                                            // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	unsigned char                                      bForceSubStepping : 1;                                    // 0x011C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	FScriptMulticastDelegate                           OnInterpToReverse;                                        // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnInterpToStop;                                           // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnWaitBeginDelegate;                                      // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnWaitEndDelegate;                                        // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnResetDelegate;                                          // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<FInterpControlPoint>                        ControlPoints;                                            // 0x0178(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0188(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpToMovementComponent"));
		return ptr;
	}


	void StopSimulating(const FHitResult& HitResult);
	void OnInterpToWaitEndDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time);
};


// Class Engine.NavigationSystem
// 0x03B0 (0x03D8 - 0x0028)
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	ANavigationData*                                   MainNavData;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	ANavigationData*                                   AbstractNavData;                                          // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoCreateNavigationData : 1;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bAllowClientSideNavigation : 1;                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bSupportRebuilding : 1;                                   // 0x0038(0x0001)
	unsigned char                                      bInitialBuildingLocked : 1;                               // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0038(0x0001)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<ENavDataGatheringModeConfig>           DataGatheringMode;                                        // 0x003C(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      bGenerateNavigationOnlyAroundNavigationInvokers : 1;      // 0x0040(0x0001) (Edit, Config, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              ActiveTilesUpdateInterval;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<FNavDataConfig>                             SupportedAgents;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	float                                              DirtyAreasUpdateFreq;                                     // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<ANavigationData*>                           NavDataSet;                                               // 0x0060(0x0010) (ZeroConstructor)
	TArray<ANavigationData*>                           NavDataRegistrationQueue;                                 // 0x0070(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x60];                                      // 0x0080(0x0060) MISSED OFFSET
	FScriptMulticastDelegate                           OnNavDataRegisteredEvent;                                 // 0x00E0(0x0010) (ZeroConstructor, Transient, InstancedReference)
	FScriptMulticastDelegate                           OnNavigationGenerationFinishedDelegate;                   // 0x00F0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0xCC];                                      // 0x0100(0x00CC) MISSED OFFSET
	TEnumAsByte<EFNavigationSystemRunMode>             OperationMode;                                            // 0x01CC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1F3];                                     // 0x01CD(0x01F3) MISSED OFFSET
	FStringAssetReference                              InstancedNavMeshesDataAsset;                              // 0x03C0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	UInstancedNavMeshesDataAsset*                      InstancedNavMeshesData;                                   // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationSystem"));
		return ptr;
	}


	void UnregisterNavigationInvoker(AActor* Invoker);
	static void SimpleMoveToLocation(AController* Controller, const FVector& Goal);
	static void SimpleMoveToActor(AController* Controller, AActor* Goal);
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);
	void SetGeometryGatheringMode(TEnumAsByte<ENavDataGatheringModeConfig> NewMode);
	void ResetMaxSimultaneousTileGenerationJobsCount();
	void RegisterNavigationInvoker(AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	static FVector ProjectPointToNavigation(UObject* WorldContext, const FVector& Point, ANavigationData* NavData, UClass* FilterClass, const FVector& QueryExtent);
	void OnNavigationBoundsUpdated(ANavMeshBoundsVolume* NavVolume);
	static bool NavigationRaycast(UObject* WorldContext, const FVector& RayStart, const FVector& RayEnd, UClass* FilterClass, AController* Querier, FVector* HitLocation);
	static bool IsNavigationBeingBuilt(UObject* WorldContext);
	static FVector GetRandomReachablePointInRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass);
	static FVector GetRandomPointInRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass);
	static FVector GetRandomPointInNavigableRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass);
	static FVector GetRandomPoint(UObject* WorldContext, ANavigationData* NavData, UClass* FilterClass);
	static TEnumAsByte<ENavigationQueryResult> GetPathLength(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, ANavigationData* NavData, UClass* FilterClass, float* PathLength);
	static TEnumAsByte<ENavigationQueryResult> GetPathCost(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, ANavigationData* NavData, UClass* FilterClass, float* PathCost);
	static UNavigationSystem* GetNavigationSystem(UObject* WorldContext);
	ANavigationData* GetMainNavData();
	static UNavigationPath* FindPathToLocationSynchronously(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, AActor* PathfindingContext, UClass* FilterClass);
	static UNavigationPath* FindPathToActorSynchronously(UObject* WorldContext, const FVector& PathStart, AActor* GoalActor, float TetherDistance, AActor* PathfindingContext, UClass* FilterClass);
	bool DoesMainNavDataHaveValidNavMesh();
};


// Class Engine.AnimSequenceBase
// 0x0028 (0x0078 - 0x0050)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<FAnimNotifyEvent>                           Notifies;                                                 // 0x0050(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RateScale;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawCurveTracks                                    RawCurveData;                                             // 0x0068(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimSequenceBase"));
		return ptr;
	}


	float GetPlayLength();
};


// Class Engine.AnimCompositeBase
// 0x0000 (0x0078 - 0x0078)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompositeBase"));
		return ptr;
	}

};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimStateMachineTypes"));
		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0070 (0x00E8 - 0x0078)
class UAnimMontage : public UAnimCompositeBase
{
public:
	float                                              BlendInTime;                                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<FCompositeSection>                          CompositeSections;                                        // 0x0088(0x0010) (ZeroConstructor)
	TArray<FSlotAnimationTrack>                        SlotAnimTracks;                                           // 0x0098(0x0010) (ZeroConstructor)
	TArray<FBranchingPoint>                            BranchingPoints;                                          // 0x00A8(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                             // 0x00B8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotionRotation;                                // 0x00B9(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x00BA(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00BB(0x0005) MISSED OFFSET
	TArray<FBranchingPointMarker>                      BranchingPointMarkers;                                    // 0x00C0(0x0010) (ZeroConstructor)
	bool                                               bAnimBranchingPointNeedsSort;                             // 0x00D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x00D8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimMontage"));
		return ptr;
	}

};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
class URVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RVOAvoidanceInterface"));
		return ptr;
	}

};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
class UNetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetworkPredictionInterface"));
		return ptr;
	}

};


// Class Engine.FloatingPawnMovement
// 0x0018 (0x0178 - 0x0160)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Deceleration;                                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurningBoost;                                             // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                                   // 0x0170(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0171(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FloatingPawnMovement"));
		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0180 - 0x0178)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0178(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SpectatorPawnMovement"));
		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x0068 (0x0178 - 0x0110)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                             // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity : 1;                             // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldBounce : 1;                                        // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                         // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHomingProjectile : 1;                                  // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                          // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSliding : 1;                                           // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              PreviousHitTime;                                          // 0x011C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	FVector                                            PreviousHitNormal;                                        // 0x0120(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0130(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bounciness;                                               // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FScriptMulticastDelegate                           OnProjectileBounce;                                       // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnProjectileStop;                                         // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                    // 0x0164(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0174(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ProjectileMovementComponent"));
		return ptr;
	}


	void StopSimulating(const FHitResult& HitResult);
	void SetVelocityInLocalSpace(const FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(const FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const FHitResult& ImpactResult, const FVector& ImpactVelocity);
	FVector LimitVelocity(const FVector& NewVelocity);
};


// Class Engine.RotatingMovementComponent
// 0x0020 (0x0130 - 0x0110)
class URotatingMovementComponent : public UMovementComponent
{
public:
	FRotator                                           RotationRate;                                             // 0x0110(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            PivotTranslation;                                         // 0x011C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                                // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0129(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RotatingMovementComponent"));
		return ptr;
	}

};


// Class Engine.NavigationInvokerComponent
// 0x0008 (0x00D0 - 0x00C8)
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                              TileGenerationRadius;                                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TileRemovalRadius;                                        // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationInvokerComponent"));
		return ptr;
	}

};


// Class Engine.NavRelevantComponent
// 0x0030 (0x00F8 - 0x00C8)
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x00C8(0x0024) MISSED OFFSET
	unsigned char                                      bNavigationRelevant : 1;                                  // 0x00EC(0x0001)
	unsigned char                                      bAttachToOwnersRoot : 1;                                  // 0x00EC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	UObject*                                           CachedNavParent;                                          // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavRelevantComponent"));
		return ptr;
	}


	void SetNavigationRelevancy(bool bRelevant);
};


// Class Engine.NavLinkCustomInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkCustomInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkCustomInterface"));
		return ptr;
	}

};


// Class Engine.NavLinkCustomComponent
// 0x0098 (0x0190 - 0x00F8)
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	uint32_t                                           NavLinkUserId;                                            // 0x0100(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	UClass*                                            EnabledAreaClass;                                         // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            DisabledAreaClass;                                        // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            LinkRelativeStart;                                        // 0x0118(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            LinkRelativeEnd;                                          // 0x0124(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENavLinkDirection>                     LinkDirection;                                            // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	unsigned char                                      bLinkEnabled : 1;                                         // 0x0134(0x0001) (Edit)
	unsigned char                                      bNotifyWhenEnabled : 1;                                   // 0x0134(0x0001) (Edit)
	unsigned char                                      bNotifyWhenDisabled : 1;                                  // 0x0134(0x0001) (Edit)
	unsigned char                                      bCreateBoxObstacle : 1;                                   // 0x0134(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	FVector                                            ObstacleOffset;                                           // 0x0138(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            ObstacleExtent;                                           // 0x0144(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            ObstacleAreaClass;                                        // 0x0150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BroadcastRadius;                                          // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BroadcastInterval;                                        // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     BroadcastChannel;                                         // 0x0160(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2F];                                      // 0x0161(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkCustomComponent"));
		return ptr;
	}

};


// Class Engine.NavModifierComponent
// 0x0020 (0x0118 - 0x00F8)
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	UClass*                                            AreaClass;                                                // 0x00F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            FailsafeExtent;                                           // 0x0100(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x010C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavModifierComponent"));
		return ptr;
	}

};


// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (0x00F0 - 0x00C8)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                 // 0x00C8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	FVector                                            LastRemoteNoisePosition;                                  // 0x00CC(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x00E8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PawnNoiseEmitterComponent"));
		return ptr;
	}


	void MakeNoise(AActor* NoiseMaker, float Loudness, const FVector& NoiseLocation);
};


// Class Engine.PhysicsHandleComponent
// 0x00A8 (0x0170 - 0x00C8)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	UPrimitiveComponent*                               GrabbedComponent;                                         // 0x00C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00D0(0x0010) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x00E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularDamping;                                           // 0x00E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x00EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x60];                                      // 0x00F0(0x0060) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x0150(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x0154(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsHandleComponent"));
		return ptr;
	}


	void SetTargetRotation(const FRotator& NewRotation);
	void SetTargetLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation);
	void SetTargetLocation(const FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponent(UPrimitiveComponent* Component, const FName& InBoneName, const FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(FVector* TargetLocation, FRotator* TargetRotation);
};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x00E8 - 0x00C8)
class UPlatformEventsComponent : public UActorComponent
{
public:
	FScriptMulticastDelegate                           PlatformChangedToLaptopModeDelegate;                      // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           PlatformChangedToTabletModeDelegate;                      // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlatformEventsComponent"));
		return ptr;
	}


	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};


// Class Engine.AtmosphericFogComponent
// 0x01E0 (0x0490 - 0x02B0)
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                            // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FogMultiplier;                                            // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityMultiplier;                                        // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityOffset;                                            // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScale;                                            // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceOffset;                                           // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroundOffset;                                             // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SunDiscScale;                                             // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBrightness;                                        // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FColor                                             DefaultLightColor;                                        // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableSunDisk : 1;                                      // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bDisableGroundScattering : 1;                             // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E1(0x0003) MISSED OFFSET
	FAtmospherePrecomputeParameters                    PrecomputeParams;                                         // 0x02E4(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly)
	UTexture2D*                                        TransmittanceTexture;                                     // 0x0310(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	UTexture2D*                                        IrradianceTexture;                                        // 0x0318(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x170];                                     // 0x0320(0x0170) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AtmosphericFogComponent"));
		return ptr;
	}


	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};


// Class Engine.SoundAttenuation
// 0x00C0 (0x00E8 - 0x0028)
class USoundAttenuation : public UObject
{
public:
	FAttenuationSettings                               Attenuation;                                              // 0x0028(0x00C0) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundAttenuation"));
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x0150 (0x0400 - 0x02B0)
class UAudioComponent : public USceneComponent
{
public:
	USoundBase*                                        Sound;                                                    // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<FAudioComponentParam>                       InstanceParameters;                                       // 0x02B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	USoundClass*                                       SoundClassOverride;                                       // 0x02C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x02D0(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x02D0(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                         // 0x02D0(0x0001)
	unsigned char                                      bAllowSpatialization : 1;                                 // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsUISound : 1;                                           // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	float                                              PitchModulationMin;                                       // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HighFrequencyGainMultiplier;                              // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	USoundAttenuation*                                 AttenuationSettings;                                      // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FAttenuationSettings                               AttenuationOverrides;                                     // 0x02F8(0x00C0) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	FScriptMulticastDelegate                           OnAudioFinished;                                          // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03D0(0x0018) MISSED OFFSET
	FScriptDelegate                                    OnQueueSubtitles;                                         // 0x03E8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AudioComponent"));
		return ptr;
	}


	void Stop();
	void SetWaveParameter(const FName& InName, USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetIntParameter(const FName& InName, int InInt);
	void SetFloatParameter(const FName& InName, float InFloat);
	void SetBoolParameter(const FName& InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool BP_GetAttenuationSettingsToApply(FAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(const FAttenuationSettings& InAttenuationSettings);
};


// Class Engine.BasisComponent
// 0x0010 (0x02C0 - 0x02B0)
class UBasisComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BasisComponent"));
		return ptr;
	}

};


// Class Engine.CalmWaterComponent
// 0x0010 (0x02C0 - 0x02B0)
class UCalmWaterComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02B0(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              RadiusPercentageToStartLerp;                              // 0x02B4(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              DampeningFactor;                                          // 0x02B8(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CalmWaterComponent"));
		return ptr;
	}

};


// Class Engine.ChildActorComponent
// 0x0020 (0x02D0 - 0x02B0)
class UChildActorComponent : public USceneComponent
{
public:
	UClass*                                            ChildActorClass;                                          // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	AActor*                                            ChildActor;                                               // 0x02B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ChildActorComponent"));
		return ptr;
	}


	void SetChildActorClass(UClass* InClass);
};


// Class Engine.EditorOnlyChildActorComponent
// 0x0010 (0x02E0 - 0x02D0)
class UEditorOnlyChildActorComponent : public UChildActorComponent
{
public:
	UClass*                                            CachedChildActorClass;                                    // 0x02D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EditorOnlyChildActorComponent"));
		return ptr;
	}

};


// Class Engine.DecalComponent
// 0x0030 (0x02E0 - 0x02B0)
class UDecalComponent : public USceneComponent
{
public:
	UMaterialInterface*                                DecalMaterial;                                            // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SortOrder;                                                // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UMaterialInstanceDynamic*                          MaterialInstanceDynamic;                                  // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x02C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DecalComponent"));
		return ptr;
	}


	void SetSortOrder(int Value);
	void SetLifeSpan(float LifeSpan);
	void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);
	UMaterialInterface* GetDecalMaterial();
	UMaterialInstanceDynamic* GetDecalDynamicMaterialInstance();
	UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.ExponentialHeightFogComponent
// 0x0060 (0x0310 - 0x02B0)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                               // 0x02B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       FogInscatteringColor;                                     // 0x02B4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       FarFogInscatteringColor;                                  // 0x02C4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartScaleDirectionalInscattering;                        // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarScaleDirectionalInscattering;                          // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       DirectionalInscatteringColor;                             // 0x02E4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogHeightFalloff;                                         // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarDistance;                                              // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartScale;                                               // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarScale;                                                 // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUnderwater;                                            // 0x030C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x030D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ExponentialHeightFogComponent"));
		return ptr;
	}


	void SetStartDistance(float Value);
	void SetInscatteringStartScale(float Value);
	void SetInscatteringFarScale(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFarInscatteringColour(const FLinearColor& Value);
	void SetExponentialFogFarDistance(float Value);
	void SetDirectionalInscatteringStartScale(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringFarScale(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const FLinearColor& Value);
};


// Class Engine.FogVolumeComponent
// 0x0100 (0x03B0 - 0x02B0)
class UFogVolumeComponent : public USceneComponent
{
public:
	FLinearColor                                       Color;                                                    // 0x02B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SceneFogSaturation;                                       // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Density;                                                  // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeightFogFalloff;                                         // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFalloffPower;                                     // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShadowIntensity;                                          // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScaleOnTranslucency;                                      // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            FogVelocity;                                              // 0x02D8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            NoisePrimaryScale;                                        // 0x02E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            NoiseSecondaryScale;                                      // 0x02F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NoiseBlend;                                               // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UTexture*                                          VolumeTexture;                                            // 0x0300(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringIntensity;                                    // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringPower;                                        // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistance;                                           // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActiveBelowDepth;                                         // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSceneInscattering : 1;                                // 0x0318(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0319(0x0003) MISSED OFFSET
	bool                                               bUnderwater;                                              // 0x031C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAdvancedVolumeFog;                                       // 0x031D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseDensityMapOnTranslucency;                              // 0x031E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x031F(0x0001) MISSED OFFSET
	UTexture*                                          DensityMap;                                               // 0x0320(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            DensityMapScale;                                          // 0x0328(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            DensityMapOffset;                                         // 0x0334(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            DensityMapActiveHemisphereOrigin;                         // 0x0340(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            DensityMapActiveHemisphereDirection;                      // 0x034C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityMapActiveHemisphereInnerRadius;                    // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityMapActiveHemisphereOuterRadius;                    // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SelfShadowBrightness;                                     // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SelfShadowFogScale;                                       // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMeshFog;                                                 // 0x0368(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0369(0x0003) MISSED OFFSET
	float                                              MeshFogDensity;                                           // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeshFogShadowDensity;                                     // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeshFogScatteringDensity;                                 // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            MeshFogNoisePrimaryScale;                                 // 0x0378(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            MeshFogNoiseSecondaryScale;                               // 0x0384(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeshFogNoiseBlend;                                        // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            MeshFogVelocity;                                          // 0x0394(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UTexture*                                          MeshFogVolumeTexture;                                     // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FogVolumeComponent"));
		return ptr;
	}


	void UpdateFog();
};


// Class Engine.InstancedNavMeshInterface
// 0x0000 (0x0028 - 0x0028)
class UInstancedNavMeshInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedNavMeshInterface"));
		return ptr;
	}

};


// Class Engine.InstancedNavMeshComponent
// 0x0020 (0x02D0 - 0x02B0)
class UInstancedNavMeshComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02B0(0x0008) MISSED OFFSET
	FName                                              NavMeshName;                                              // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseAttachedParentAsPrimitiveBase;                         // 0x02C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x02C1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedNavMeshComponent"));
		return ptr;
	}

};


// Class Engine.AmbientLightSourceComponent
// 0x0030 (0x0470 - 0x0440)
class UAmbientLightSourceComponent : public ULightComponent
{
public:
	FLinearColor                                       Tint;                                                     // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      QuadraticFalloff : 1;                                     // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	TEnumAsByte<EAmbientLightConeShape>                Shape;                                                    // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESimpleLightFunctionType>              SimpleFunctionType;                                       // 0x0455(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0456(0x0002) MISSED OFFSET
	float                                              ScaleOffset;                                              // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PulsePhase;                                               // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlickerFrequency;                                         // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                FlickerPerlinRow;                                         // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShadowed;                                                // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAmbientLightClusteringPolicy>         GroupingPolicy;                                           // 0x0469(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x046A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AmbientLightSourceComponent"));
		return ptr;
	}


	void SetTint(const FLinearColor& NewTint);
	void SetRadius(float NewRadius);
	void SetGroupingPolicy(TEnumAsByte<EAmbientLightClusteringPolicy> Policy);
	void SetAmbientIntensity(float NewIntensity);
};


// Class Engine.DirectionalLightComponent
// 0x0080 (0x04C0 - 0x0440)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              OcclusionDepthRange;                                      // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            LightShaftOverrideDirection;                              // 0x0444(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x0450(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LastTransitionSizeOverride;                               // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloseCascadeUpdateRateInMs;                               // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarCascadesUpdateRateInMs;                                // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                    // 0x0478(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                                    // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NormalOffsetScale;                                        // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudsShadowsIntensity;                                   // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x048C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceDistance;                                            // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLightmassDirectionalLightSettings                 LightmassSettings;                                        // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastModulatedShadows : 1;                                // 0x04A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04A9(0x0003) MISSED OFFSET
	FColor                                             ModulatedShadowColor;                                     // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                            // 0x04B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                                       // 0x04B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DirectionalLightComponent"));
		return ptr;
	}


	void SetShadowLastTransitionSize(float NewValue);
	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetNormalOffsetBiasScale(float NewValue);
	void SetLightShaftOverrideDirection(const FVector& NewValue);
	void SetFarCascadeUpdateRate(float NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCloudsShadowsIntensity(float NewValue);
	void SetCloseCascadeUpdateRate(float NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};


// Class Engine.PointLightComponent
// 0x0040 (0x0480 - 0x0440)
class UPointLightComponent : public ULightComponent
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                            // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              LightFalloffExponent;                                     // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IntensityScaleForWater;                                   // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceToLightAssumed;                                // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceRadius;                                             // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceLength;                                             // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESimpleLightFunctionType>              SimpleFunctionType;                                       // 0x0458(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              ScaleOffset;                                              // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PulsePhase;                                               // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlickerFrequency;                                         // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                FlickerPerlinRow;                                         // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLightmassPointLightSettings                       LightmassSettings;                                        // 0x046C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PointLightComponent"));
		return ptr;
	}


	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
};


// Class Engine.SpotLightComponent
// 0x0010 (0x0490 - 0x0480)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              LightShaftConeAngle;                                      // 0x0480(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              KickBackRatio;                                            // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SpotLightComponent"));
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetKickBackProportionality(float NewKickBackRatio);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.SkyLightComponent
// 0x01A0 (0x0480 - 0x02E0)
class USkyLightComponent : public ULightComponentBase
{
public:
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                               // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET
	UTextureCube*                                      Cubemap;                                                  // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x02F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerHemisphereIsBlack;                                  // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	float                                              OcclusionMaxDistance;                                     // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FColor                                             OcclusionTint;                                            // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ScaleForInteriors;                                        // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xAC];                                      // 0x030C(0x00AC) MISSED OFFSET
	UTextureCube*                                      BlendDestinationCubemap;                                  // 0x03B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC0];                                      // 0x03C0(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkyLightComponent"));
		return ptr;
	}


	void SetOcclusionTint(const FColor& InTint);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(UTextureCube* NewCubemap);
	void RecaptureSky();
};


// Class Engine.NavigationGraphNodeComponent
// 0x0030 (0x02E0 - 0x02B0)
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	FNavGraphNode                                      Node;                                                     // 0x02B0(0x0018)
	UNavigationGraphNodeComponent*                     NextNodeComponent;                                        // 0x02C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UNavigationGraphNodeComponent*                     PrevNodeComponent;                                        // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationGraphNodeComponent"));
		return ptr;
	}

};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x02E0 - 0x02B0)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                          // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringDamping;                                            // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringLengthAtRest;                                       // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringRadius;                                             // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                            // 0x02C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x02C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02C2(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                        // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x02C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsSpringComponent"));
		return ptr;
	}


	FVector GetSpringRestingPoint();
	FVector GetSpringDirection();
	FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x02C0 - 0x02B0)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x02B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsThrusterComponent"));
		return ptr;
	}

};


// Class Engine.ArrowComponent
// 0x0010 (0x05A0 - 0x0590)
class UArrowComponent : public UPrimitiveComponent
{
public:
	bool                                               bIsScreenSizeScaled;                                      // 0x0590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0591(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTreatAsASprite : 1;                                      // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0599(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ArrowComponent"));
		return ptr;
	}


	void SetArrowColor_New(const FLinearColor& NewColor);
	void SetArrowColor_DEPRECATED(const FColor& NewColor);
};


// Class Engine.WaterId
// 0x0000 (0x0028 - 0x0028)
class UWaterId : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WaterId"));
		return ptr;
	}

};


// Class Engine.BaseWaterComponent
// 0x0010 (0x05A0 - 0x0590)
class UBaseWaterComponent : public UPrimitiveComponent
{
public:
	bool                                               ActiveInExclusionZone;                                    // 0x0590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0591(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BaseWaterComponent"));
		return ptr;
	}

};


// Class Engine.FFTWaterComponent
// 0x03E0 (0x0980 - 0x05A0)
class UFFTWaterComponent : public UBaseWaterComponent
{
public:
	unsigned char                                      UnknownData00[0x308];                                     // 0x05A0(0x0308) MISSED OFFSET
	UModel*                                            Brush;                                                    // 0x08A8(0x0008) (ZeroConstructor, IsPlainOldData)
	UBodySetup*                                        BrushBodySetup;                                           // 0x08B0(0x0008) (ZeroConstructor, IsPlainOldData)
	FVector                                            PrePivot;                                                 // 0x08B8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x84];                                      // 0x08C4(0x0084) MISSED OFFSET
	UMaterialInterface*                                LightFunctionMaterial;                                    // 0x0948(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UMaterial*                                         DefaultLightFunctionMaterial;                             // 0x0950(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0958(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FFTWaterComponent"));
		return ptr;
	}


	void SetWaterPositionOffset(const FVector2D& PositionOffset);
	void SetWaterColour(const FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetMurkyRegion(const FMurkyRegion& MurkyRegion);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const FLinearColor& FoamHighlightColour);
	void SetFoamColour(const FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCarrierWaveParams(float Amplitude, float WaveLength, float PropagationSpeed);
	void SetBackLitColour(const FLinearColor& BackLitColour);
	void SetAmbientColour(const FLinearColor& AmbientColour);
	void GetWaterPositionOffset(FVector2D* PositionOffset);
};


// Class Engine.FFTWaterExtendedPlaneComponent
// 0x0320 (0x08C0 - 0x05A0)
class UFFTWaterExtendedPlaneComponent : public UBaseWaterComponent
{
public:
	unsigned char                                      UnknownData00[0x308];                                     // 0x05A0(0x0308) MISSED OFFSET
	UMaterial*                                         Material;                                                 // 0x08A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x08B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FFTWaterExtendedPlaneComponent"));
		return ptr;
	}


	void SetMurkyRegion(const FMurkyRegion& MurkyRegion);
};


// Class Engine.BillboardComponent
// 0x0020 (0x05B0 - 0x0590)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x0590(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0591(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              U;                                                        // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UL;                                                       // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              V;                                                        // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VL;                                                       // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BillboardComponent"));
		return ptr;
	}


	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(UTexture2D* NewSprite);
};


// Class Engine.BrushComponent
// 0x0020 (0x05B0 - 0x0590)
class UBrushComponent : public UPrimitiveComponent
{
public:
	UBodySetup*                                        BrushBodySetup;                                           // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData)
	FVector                                            PrePivot;                                                 // 0x0598(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x05A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BrushComponent"));
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x05B0 - 0x0590)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	float                                              FrustumAspectRatio;                                       // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	UTexture*                                          Texture;                                                  // 0x05A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DrawFrustumComponent"));
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0030 (0x05C0 - 0x0590)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0590(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LineBatchComponent"));
		return ptr;
	}

};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x05A0 - 0x0590)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialBillboardComponent"));
		return ptr;
	}


	void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve);
};


// Class Engine.CollisionProfile
// 0x0120 (0x0158 - 0x0038)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<FCollisionResponseTemplate>                 Profiles;                                                 // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FCustomChannelSetup>                        DefaultChannelResponses;                                  // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FCustomProfile>                             EditProfiles;                                             // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FRedirector>                                ProfileRedirects;                                         // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<FRedirector>                                CollisionChannelRedirects;                                // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0088(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CollisionProfile"));
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x0110 (0x0138 - 0x0028)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	int                                                MinLOD;                                                   // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<UMaterialInterface*>                        Materials;                                                // 0x0048(0x0010) (ZeroConstructor)
	int                                                LightMapResolution;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	UBodySetup*                                        BodySetup;                                                // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                LODForCollision;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMaximumStreamingTexelRatio : 1;                       // 0x006C(0x0001) (Edit)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                     // 0x006C(0x0001) (Deprecated)
	unsigned char                                      bHasNavigationData : 1;                                   // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              StreamingDistanceMultiplier;                              // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LpvBiasMultiplier;                                        // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0078(0x0030) MISSED OFFSET
	TArray<UStaticMeshSocket*>                         Sockets;                                                  // 0x00A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x18];                                      // 0x00B8(0x0018) MISSED OFFSET
	FVector                                            PositiveBoundsExtension;                                  // 0x00D0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	FVector                                            NegativeBoundsExtension;                                  // 0x00DC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	FBoxSphereBounds                                   ExtendedBounds;                                           // 0x00E8(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<FString>                                    SourceMaterials;                                          // 0x0108(0x0010) (ZeroConstructor)
	int                                                UVsForStreaming;                                          // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ElementToIgnoreForTexFactor;                              // 0x011C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<UAssetUserData*>                            AssetUserData;                                            // 0x0120(0x0010) (Edit, ExportObject, ZeroConstructor)
	UNavCollision*                                     NavCollision;                                             // 0x0130(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StaticMesh"));
		return ptr;
	}


	int GetNumUVChannels(int LodLevel);
	int GetNumLODsBP();
	FBox GetBoundingBox();
};


// Class Engine.MergedCollisionComponent
// 0x0020 (0x05B0 - 0x0590)
class UMergedCollisionComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0590(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MergedCollisionComponent"));
		return ptr;
	}


	UStaticMesh* GetStaticMeshByInstanceBodyIndex(int InstanceBodyIndex);
	int GetOwningActorCrc32ByInstanceBodyIndex(int InstanceBodyIndex);
};


// Class Engine.DestructibleComponent
// 0x00C0 (0x0780 - 0x06C0)
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      bFractureEffectOverride : 1;                              // 0x06C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x06C1(0x0007) MISSED OFFSET
	TArray<FFractureEffect>                            FractureEffects;                                          // 0x06C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	bool                                               bEnableHardSleeping;                                      // 0x06D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06D9(0x0003) MISSED OFFSET
	float                                              LargeChunkThreshold;                                      // 0x06DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x06E0(0x0010) MISSED OFFSET
	FScriptMulticastDelegate                           OnComponentFracture;                                      // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x80];                                      // 0x0700(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DestructibleComponent"));
		return ptr;
	}


	void SetDestructibleMesh(UDestructibleMesh* NewMesh);
	UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, const FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const FVector& HitLocation, const FVector& ImpulseDir, float ImpulseStrength);
};


// Class Engine.PoseableMeshComponent
// 0x00D0 (0x0790 - 0x06C0)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x06C0(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PoseableMeshComponent"));
		return ptr;
	}


	void SetBoneTransformByName(const FName& BoneName, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const FName& BoneName, const FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const FName& BoneName, const FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const FName& BoneName, const FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const FName& BoneName);
	FTransform GetBoneTransformByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	FVector GetBoneScaleByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	FRotator GetBoneRotationByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	FVector GetBoneLocationByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
};


// Class Engine.PoseableSkeletalMeshComponent
// 0x0010 (0x09A0 - 0x0990)
class UPoseableSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0990(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PoseableSkeletalMeshComponent"));
		return ptr;
	}


	void SwitchPoseMode(TEnumAsByte<EPoseableAnimMode> NewMode);
	void SetBoneTransformByName(const FName& BoneName, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
	void SetBoneTransformByIndex(int BoneIndex, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
	FTransform GetBoneTransformByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
};


// Class Engine.FlatWaterMeshComponent
// 0x00A0 (0x0690 - 0x05F0)
class UFlatWaterMeshComponent : public UStaticMeshComponent
{
public:
	int                                                RandomDropRate;                                           // 0x05F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDropSize;                                           // 0x05F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDropHeight;                                         // 0x05F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RestorationScale;                                         // 0x05FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForceScale;                                               // 0x0600(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DampHeight;                                               // 0x0604(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalMapScale;                                           // 0x0608(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                TextureWidth;                                             // 0x060C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                TextureHeight;                                            // 0x0610(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0614(0x0004) MISSED OFFSET
	UStaticMesh*                                       ClippingHull;                                             // 0x0618(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxSimulationDistance;                                    // 0x0620(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InitialRandomHeight;                                      // 0x0624(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InitialRandomVelocity;                                    // 0x0628(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x062C(0x0004) MISSED OFFSET
	UTexture*                                          Texture;                                                  // 0x0630(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UTexture*                                          NormalTexture;                                            // 0x0638(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UTextureRenderTarget2D*                            WaterMaskTexture;                                         // 0x0640(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0648(0x0018) MISSED OFFSET
	TArray<UMaterialInterface*>                        OriginalMaterials;                                        // 0x0660(0x0010) (ZeroConstructor, Transient)
	TArray<FFlatWaterMeshTextureOverride>              TextureOverrides;                                         // 0x0670(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0680(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FlatWaterMeshComponent"));
		return ptr;
	}


	void UpdateBoundary(AActor* BoundaryActor);
	void SetTexture(int MaterialIndex, const FName& Name, UTexture* Texture);
	void SetScalarValue(int MaterialIndex, const FName& Name, float Value);
	void PlaceDrop(const FVector2D& Position, float Size, float Height);
	void CreateBoundaryMap(AActor* BoundaryActor, float ZNearDistance, float ZFarDistance, int TextureSize);
};


// Class Engine.InstancedCoverageMeshComponent
// 0x0090 (0x0680 - 0x05F0)
class UInstancedCoverageMeshComponent : public UStaticMeshComponent
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>         CoveredMeshComponent;                                     // 0x05F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                InstanceCount;                                            // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstancingRandomSeed;                                     // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InstancePositionExtrusion;                                // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InstanceScale;                                            // 0x0604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InstanceScaleVariance;                                    // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FRotator                                           InstanceRotation;                                         // 0x060C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FRotator                                           InstanceRotationVariance;                                 // 0x0618(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            InstanceAttractionDirection;                              // 0x0624(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InstanceAttractionIntensity;                              // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstanceBaseMeshPlacementLOD;                             // 0x0634(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<FInstancedCoverageMeshLOD>                  LODs;                                                     // 0x0638(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              CompleteCullingDistance;                                  // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InstanceLODPreserveSilhouette;                            // 0x064C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x064D(0x0003) MISSED OFFSET
	float                                              BackFaceCullingAngle;                                     // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBackFaceCullingAngle;                               // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxPlacementAttempts;                                     // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEvenlySpaced;                                            // 0x065C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bVertexColourDensity;                                     // 0x065D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUpdatePlacement;                                         // 0x065E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x065F(0x0001) MISSED OFFSET
	TArray<float>                                      RandomNumbers;                                            // 0x0660(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              BaseMeshSurfaceArea;                                      // 0x0670(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0674(0x0004) MISSED OFFSET
	UStaticMesh*                                       CoveredMesh;                                              // 0x0678(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedCoverageMeshComponent"));
		return ptr;
	}


	void SetBaseMeshComponent(UStaticMeshComponent* BaseMeshComponent);
	UStaticMeshComponent* BaseMeshComponent();
};


// Class Engine.MergedStaticMeshComponent
// 0x0020 (0x0610 - 0x05F0)
class UMergedStaticMeshComponent : public UStaticMeshComponent
{
public:
	bool                                               bDisplayMergedInEditor;                                   // 0x05F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05F1(0x0007) MISSED OFFSET
	TArray<float>                                      LODScreenSizes;                                           // 0x05F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                LODForCollision;                                          // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMergeVertexColours;                                      // 0x060C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x060D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MergedStaticMeshComponent"));
		return ptr;
	}

};


// Class Engine.MobileInstancedStaticMeshComponent
// 0x0080 (0x0670 - 0x05F0)
class UMobileInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	int                                                MaxInstances;                                             // 0x05F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x05F4(0x000C) MISSED OFFSET
	TArray<FTransform>                                 InstanceTransforms;                                       // 0x0600(0x0010) (ZeroConstructor)
	TArray<FMatrix>                                    InstanceMatrices;                                         // 0x0610(0x0010) (ZeroConstructor)
	FBoxSphereBounds                                   LocalBounds;                                              // 0x0620(0x001C) (ZeroConstructor, IsPlainOldData)
	bool                                               bBoundsBuilt;                                             // 0x063C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x063D(0x0003) MISSED OFFSET
	UPhysicsSerializer*                                PhysicsSerializer;                                        // 0x0640(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0648(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MobileInstancedStaticMeshComponent"));
		return ptr;
	}


	int AddInstance(const FTransform& Transform);
};


// Class Engine.SplineMeshComponent
// 0x00A0 (0x0690 - 0x05F0)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x05F0(0x0008) MISSED OFFSET
	FSplineMeshParams                                  SplineParams;                                             // 0x05F8(0x0058) (Edit)
	FVector                                            SplineUpDir;                                              // 0x0650(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                       // 0x065C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x065C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x065D(0x0003) MISSED OFFSET
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0660(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0661(0x0003) MISSED OFFSET
	float                                              SplineBoundaryMin;                                        // 0x0664(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0668(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	UBodySetup*                                        BodySetup;                                                // 0x0670(0x0008) (ZeroConstructor, IsPlainOldData)
	FGuid                                              CachedMeshBodySetupGuid;                                  // 0x0678(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMeshDirty : 1;                                           // 0x0688(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0689(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SplineMeshComponent"));
		return ptr;
	}


	void UpdateMesh();
	void SetStartTangent(const FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const FVector& StartPos, const FVector& StartTangent, const FVector& EndPos, const FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	FVector GetStartTangent();
	FVector2D GetStartScale();
	float GetStartRoll();
	FVector GetStartPosition();
	FVector2D GetStartOffset();
	FVector GetSplineUpDir();
	TEnumAsByte<ESplineMeshAxis> GetForwardAxis();
	FVector GetEndTangent();
	FVector2D GetEndScale();
	float GetEndRoll();
	FVector GetEndPosition();
	FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};


// Class Engine.ModelComponent
// 0x0040 (0x05D0 - 0x0590)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET
	UBodySetup*                                        ModelBodySetup;                                           // 0x05A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x05A8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ModelComponent"));
		return ptr;
	}

};


// Class Engine.NavLinkRenderingComponent
// 0x0000 (0x0590 - 0x0590)
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkRenderingComponent"));
		return ptr;
	}

};


// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x0590 - 0x0590)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavMeshRenderingComponent"));
		return ptr;
	}

};


// Class Engine.NavTestRenderingComponent
// 0x0000 (0x0590 - 0x0590)
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavTestRenderingComponent"));
		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0010 (0x05C0 - 0x05B0)
class UBoxComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BoxComponent"));
		return ptr;
	}


	void SetBoxExtent(const FVector& InBoxExtent, bool bUpdateOverlaps);
	FVector GetUnscaledBoxExtent();
	FVector GetScaledBoxExtent();
};


// Class Engine.SphereComponent
// 0x0000 (0x05B0 - 0x05B0)
class USphereComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SphereComponent"));
		return ptr;
	}


	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};


// Class Engine.DrawSphereComponent
// 0x0000 (0x05B0 - 0x05B0)
class UDrawSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DrawSphereComponent"));
		return ptr;
	}

};


// Class Engine.EllipsoidComponent
// 0x0000 (0x05B0 - 0x05B0)
class UEllipsoidComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EllipsoidComponent"));
		return ptr;
	}

};


// Class Engine.TextRenderComponent
// 0x0060 (0x05F0 - 0x0590)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0590(0x0030) MISSED OFFSET
	UMaterialInterface*                                TextMaterial;                                             // 0x05C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UFont*                                             Font;                                                     // 0x05C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                      // 0x05D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                        // 0x05D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x05D2(0x0002) MISSED OFFSET
	FColor                                             TextRenderColor;                                          // 0x05D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              XScale;                                                   // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YScale;                                                   // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldSize;                                                // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x05E4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                                  // 0x05EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x05ED(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextRenderComponent"));
		return ptr;
	}


	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetTextRenderColor(const FColor& Value);
	void SetTextMaterial(UMaterialInterface* Material);
	void SetText(const FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);
	void SetFont(UFont* Value);
	void K2_SetText(const FText& Value);
	FVector GetTextWorldSize();
	FVector GetTextLocalSize();
};


// Class Engine.VectorFieldComponent
// 0x0020 (0x05B0 - 0x0590)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	float                                              Intensity;                                                // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                                  // 0x0598(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0599(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VectorFieldComponent"));
		return ptr;
	}


	void SetIntensity(float NewIntensity);
};


// Class Engine.RadialForceComponent
// 0x0030 (0x02E0 - 0x02B0)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                  // 0x02B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B5(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                                    // 0x02BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor : 1;                                   // 0x02BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02BD(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                            // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                      // 0x02C8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RadialForceComponent"));
		return ptr;
	}


	void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
};


// Class Engine.ReflectionCaptureComponent
// 0x0090 (0x0340 - 0x02B0)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	bool                                               bLockSettings;                                            // 0x02B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	float                                              Brightness;                                               // 0x02B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBrightness;                                         // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LPVOcclusionBrightness;                                   // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       ReflectionTint;                                           // 0x02C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x02D0(0x000C) MISSED OFFSET
	FGuid                                              StateId;                                                  // 0x02DC(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x54];                                      // 0x02EC(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ReflectionCaptureComponent"));
		return ptr;
	}


	void UpdateReflectionCapture();
	void UpdateAllReflectionCaptures();
	void SetTint(const FLinearColor& Value);
	void SetShadowBrightness(float Value);
	void SetLPVOcclusionBrightness(float Value);
	void SetBrightness(float Value);
};


// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (0x0360 - 0x0340)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                    // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	UBoxComponent*                                     PreviewInfluenceBox;                                      // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UBoxComponent*                                     PreviewCaptureBox;                                        // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BoxReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (0x0360 - 0x0340)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                     // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	UDrawSphereComponent*                              PreviewInfluenceRadius;                                   // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UBoxComponent*                                     PreviewCaptureBox;                                        // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlaneReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0350 - 0x0340)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                          // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CaptureDistanceScale;                                     // 0x0344(0x0004) (ZeroConstructor, IsPlainOldData)
	UDrawSphereComponent*                              PreviewInfluenceRadius;                                   // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SphereReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.SceneCaptureComponent
// 0x0070 (0x0320 - 0x02B0)
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                         // 0x02B0(0x0010) (ExportObject, ZeroConstructor)
	bool                                               bCaptureEveryFrame;                                       // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C1(0x0003) MISSED OFFSET
	float                                              MaxViewDistanceOverride;                                  // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<FEngineShowFlagsSetting>                    ShowFlagSettings;                                         // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x48];                                      // 0x02D8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCaptureComponent"));
		return ptr;
	}


	void HideComponent(UPrimitiveComponent* InComponent);
	void HideActorComponents(AActor* InActor);
};


// Class Engine.SceneCaptureComponent2D
// 0x0570 (0x0890 - 0x0320)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	UTextureRenderTarget2D*                            TextureTarget;                                            // 0x0320(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                            // 0x0328(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0329(0x0007) MISSED OFFSET
	FPostProcessSettings                               PostProcessSettings;                                      // 0x0330(0x0540) (Edit, BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x0870(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x0878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x087C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x0880(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0881(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x0884(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x0888(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0889(0x0003) MISSED OFFSET
	int                                                LandscapeLODOverride;                                     // 0x088C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCaptureComponent2D"));
		return ptr;
	}


	void UpdateContent();
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.SceneCaptureComponentCube
// 0x0000 (0x0320 - 0x0320)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SceneCaptureComponentCube"));
		return ptr;
	}


	void UpdateContent();
};


// Class Engine.SpringArmComponent
// 0x0090 (0x0340 - 0x02B0)
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                          // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            SocketOffset;                                             // 0x02B4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            TargetOffset;                                             // 0x02C0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProbeSize;                                                // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                             // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest : 1;                                     // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritPitch : 1;                                        // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritYaw : 1;                                          // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritRoll : 1;                                         // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraLag : 1;                                     // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag : 1;                             // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping : 1;                             // 0x02D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                 // 0x02D5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x2];                                       // 0x02D6(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                           // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                                      // 0x02E8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SpringArmComponent"));
		return ptr;
	}

};


// Class Engine.WaterEmissionVolumeComponent
// 0x0030 (0x02E0 - 0x02B0)
class UWaterEmissionVolumeComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02B0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GenerationDensity;                                        // 0x02B4(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x02B8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WaterEmissionVolumeComponent"));
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x02D0 - 0x02B0)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                 // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGustAmount;                                            // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WindDirectionalSourceComponent"));
		return ptr;
	}

};


// Class Engine.TimelineComponent
// 0x0098 (0x0160 - 0x00C8)
class UTimelineComponent : public UActorComponent
{
public:
	FTimeline                                          TheTimeline;                                              // 0x00C8(0x0098) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TimelineComponent"));
		return ptr;
	}


	void Stop();
	void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
};


// Class Engine.AggregatableInterface
// 0x0000 (0x0028 - 0x0028)
class UAggregatableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AggregatableInterface"));
		return ptr;
	}

};


// Class Engine.AnimComposite
// 0x0010 (0x0088 - 0x0078)
class UAnimComposite : public UAnimCompositeBase
{
public:
	FAnimTrack                                         AnimationTrack;                                           // 0x0078(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimComposite"));
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00E0 (0x0158 - 0x0078)
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable;                                  // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0090(0x0010) MISSED OFFSET
	TArray<FTranslationTrack>                          TranslationData;                                          // 0x00A0(0x0010) (ZeroConstructor, Transient)
	TArray<FRotationTrack>                             RotationData;                                             // 0x00B0(0x0010) (ZeroConstructor, Transient)
	TArray<FScaleTrack>                                ScaleData;                                                // 0x00C0(0x0010) (ZeroConstructor, Transient)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x00D0(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x00D1(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x00D2(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x00D3(0x0005) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                                   // 0x00D8(0x0010) (ZeroConstructor)
	FCompressedOffsetData                              CompressedScaleOffsets;                                   // 0x00E8(0x0018)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	TEnumAsByte<EAnimationKeyFormat>                   KeyEncodingFormat;                                        // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1F];                                      // 0x0111(0x001F) MISSED OFFSET
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                         // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                              // 0x0131(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0132(0x0006) MISSED OFFSET
	UAnimSequence*                                     RefPoseSeq;                                               // 0x0138(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RefFrameIndex;                                            // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EncodingPkgVersion;                                       // 0x0144(0x0004) (ZeroConstructor, IsPlainOldData)
	FName                                              RetargetSource;                                           // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRootMotionSettingsCopiedFromMontage;                     // 0x0152(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x5];                                       // 0x0153(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimSequence"));
		return ptr;
	}

};


// Class Engine.BlendSpaceBase
// 0x00B8 (0x0108 - 0x0050)
class UBlendSpaceBase : public UAnimationAsset
{
public:
	FBlendParameter                                    BlendParameters[0x3];                                     // 0x0050(0x0020)
	FInterpolationParameter                            InterpolationParam[0x3];                                  // 0x00B0(0x0008) (Edit)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                        // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRotationBlendInMeshSpace;                                // 0x00CD(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00CE(0x0002) MISSED OFFSET
	int                                                NumOfDimension;                                           // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x00D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FPerBoneInterpolation>                      PerBoneBlend;                                             // 0x00D8(0x0010) (Edit, ZeroConstructor)
	TArray<FBlendSample>                               SampleData;                                               // 0x00E8(0x0010) (ZeroConstructor)
	TArray<FEditorElement>                             GridSamples;                                              // 0x00F8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlendSpaceBase"));
		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0008 (0x0110 - 0x0108)
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                     // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlendSpace"));
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x0110 - 0x0110)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AimOffsetBlendSpace"));
		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x0110 - 0x0108)
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                          // 0x0108(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BlendSpace1D"));
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x0110 - 0x0110)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AimOffsetBlendSpace1D"));
		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0018 (0x0040 - 0x0028)
class UAnimCompress : public UObject
{
public:
	FString                                            Description;                                              // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      bNeedsSkeleton : 1;                                       // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x003C(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x003D(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x003E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x003F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress"));
		return ptr;
	}

};


// Class Engine.AnimCompress_Automatic
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                          // 0x0044(0x0001) (Edit)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;                       // 0x0044(0x0001) (Edit)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;                      // 0x0044(0x0001) (Edit)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                               // 0x0044(0x0001) (Edit)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                         // 0x0044(0x0001) (Edit)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                  // 0x0044(0x0001) (Edit)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                             // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_Automatic"));
		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_BitwiseCompressOnly"));
		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_LeastDestructive"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                                    // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_RemoveEverySecondKey"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0060 - 0x0040)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                            // 0x005C(0x0001) (Edit)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                            // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_RemoveLinearKeys"));
		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (0x00E0 - 0x0060)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats;                                      // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                                       // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                                    // 0x00AC(0x0001) (Edit)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                          // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                                   // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x00D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_PerTrackCompression"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0050 - 0x0040)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimCompress_RemoveTrivialKeys"));
		return ptr;
	}

};


// Class Engine.AnimSingleNodeInstance
// 0x00E0 (0x0520 - 0x0440)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	UAnimationAsset*                                   CurrentAsset;                                             // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UVertexAnimation*                                  CurrentVertexAnim;                                        // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	FVector                                            BlendSpaceInput;                                          // 0x0450(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	TArray<FBlendSampleData>                           BlendSampleData;                                          // 0x0460(0x0010) (ZeroConstructor, Transient)
	FBlendFilter                                       BlendFilter;                                              // 0x0470(0x0090) (Transient)
	float                                              CurrentTime;                                              // 0x0500(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0504(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	FScriptDelegate                                    PostEvaluateAnimEvent;                                    // 0x0508(0x0010) (ZeroConstructor, Transient, InstancedReference)
	unsigned char                                      bLooping : 1;                                             // 0x0518(0x0001) (Transient)
	unsigned char                                      bPlaying : 1;                                             // 0x0518(0x0001) (Transient)
	unsigned char                                      bReverse : 1;                                             // 0x0518(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0519(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimSingleNodeInstance"));
		return ptr;
	}


	void StopAnim();
	void SetVertexAnimation(UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate);
	void SetReverse(bool bInReverse);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const FVector& InBlendInput);
	void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
};


// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimMetaData"));
		return ptr;
	}

};


// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotify_ResetDynamics"));
		return ptr;
	}

};


// Class Engine.AnimNotifyCondition
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyCondition : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotifyCondition"));
		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0028 (0x0050 - 0x0028)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	UParticleSystem*                                   PSTemplate;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FName                                              FirstSocketName;                                          // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FName                                              SecondSocketName;                                         // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                           // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	FName                                              WidthScaleCurve;                                          // 0x0044(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimNotifyState_Trail"));
		return ptr;
	}


	UParticleSystem* OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);
};


// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                    // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<FName>                                      TrackBoneNames;                                           // 0x0030(0x0010) (ZeroConstructor)
	TArray<FAnimSetMeshLinkup>                         LinkupCache;                                              // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<FName>                                      UseTranslationBoneNames;                                  // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<FName>                                      ForceMeshTranslationBoneNames;                            // 0x0080(0x0010) (Edit, ZeroConstructor)
	FName                                              PreviewSkelMeshName;                                      // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	FName                                              BestRatioSkelMeshName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimSet"));
		return ptr;
	}

};


// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AssetImportData"));
		return ptr;
	}

};


// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AssetUserData"));
		return ptr;
	}

};


// Class Engine.AutomationTestSettings
// 0x02E0 (0x0308 - 0x0028)
class UAutomationTestSettings : public UObject
{
public:
	FFilePath                                          AutomationTestmap;                                        // 0x0028(0x0010) (Edit, Config)
	TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps;                                // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	FBuildPromotionTestSettings                        BuildPromotionTest;                                       // 0x0048(0x0210) (Edit, Config)
	FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest;                              // 0x0258(0x0030) (Edit, Config)
	FParticleEditorPromotionSettings                   ParticleEditorPromotionTest;                              // 0x0288(0x0010) (Edit, Config)
	TArray<FString>                                    EngineTestModules;                                        // 0x0298(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FString>                                    EditorTestModules;                                        // 0x02A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FString>                                    TestLevelFolders;                                         // 0x02B8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FOpenTestAsset>                             TestAssetsToOpen;                                         // 0x02C8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FExternalToolDefinition>                    ExternalTools;                                            // 0x02D8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions;                              // 0x02E8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FLaunchOnTestSettings>                      LaunchOnSettings;                                         // 0x02F8(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AutomationTestSettings"));
		return ptr;
	}

};


// Class Engine.AutomationTestUserSettings
// 0x0030 (0x0058 - 0x0028)
class UAutomationTestUserSettings : public UObject
{
public:
	bool                                               FilterTests;                                              // 0x0028(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<FString>                                    IncludedTestsPrefix;                                      // 0x0030(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FString>                                    ExcludedTestsPrefix;                                      // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               IncludeEpicTests;                                         // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AutomationTestUserSettings"));
		return ptr;
	}

};


// Class Engine.AvoidanceManager
// 0x00A0 (0x00C8 - 0x0028)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0048(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AvoidanceManager"));
		return ptr;
	}


	bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	FVector GetAvoidanceVelocityIgnoringUID(const FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp);
	FVector GetAvoidanceVelocity(const FNavAvoidanceData& AvoidanceData, float DeltaTime);
};


// Class Engine.AnimBlueprint
// 0x0028 (0x0100 - 0x00D8)
class UAnimBlueprint : public UBlueprint
{
public:
	USkeleton*                                         TargetSkeleton;                                           // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FAnimGroupInfo>                             Groups;                                                   // 0x00E0(0x0010) (ZeroConstructor)
	TArray<FName>                                      SkeletonSlotNames;                                        // 0x00F0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimBlueprint"));
		return ptr;
	}

};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x00D8 - 0x00D8)
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelScriptBlueprint"));
		return ptr;
	}

};


// Class Engine.DataTable
// 0x0058 (0x0080 - 0x0028)
class UDataTable : public UObject
{
public:
	UScriptStruct*                                     RowStruct;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DataTable"));
		return ptr;
	}

};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DataTableFunctionLibrary"));
		return ptr;
	}


	static void GetDataTableRowNames(UDataTable* Table, TArray<FName>* OutRowNames);
	static bool GetDataTableRowFromName(UDataTable* Table, const FName& RowName, FTableRowBase* OutRow);
	static void EvaluateCurveTableRow(UCurveTable* CurveTable, const FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY);
};


// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DebugDrawService"));
		return ptr;
	}

};


// Class Engine.DeformablesBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDeformablesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DeformablesBlueprintFunctionLibrary"));
		return ptr;
	}


	static void ApplyWorldForceToDeformables(USkinnedMeshComponent* SkinnedMeshComp, const FVector& WorldSpaceForce);
};


// Class Engine.FeatureConfigBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFeatureConfigBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FeatureConfigBlueprintFunctionLibrary"));
		return ptr;
	}


	static bool IsFeatureEnabled(const FName& FeatureName);
};


// Class Engine.DialogueTypes
// 0x0000 (0x0028 - 0x0028)
class UDialogueTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DialogueTypes"));
		return ptr;
	}

};


// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GameplayStatics"));
		return ptr;
	}


	static void UnloadStreamLevel(UObject* WorldContextObject, const FName& LevelName, const FLatentActionInfo& LatentInfo);
	static UAudioComponent* SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static UAudioComponent* SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static UAudioComponent* SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	static UObject* SpawnObject(UClass* ObjectClass, UObject* Outer);
	static UParticleSystemComponent* SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	static UParticleSystemComponent* SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, const FVector& Location, const FRotator& Rotation, bool bAutoDestroy);
	static UAudioComponent* SpawnDialogueAttached(UDialogueWave* Dialogue, const FDialogueContext& Context, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static UAudioComponent* SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static UAudioComponent* SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	static UDecalComponent* SpawnDecalAttached(UMaterialInterface* DecalMaterial, const FVector& DecalSize, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan);
	static UDecalComponent* SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& DecalSize, const FVector& Location, const FRotator& Rotation, float LifeSpan);
	static void SetWorldOriginLocation(UObject* WorldContextObject, const FIntVector& NewLocation);
	static void SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation);
	static bool SetGamePaused(UObject* WorldContextObject, bool bPaused);
	static void SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix);
	static bool SaveGameToSlot(USaveGame* SaveGameObject, const FString& SlotName, int UserIndex);
	static void RemovePlayer(APlayerController* Player, bool bDestroyPawn);
	static void PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);
	static bool ProjectWorldToScreen(APlayerController* Player, const FVector& WorldPosition, FVector2D* ScreenPosition);
	static void PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);
	static void PlayWorldCameraShake(UObject* WorldContextObject, UClass* Shake, const FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	static void PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static void PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	static void PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
	static void PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	static FString ParseOption(const FString& Options, const FString& Key);
	static void OpenLevel(UObject* WorldContextObject, const FName& LevelName, bool bAbsolute, const FString& Options);
	static void LoadStreamLevel(UObject* WorldContextObject, const FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const FLatentActionInfo& LatentInfo);
	static USaveGame* LoadGameFromSlot(const FString& SlotName, int UserIndex);
	static bool IsGamePaused(UObject* WorldContextObject);
	static bool HasOption(const FString& Options, const FString& InKey);
	static int GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, const FVector& CenterPosition, float Radius);
	static FIntVector GetWorldOriginLocation(UObject* WorldContextObject);
	static float GetWorldDeltaSeconds(UObject* WorldContextObject);
	static TEnumAsByte<EPhysicalSurface> GetSurfaceType(const FHitResult& Hit);
	static ULevelStreaming* GetStreamingLevel(UObject* WorldContextObject, const FName& PackageName);
	static float GetRealTimeSeconds(UObject* WorldContextObject);
	static APawn* GetPlayerPawn(UObject* WorldContextObject, int PlayerIndex);
	static APlayerController* GetPlayerController(UObject* WorldContextObject, int PlayerIndex);
	static ACharacter* GetPlayerCharacter(UObject* WorldContextObject, int PlayerIndex);
	static APlayerCameraManager* GetPlayerCameraManager(UObject* WorldContextObject, int PlayerIndex);
	static FString GetPlatformName();
	static UClass* GetObjectClass(UObject* Object);
	static void GetKeyValue(const FString& Pair, FString* Key, FString* Value);
	static int GetIntOption(const FString& Options, const FString& Key, int DefaultValue);
	static float GetGlobalTimeDilation(UObject* WorldContextObject);
	static AGameState* GetGameState(UObject* WorldContextObject);
	static AGameMode* GetGameMode(UObject* WorldContextObject);
	static UGameInstance* GetGameInstance(UObject* WorldContextObject);
	static FString GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString);
	static float GetAudioTimeSeconds(UObject* WorldContextObject);
	static void GetAllActorsWithInterface(UObject* WorldContextObject, UClass* Interface, TArray<AActor*>* OutActors);
	static void GetAllActorsOfClass(UObject* WorldContextObject, UClass* ActorClass, TArray<AActor*>* OutActors);
	static void GetActorArrayBounds(TArray<AActor*> Actors, bool bOnlyCollidingComponents, FVector* Center, FVector* BoxExtent);
	static FVector GetActorArrayAverageLocation(TArray<AActor*> Actors);
	static void GetAccurateRealTime(UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	static void FlushLevelStreaming(UObject* WorldContextObject);
	static AActor* FinishSpawningActor(AActor* Actor, const FTransform& SpawnTransform);
	static void EnableLiveStreaming(bool Enable);
	static bool DoesSaveGameExist(const FString& SlotName, int UserIndex);
	static bool DeprojectScreenToWorld(APlayerController* Player, const FVector2D& ScreenPosition, FVector* WorldPosition, FVector* WorldDirection);
	static bool DeleteGameInSlot(const FString& SlotName, int UserIndex);
	static void DeactivateReverbEffect(UObject* WorldContextObject, const FName& TagName);
	static USaveGame* CreateSaveGameObjectFromBlueprint(UBlueprint* SaveGameBlueprint);
	static USaveGame* CreateSaveGameObject(UClass* SaveGameClass);
	static APlayerController* CreatePlayer(UObject* WorldContextObject, int ControllerId, bool bSpawnPawn);
	static void ClearSoundMixModifiers(UObject* WorldContextObject);
	static void BreakHitResult(const FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, FVector* Location, FVector* ImpactPoint, FVector* Normal, FVector* ImpactNormal, UPhysicalMaterial** PhysMat, AActor** HitActor, UPrimitiveComponent** HitComponent, FName* HitBoneName, int* HitItem, FVector* TraceStart, FVector* TraceEnd);
	static bool BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, const FVector& StartLocation, const FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, FVector* TossVelocity);
	static AActor* BeginSpawningActorFromClass(UObject* WorldContextObject, UClass* ActorClass, const FTransform& SpawnTransform, bool bNoCollisionFail, AActor* Owner);
	static AActor* BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, const FTransform& SpawnTransform, bool bNoCollisionFail);
	static AActor* BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, UClass* ActorClass, const FTransform& SpawnTransform, TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, AActor* Owner);
	static bool AreAnyListenersWithinRange(UObject* WorldContextObject, const FVector& Location, float MaximumRange);
	static bool ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);
	static bool ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, const FVector& Origin, float DamageRadius, UClass* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);
	static void ApplyPointDamage(AActor* DamagedActor, float BaseDamage, const FVector& HitFromDirection, const FHitResult& HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass);
	static void ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass);
	static void ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, const FName& TagName, float Priority, float Volume, float FadeTime);
};


// Class Engine.GPUSortDestData
// 0x0008 (0x0030 - 0x0028)
class UGPUSortDestData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GPUSortDestData"));
		return ptr;
	}

};


// Class Engine.GPUSortTestLibrary
// 0x0000 (0x0028 - 0x0028)
class UGPUSortTestLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GPUSortTestLibrary"));
		return ptr;
	}


	static bool ValidateGPUTransposeForSize(UObject* WorldContext, UGPUSortDestData* TestData);
	static bool ValidateGPUSortForSize(UObject* WorldContext, UGPUSortDestData* TestData);
	static UGPUSortDestData* TestGPUTransposeForSize(UObject* WorldContext, int Size);
	static UGPUSortDestData* TestGPUSortForSize(UObject* WorldContext, int Size);
};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetArrayLibrary"));
		return ptr;
	}


	static void SetArrayPropertyByName(UObject* Object, const FName& PropertyName, TArray<int> Value);
	static void FilterArray(TArray<AActor*> TargetArray, UClass* FilterClass, TArray<AActor*>* FilteredArray);
	static void Array_Shuffle(TArray<int> TargetArray);
	static void Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	static void Array_Resize(TArray<int> TargetArray, int Size);
	static bool Array_RemoveItem(TArray<int> TargetArray, int Item);
	static void Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	static int Array_Length(TArray<int> TargetArray);
	static int Array_LastIndex(TArray<int> TargetArray);
	static void Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	static void Array_Get(TArray<int> TargetArray, int Index, int* Item);
	static int Array_Find(TArray<int> TargetArray, int ItemToFind);
	static bool Array_Contains(TArray<int> TargetArray, int ItemToFind);
	static void Array_Clear(TArray<int> TargetArray);
	static void Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	static int Array_AddUnique(TArray<int> TargetArray, int NewItem);
	static int Array_Add(TArray<int> TargetArray, int NewItem);
};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetGuidLibrary"));
		return ptr;
	}


	static void Parse_StringToGuid(const FString& GuidString, FGuid* OutGuid, bool* Success);
	static bool NotEqual_GuidGuid(const FGuid& A, const FGuid& B);
	static FGuid NewGuid();
	static bool IsValid_Guid(const FGuid& InGuid);
	static void Invalidate_Guid(FGuid* InGuid);
	static bool EqualEqual_GuidGuid(const FGuid& A, const FGuid& B);
	static FString Conv_GuidToString(const FGuid& InGuid);
};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetInputLibrary"));
		return ptr;
	}


	static bool PointerEvent_IsTouchEvent(const FPointerEvent& Input);
	static bool PointerEvent_IsMouseButtonDown(const FPointerEvent& Input, const FKey& MouseButton);
	static float PointerEvent_GetWheelDelta(const FPointerEvent& Input);
	static int PointerEvent_GetUserIndex(const FPointerEvent& Input);
	static int PointerEvent_GetTouchpadIndex(const FPointerEvent& Input);
	static FVector2D PointerEvent_GetScreenSpacePosition(const FPointerEvent& Input);
	static int PointerEvent_GetPointerIndex(const FPointerEvent& Input);
	static FVector2D PointerEvent_GetLastScreenSpacePosition(const FPointerEvent& Input);
	static FVector2D PointerEvent_GetGestureDelta(const FPointerEvent& Input);
	static FKey PointerEvent_GetEffectingButton(const FPointerEvent& Input);
	static FVector2D PointerEvent_GetCursorDelta(const FPointerEvent& Input);
	static bool Key_IsVectorAxis(const FKey& Key);
	static bool Key_IsMouseButton(const FKey& Key);
	static bool Key_IsModifierKey(const FKey& Key);
	static bool Key_IsKeyboardKey(const FKey& Key);
	static bool Key_IsGamepadKey(const FKey& Key);
	static bool Key_IsFloatAxis(const FKey& Key);
	static FText Key_GetDisplayName(const FKey& Key);
	static bool InputEvent_IsShiftDown(const FInputEvent& Input);
	static bool InputEvent_IsRightShiftDown(const FInputEvent& Input);
	static bool InputEvent_IsRightControlDown(const FInputEvent& Input);
	static bool InputEvent_IsRightCommandDown(const FInputEvent& Input);
	static bool InputEvent_IsRightAltDown(const FInputEvent& Input);
	static bool InputEvent_IsRepeat(const FInputEvent& Input);
	static bool InputEvent_IsLeftShiftDown(const FInputEvent& Input);
	static bool InputEvent_IsLeftControlDown(const FInputEvent& Input);
	static bool InputEvent_IsLeftCommandDown(const FInputEvent& Input);
	static bool InputEvent_IsLeftAltDown(const FInputEvent& Input);
	static bool InputEvent_IsControlDown(const FInputEvent& Input);
	static bool InputEvent_IsCommandDown(const FInputEvent& Input);
	static bool InputEvent_IsAltDown(const FInputEvent& Input);
	static int GetUserIndex(const FKeyEvent& Input);
	static FKey GetKey(const FKeyEvent& Input);
	static float GetAnalogValue(const FAnalogInputEvent& Input);
	static bool EqualEqual_KeyKey(const FKey& A, const FKey& B);
	static int ControllerEvent_GetUserIndex(const FControllerEvent& Input);
	static FKey ControllerEvent_GetEffectingButton(const FControllerEvent& Input);
	static float ControllerEvent_GetAnalogValue(const FControllerEvent& Input);
	static void CalibrateTilt();
};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetMaterialLibrary"));
		return ptr;
	}


	static void SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName, const FLinearColor& ParameterValue);
	static void SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName, float ParameterValue);
	static FLinearColor GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName);
	static float GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName);
	static UMaterialInstanceDynamic* CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent);
};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetMathLibrary"));
		return ptr;
	}


	static int Xor_IntInt(int A, int B);
	static float VSizeSquared(const FVector& A);
	static float VSize2DSquared(const FVector2D& A);
	static float VSize2D(const FVector2D& A);
	static float VSize(const FVector& A);
	static FVector VLerp(const FVector& A, const FVector& B, float Alpha);
	static FVector VInterpTo_Constant(const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed);
	static FVector VInterpTo(const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed);
	static FVector2D Vector2DInterpTo_Constant(const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed);
	static FVector2D Vector2DInterpTo(const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed);
	static FVector VEase(const FVector& A, const FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	static FDateTime UtcNow();
	static FVector TransformLocation(const FTransform& T, const FVector& Location);
	static FVector TransformDirection(const FTransform& T, const FVector& Direction);
	static FDateTime Today();
	static FTransform TLerp(const FTransform& A, const FTransform& B, float Alpha);
	static FTransform TInterpTo(const FTransform& Current, const FTransform& Target, float DeltaTime, float InterpSpeed);
	static FTimespan TimespanZeroValue();
	static float TimespanRatio(const FTimespan& A, const FTimespan& B);
	static FTimespan TimespanMinValue();
	static FTimespan TimespanMaxValue();
	static bool TimespanFromString(const FString& TimespanString, FTimespan* Result);
	static FTransform TEase(const FTransform& A, const FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	static float Tan(float A);
	static FVector Subtract_VectorVector(const FVector& A, const FVector& B);
	static FVector Subtract_VectorInt(const FVector& A, int B);
	static FVector Subtract_VectorFloat(const FVector& A, float B);
	static FVector2D Subtract_Vector2DVector2D(const FVector2D& A, const FVector2D& B);
	static FVector2D Subtract_Vector2DFloat(const FVector2D& A, float B);
	static FTimespan Subtract_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static int Subtract_IntInt(int A, int B);
	static float Subtract_FloatFloat(float A, float B);
	static FDateTime Subtract_DateTimeTimespan(const FDateTime& A, const FTimespan& B);
	static FTimespan Subtract_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static unsigned char Subtract_ByteByte(unsigned char A, unsigned char B);
	static float Square(float A);
	static float Sqrt(float A);
	static float Sin(float A);
	static int SignOfInteger(int A);
	static float SignOfFloat(float A);
	static void SetRandomStreamSeed(int NewSeed, FRandomStream* Stream);
	static FVector SelectVector(const FVector& A, const FVector& B, bool bPickA);
	static FTransform SelectTransform(const FTransform& A, const FTransform& B, bool bPickA);
	static FString SelectString(const FString& A, const FString& B, bool bPickA);
	static FRotator SelectRotator(const FRotator& A, const FRotator& B, bool bPickA);
	static UObject* SelectObject(UObject* A, UObject* B, bool bSelectA);
	static int SelectInt(int A, int B, bool bPickA);
	static float SelectFloat(float A, float B, bool bPickA);
	static FLinearColor SelectColor(const FLinearColor& A, const FLinearColor& B, bool bPickA);
	static UClass* SelectClass(UClass* A, UClass* B, bool bSelectA);
	static void SeedRandomStream(FRandomStream* Stream);
	static int Round(float A);
	static FRotator RotatorFromAxisAndAngle(const FVector& Axis, float Angle);
	static FVector RotateAngleAxis(const FVector& InVect, float AngleDeg, const FVector& Axis);
	static FRotator RLerp(const FRotator& A, const FRotator& B, float Alpha, bool bShortestPath);
	static FRotator RInterpTo_Constant(const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed);
	static FRotator RInterpTo(const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed);
	static void RGBToHSV_Vector(const FLinearColor& RGB, FLinearColor* HSV);
	static void RGBToHSV(const FLinearColor& InColor, float* H, float* S, float* V, float* A);
	static void ResetRandomStream(const FRandomStream& Stream);
	static FRotator REase(const FRotator& A, const FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	static FVector RandomUnitVectorInConeWithYawAndPitch(const FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	static FVector RandomUnitVectorInCone(const FVector& ConeDir, float ConeHalfAngle);
	static FVector RandomUnitVectorFromStream(const FRandomStream& Stream);
	static FVector RandomUnitVector();
	static FRotator RandomRotatorFromStream(bool bRoll, const FRandomStream& Stream);
	static FRotator RandomRotator(bool bRoll);
	static FVector RandomPointInBoundingBox(const FVector& Origin, const FVector& BoxExtent);
	static int RandomIntegerInRangeFromStream(int Min, int Max, const FRandomStream& Stream);
	static int RandomIntegerInRange(int Min, int Max);
	static int RandomIntegerFromStream(int Max, const FRandomStream& Stream);
	static int RandomInteger(int Max);
	static float RandomFloatInRangeFromStream(float Min, float Max, const FRandomStream& Stream);
	static float RandomFloatInRange(float Min, float Max);
	static float RandomFloatFromStream(const FRandomStream& Stream);
	static float RandomFloat();
	static bool RandomBoolFromStream(const FRandomStream& Stream);
	static bool RandomBool();
	static float RadiansToDegrees(float A);
	static FVector ProjectVectorOnToVector(const FVector& V, const FVector& Target);
	static FVector ProjectVectorOnToPlane(const FVector& V, const FVector& PlaneNormal);
	static FVector ProjectPointOnToPlane(const FVector& Point, const FVector& PlaneBase, const FVector& PlaneNormal);
	static bool PointsAreCoplanar(TArray<FVector> Points, float Tolerance);
	static int Percent_IntInt(int A, int B);
	static float Percent_FloatFloat(float A, float B);
	static unsigned char Percent_ByteByte(unsigned char A, unsigned char B);
	static int Or_IntInt(int A, int B);
	static FDateTime Now();
	static bool NotEqual_VectorVector(const FVector& A, const FVector& B, float ErrorTolerance);
	static bool NotEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool NotEqual_RotatorRotator(const FRotator& A, const FRotator& B, float ErrorTolerance);
	static bool NotEqual_ObjectObject(UObject* A, UObject* B);
	static bool NotEqual_NameName(const FName& A, const FName& B);
	static bool NotEqual_IntInt(int A, int B);
	static bool NotEqual_FloatFloat(float A, float B);
	static bool NotEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool NotEqual_ClassClass(UClass* A, UClass* B);
	static bool NotEqual_ByteByte(unsigned char A, unsigned char B);
	static bool NotEqual_BoolBool(bool A, bool B);
	static bool Not_PreBool(bool A);
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);
	static FRotator NormalizedDeltaRotator(const FRotator& A, const FRotator& B);
	static float NormalizeAxis(float Angle);
	static FVector2D Normal2D(const FVector2D& A);
	static FVector Normal(const FVector& A);
	static FVector NegateVector(const FVector& A);
	static FRotator NegateRotator(const FRotator& A);
	static bool NearlyEqual_TransformTransform(const FTransform& A, const FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);
	static float MultiplyByPi(float Value);
	static FVector Multiply_VectorVector(const FVector& A, const FVector& B);
	static FVector Multiply_VectorInt(const FVector& A, int B);
	static FVector Multiply_VectorFloat(const FVector& A, float B);
	static FVector2D Multiply_Vector2DFloat(const FVector2D& A, float B);
	static FTimespan Multiply_TimespanFloat(const FTimespan& A, float Scalar);
	static FRotator Multiply_RotatorInt(const FRotator& A, int B);
	static FRotator Multiply_RotatorFloat(const FRotator& A, float B);
	static FLinearColor Multiply_LinearColorLinearColor(const FLinearColor& A, const FLinearColor& B);
	static FLinearColor Multiply_LinearColorFloat(const FLinearColor& A, float B);
	static int Multiply_IntInt(int A, int B);
	static float Multiply_IntFloat(int A, float B);
	static float Multiply_FloatFloat(float A, float B);
	static unsigned char Multiply_ByteByte(unsigned char A, unsigned char B);
	static FVector MirrorVectorByNormal(const FVector& InVect, const FVector& InNormal);
	static void MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	static void MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	static void MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	static void MinimumAreaRectangle(UObject* WorldContextObject, TArray<FVector> InVerts, const FVector& SampleSurfaceNormal, bool bDebugDraw, FVector* OutRectCenter, FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY);
	static int Min(int A, int B);
	static void MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	static void MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	static void MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	static int Max(int A, int B);
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	static FVector2D MakeVector2D(float X, float Y);
	static FVector MakeVector(float X, float Y, float Z);
	static FTransform MakeTransform(const FVector& Location, const FRotator& Rotation, const FVector& Scale);
	static FTimespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	static FRotator MakeRotFromZY(const FVector& Z, const FVector& Y);
	static FRotator MakeRotFromZX(const FVector& Z, const FVector& X);
	static FRotator MakeRotFromZ(const FVector& Z);
	static FRotator MakeRotFromYZ(const FVector& Y, const FVector& Z);
	static FRotator MakeRotFromYX(const FVector& Y, const FVector& X);
	static FRotator MakeRotFromY(const FVector& Y);
	static FRotator MakeRotFromXZ(const FVector& X, const FVector& Z);
	static FRotator MakeRotFromXY(const FVector& X, const FVector& Y);
	static FRotator MakeRotFromX(const FVector& X);
	static FRotator MakeRotator(float Roll, float Pitch, float Yaw);
	static FRotator MakeRotationFromAxes(const FVector& Forward, const FVector& Right, const FVector& Up);
	static FRandomStream MakeRandomStream(int InitialSeed);
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	static FDateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	static FLinearColor MakeColor(float R, float G, float B, float A);
	static float Loge(float A);
	static bool LinePlaneIntersection_OriginNormal(const FVector& LineStart, const FVector& LineEnd, const FVector& PlaneOrigin, const FVector& PlaneNormal, float* T, FVector* Intersection);
	static bool LinePlaneIntersection(const FVector& LineStart, const FVector& LineEnd, const FPlane& APlane, float* T, FVector* Intersection);
	static FLinearColor LinearColorLerpUsingHSV(const FLinearColor& A, const FLinearColor& B, float Alpha);
	static FLinearColor LinearColorLerp(const FLinearColor& A, const FLinearColor& B, float Alpha);
	static FVector LessLess_VectorRotator(const FVector& A, const FRotator& B);
	static bool LessEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool LessEqual_IntInt(int A, int B);
	static bool LessEqual_FloatFloat(float A, float B);
	static bool LessEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool LessEqual_ByteByte(unsigned char A, unsigned char B);
	static bool Less_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool Less_IntInt(int A, int B);
	static bool Less_FloatFloat(float A, float B);
	static bool Less_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool Less_ByteByte(unsigned char A, unsigned char B);
	static float Lerp(float A, float B, float Alpha);
	static bool IsPointInBox(const FVector& Point, const FBox& Box);
	static bool IsMorning(const FDateTime& A);
	static bool IsLeapYear(int Year);
	static bool IsAfternoon(const FDateTime& A);
	static FTransform InvertTransform(const FTransform& T);
	static FVector InverseTransformLocation(const FTransform& T, const FVector& Location);
	static FVector InverseTransformDirection(const FTransform& T, const FVector& Direction);
	static float InverseLerp(float A, float B, float Value);
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	static float Hypotenuse(float Width, float Height);
	static void HSVToRGB_Vector(const FLinearColor& HSV, FLinearColor* RGB);
	static FLinearColor HSVToRGB(float H, float S, float V, float A);
	static float GridSnap_Float(float Location, float GridSize);
	static FVector GreaterGreater_VectorRotator(const FVector& A, const FRotator& B);
	static bool GreaterEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool GreaterEqual_IntInt(int A, int B);
	static bool GreaterEqual_FloatFloat(float A, float B);
	static bool GreaterEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	static bool Greater_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool Greater_IntInt(int A, int B);
	static bool Greater_FloatFloat(float A, float B);
	static bool Greater_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool Greater_ByteByte(unsigned char A, unsigned char B);
	static int GetYear(const FDateTime& A);
	static void GetYawPitchFromVector(const FVector& InVec, float* Yaw, float* Pitch);
	static float GetYawFromVector(const FVector& InVec);
	static FVector GetVectorArrayAverage(TArray<FVector> Vectors);
	static FVector GetUpVector(const FRotator& InRot);
	static float GetTotalSeconds(const FTimespan& A);
	static float GetTotalMinutes(const FTimespan& A);
	static float GetTotalMilliseconds(const FTimespan& A);
	static float GetTotalHours(const FTimespan& A);
	static float GetTotalDays(const FTimespan& A);
	static FTimespan GetTimeOfDay(const FDateTime& A);
	static int GetSeconds(const FTimespan& A);
	static int GetSecond(const FDateTime& A);
	static FVector GetRightVector(const FRotator& InRot);
	static float GetPI();
	static int GetMonth(const FDateTime& A);
	static int GetMinutes(const FTimespan& A);
	static int GetMinute(const FDateTime& A);
	static float GetMinElement(const FVector& A);
	static int GetMilliseconds(const FTimespan& A);
	static int GetMillisecond(const FDateTime& A);
	static float GetMaxElement(const FVector& A);
	static int GetHours(const FTimespan& A);
	static int GetHour12(const FDateTime& A);
	static int GetHour(const FDateTime& A);
	static FVector GetForwardVector(const FRotator& InRot);
	static FTimespan GetDuration(const FTimespan& A);
	static FVector GetDirectionVector(const FVector& From, const FVector& To);
	static int GetDays(const FTimespan& A);
	static int GetDayOfYear(const FDateTime& A);
	static int GetDay(const FDateTime& A);
	static FDateTime GetDate(const FDateTime& A);
	static void GetAxes(const FRotator& A, FVector* X, FVector* Y, FVector* Z);
	static int FTrunc(float A);
	static FTimespan FromSeconds(float Seconds);
	static FTimespan FromMinutes(float Minutes);
	static FTimespan FromMilliseconds(float Milliseconds);
	static FTimespan FromHours(float Hours);
	static FTimespan FromDays(float Days);
	static float Fraction(float A);
	static int FMod(float Dividend, float Divisor, float* Remainder);
	static float FMin(float A, float B);
	static float FMax(float A, float B);
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	static FRotator FindLookAtRotation(const FVector& Start, const FVector& Target);
	static int FFloor(float A);
	static float FClamp(float Value, float Min, float Max);
	static int FCeil(float A);
	static float Exp(float A);
	static bool EqualEqual_VectorVector(const FVector& A, const FVector& B, float ErrorTolerance);
	static bool EqualEqual_TransformTransform(const FTransform& A, const FTransform& B);
	static bool EqualEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static bool EqualEqual_RotatorRotator(const FRotator& A, const FRotator& B, float ErrorTolerance);
	static bool EqualEqual_ObjectObject(UObject* A, UObject* B);
	static bool EqualEqual_NameName(const FName& A, const FName& B);
	static bool EqualEqual_IntInt(int A, int B);
	static bool EqualEqual_FloatFloat(float A, float B);
	static bool EqualEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B);
	static bool EqualEqual_ClassClass(UClass* A, UClass* B);
	static bool EqualEqual_ByteByte(unsigned char A, unsigned char B);
	static bool EqualEqual_BoolBool(bool A, bool B);
	static float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	static float DotProduct2D(const FVector2D& A, const FVector2D& B);
	static float Dot_VectorVector(const FVector& A, const FVector& B);
	static FVector Divide_VectorVector(const FVector& A, const FVector& B);
	static FVector Divide_VectorInt(const FVector& A, int B);
	static FVector Divide_VectorFloat(const FVector& A, float B);
	static FVector2D Divide_Vector2DFloat(const FVector2D& A, float B);
	static int Divide_IntInt(int A, int B);
	static float Divide_FloatFloat(float A, float B);
	static unsigned char Divide_ByteByte(unsigned char A, unsigned char B);
	static float DegTan(float A);
	static float DegSin(float A);
	static float DegreesToRadians(float A);
	static float DegCos(float A);
	static float DegAtan2(float A, float B);
	static float DegAtan(float A);
	static float DegAsin(float A);
	static float DegAcos(float A);
	static int DaysInYear(int Year);
	static int DaysInMonth(int Year, int Month);
	static FDateTime DateTimeMinValue();
	static FDateTime DateTimeMaxValue();
	static bool DateTimeFromString(const FString& DateTimeString, FDateTime* Result);
	static bool DateTimeFromIsoString(const FString& IsoString, FDateTime* Result);
	static float CrossProduct2D(const FVector2D& A, const FVector2D& B);
	static FVector Cross_VectorVector(const FVector& A, const FVector& B);
	static FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	static float Cos(float A);
	static FTransform ConvertTransformToRelative(const FTransform& Transform, const FTransform& ParentTransform);
	static FVector2D Conv_VectorToVector2D(const FVector& InVector);
	static FTransform Conv_VectorToTransform(const FVector& InLocation);
	static FRotator Conv_VectorToRotator(const FVector& InVec);
	static FLinearColor Conv_VectorToLinearColor(const FVector& InVec);
	static FVector Conv_Vector2DToVector(const FVector2D& InVector2D, float Z);
	static FVector Conv_RotatorToVector(const FRotator& InRot);
	static FVector Conv_LinearColorToVector(const FLinearColor& InLinearColor);
	static FColor Conv_LinearColorToColor(const FLinearColor& InLinearColor);
	static float Conv_IntToFloat(int InInt);
	static unsigned char Conv_IntToByte(int InInt);
	static bool Conv_IntToBool(int InInt);
	static FVector Conv_FloatToVector(float InFloat);
	static FLinearColor Conv_FloatToLinearColor(float InFloat);
	static FLinearColor Conv_ColorToLinearColor(const FColor& InColor);
	static int Conv_ByteToInt(unsigned char InByte);
	static float Conv_ByteToFloat(unsigned char InByte);
	static int Conv_BoolToInt(bool InBool);
	static float Conv_BoolToFloat(bool InBool);
	static unsigned char Conv_BoolToByte(bool InBool);
	static FTransform ComposeTransforms(const FTransform& A, const FTransform& B);
	static FRotator ComposeRotators(const FRotator& A, const FRotator& B);
	static bool ClassIsChildOf(UClass* TestClass, UClass* ParentClass);
	static FVector ClampVectorSize(const FVector& A, float Min, float Max);
	static float ClampAxis(float Angle);
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	static int Clamp(int Value, int Min, int Max);
	static FLinearColor CInterpTo(const FLinearColor& Current, const FLinearColor& Target, float DeltaTime, float InterpSpeed);
	static void BreakVector2D(const FVector2D& InVec, float* X, float* Y);
	static void BreakVector(const FVector& InVec, float* X, float* Y, float* Z);
	static void BreakTransform(const FTransform& InTransform, FVector* Location, FRotator* Rotation, FVector* Scale);
	static void BreakTimespan(const FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	static void BreakRotIntoAxes(const FRotator& InRot, FVector* X, FVector* Y, FVector* Z);
	static void BreakRotator(const FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	static void BreakRandomStream(const FRandomStream& InRandomStream, int* InitialSeed);
	static void BreakDateTime(const FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	static void BreakColor(const FLinearColor& InColor, float* R, float* G, float* B, float* A);
	static bool BooleanXOR(bool A, bool B);
	static bool BooleanOR(bool A, bool B);
	static bool BooleanNOR(bool A, bool B);
	static bool BooleanNAND(bool A, bool B);
	static bool BooleanAND(bool A, bool B);
	static float Atan2(float A, float B);
	static float Atan(float A);
	static float Asin(float A);
	static int And_IntInt(int A, int B);
	static FVector Add_VectorVector(const FVector& A, const FVector& B);
	static FVector Add_VectorInt(const FVector& A, int B);
	static FVector Add_VectorFloat(const FVector& A, float B);
	static FVector2D Add_Vector2DVector2D(const FVector2D& A, const FVector2D& B);
	static FVector2D Add_Vector2DFloat(const FVector2D& A, float B);
	static FTimespan Add_TimespanTimespan(const FTimespan& A, const FTimespan& B);
	static int Add_IntInt(int A, int B);
	static float Add_FloatFloat(float A, float B);
	static FDateTime Add_DateTimeTimespan(const FDateTime& A, const FTimespan& B);
	static unsigned char Add_ByteByte(unsigned char A, unsigned char B);
	static float Acos(float A);
	static int Abs_Int(int A);
	static float Abs(float A);
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetNodeHelperLibrary"));
		return ptr;
	}


	static void MarkBit(int Index, int* Data);
	static bool HasUnmarkedBit(int Data, int NumBits);
	static bool HasMarkedBit(int Data, int NumBits);
	static unsigned char GetValidIndex(UEnum* Enum, unsigned char EnumeratorIndex);
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	static FString GetEnumeratorUserFriendlyName(UEnum* Enum, unsigned char EnumeratorValue);
	static FName GetEnumeratorName(UEnum* Enum, unsigned char EnumeratorValue);
	static void ClearBit(int Index, int* Data);
	static void ClearAllBits(int* Data);
	static bool BitIsMarked(int Data, int Index);
};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetStringLibrary"));
		return ptr;
	}


	static FString TrimTrailing(const FString& SourceString);
	static FString Trim(const FString& SourceString);
	static FString ToUpper(const FString& SourceString);
	static FString ToLower(const FString& SourceString);
	static FString TimeSecondsToString(float InSeconds);
	static bool StartsWith(const FString& SourceString, const FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase);
	static bool Split(const FString& SourceString, const FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, FString* LeftS, FString* RightS);
	static FString RightPad(const FString& SourceString, int ChCount);
	static FString RightChop(const FString& SourceString, int Count);
	static FString Right(const FString& SourceString, int Count);
	static FString Reverse(const FString& SourceString);
	static int ReplaceInline(const FString& SearchText, const FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, FString* SourceString);
	static FString Replace(const FString& SourceString, const FString& From, const FString& To, TEnumAsByte<ESearchCase> SearchCase);
	static TArray<FString> ParseIntoArray(const FString& SourceString, const FString& Delimiter, bool CullEmptyStrings);
	static bool NotEqual_StrStr(const FString& A, const FString& B);
	static bool NotEqual_StriStri(const FString& A, const FString& B);
	static FString Mid(const FString& SourceString, int Start, int Count);
	static bool MatchesWildcard(const FString& SourceString, const FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase);
	static int Len(const FString& S);
	static FString LeftPad(const FString& SourceString, int ChCount);
	static FString LeftChop(const FString& SourceString, int Count);
	static FString Left(const FString& SourceString, int Count);
	static FString JoinStringArray(TArray<FString> SourceArray, const FString& Separator);
	static bool IsNumeric(const FString& SourceString);
	static FString GetSubstring(const FString& SourceString, int StartIndex, int Length);
	static int GetCharacterAsNumber(const FString& SourceString, int Index);
	static TArray<FString> GetCharacterArrayFromString(const FString& SourceString);
	static int FindSubstring(const FString& SearchIn, const FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	static bool EqualEqual_StrStr(const FString& A, const FString& B);
	static bool EqualEqual_StriStri(const FString& A, const FString& B);
	static bool EndsWith(const FString& SourceString, const FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase);
	static int CullArray(const FString& SourceString, TArray<FString>* InArray);
	static FString Conv_VectorToString(const FVector& InVec);
	static FString Conv_Vector2dToString(const FVector2D& InVec);
	static FString Conv_TransformToString(const FTransform& InTrans);
	static FName Conv_StringToName(const FString& InString);
	static int Conv_StringToInt(const FString& InString);
	static float Conv_StringToFloat(const FString& InString);
	static FString Conv_RotatorToString(const FRotator& InRot);
	static FString Conv_ObjectToString(UObject* InObj);
	static FString Conv_NameToString(const FName& InName);
	static FString Conv_IntToString(int InInt);
	static FString Conv_FloatToString(float InFloat);
	static FString Conv_ColorToString(const FLinearColor& InColor);
	static FString Conv_ByteToString(unsigned char InByte);
	static FString Conv_BoolToString(bool InBool);
	static FString Concat_StrStr(const FString& A, const FString& B);
	static FString BuildString_Vector2d(const FString& AppendTo, const FString& Prefix, const FVector2D& InVector2D, const FString& Suffix);
	static FString BuildString_Vector(const FString& AppendTo, const FString& Prefix, const FVector& InVector, const FString& Suffix);
	static FString BuildString_Rotator(const FString& AppendTo, const FString& Prefix, const FRotator& InRot, const FString& Suffix);
	static FString BuildString_Object(const FString& AppendTo, const FString& Prefix, UObject* InObj, const FString& Suffix);
	static FString BuildString_Name(const FString& AppendTo, const FString& Prefix, const FName& InName, const FString& Suffix);
	static FString BuildString_Int(const FString& AppendTo, const FString& Prefix, int InInt, const FString& Suffix);
	static FString BuildString_Float(const FString& AppendTo, const FString& Prefix, float InFloat, const FString& Suffix);
	static FString BuildString_Color(const FString& AppendTo, const FString& Prefix, const FLinearColor& InColor, const FString& Suffix);
	static FString BuildString_Bool(const FString& AppendTo, const FString& Prefix, bool InBool, const FString& Suffix);
};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetSystemLibrary"));
		return ptr;
	}


	static void StackTrace();
	static bool SphereTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool SphereTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool SphereTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool SphereTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool SphereTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool SphereTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool SphereTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool SphereTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool SphereOverlapComponents_NEW(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool SphereOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool SphereOverlapActors_NEW(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static bool SphereOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static void ShowPlatformSpecificLeaderboardScreen(const FString& CategoryName);
	static void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer);
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	static void SetWindowTitle(const FText& Title);
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);
	static void SetVectorPropertyByName(UObject* Object, const FName& PropertyName, const FVector& Value);
	static void SetTransformPropertyByName(UObject* Object, const FName& PropertyName, const FTransform& Value);
	static void SetTextPropertyByName(UObject* Object, const FName& PropertyName, const FText& Value);
	static void SetSupressViewportTransitionMessage(UObject* WorldContextObject, bool bState);
	static void SetStructurePropertyByName(UObject* Object, const FName& PropertyName, const FGenericStruct& Value);
	static void SetStringPropertyByName(UObject* Object, const FName& PropertyName, const FString& Value);
	static void SetRotatorPropertyByName(UObject* Object, const FName& PropertyName, const FRotator& Value);
	static void SetObjectPropertyByName(UObject* Object, const FName& PropertyName, UObject* Value);
	static void SetNamePropertyByName(UObject* Object, const FName& PropertyName, const FName& Value);
	static void SetLinearColorPropertyByName(UObject* Object, const FName& PropertyName, const FLinearColor& Value);
	static void SetIntPropertyByName(UObject* Object, const FName& PropertyName, int Value);
	static void SetFloatPropertyByName(UObject* Object, const FName& PropertyName, float Value);
	static void SetCollisionProfileNameProperty(UObject* Object, const FName& PropertyName, const FCollisionProfileName& Value);
	static void SetClassPropertyByName(UObject* Object, const FName& PropertyName, UClass* Value);
	static void SetBytePropertyByName(UObject* Object, const FName& PropertyName, unsigned char Value);
	static void SetBoolPropertyByName(UObject* Object, const FName& PropertyName, bool Value);
	static void SetAssetPropertyByName(UObject* Object, const FName& PropertyName, TAssetPtr<class UObject> Value);
	static void SetAssetClassPropertyByName(UObject* Object, const FName& PropertyName, TAssetPtr<class UClass> Value);
	static void RetriggerableDelay(UObject* WorldContextObject, float Duration, const FLatentActionInfo& LatentInfo);
	static void ResetGamepadAssignmentToController(int ControllerId);
	static void ResetGamepadAssignments();
	static void RegisterForRemoteNotifications();
	static void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference);
	static void PrintWarning(const FString& InString);
	static void PrintText(UObject* WorldContextObject, const FText& InText, bool bPrintToScreen, bool bPrintToLog, const FLinearColor& TextColor, float Duration);
	static void PrintString(UObject* WorldContextObject, const FString& InString, bool bPrintToScreen, bool bPrintToLog, const FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(UClass* Loaded);
	static void MoveComponentTo(USceneComponent* Component, const FVector& TargetRelativeLocation, const FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<EMoveComponentAction> MoveAction, const FLatentActionInfo& LatentInfo);
	static FText MakeLiteralText(const FText& Value);
	static FString MakeLiteralString(const FString& Value);
	static FName MakeLiteralName(const FName& Value);
	static int MakeLiteralInt(int Value);
	static float MakeLiteralFloat(float Value);
	static unsigned char MakeLiteralByte(unsigned char Value);
	static bool MakeLiteralBool(bool Value);
	static void LoadAssetClass(UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const FScriptDelegate& OnLoaded, const FLatentActionInfo& LatentInfo);
	static void LoadAsset(UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const FScriptDelegate& OnLoaded, const FLatentActionInfo& LatentInfo);
	static bool LineTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool LineTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool LineTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool LineTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool LineTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool LineTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool LineTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool LineTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static void LaunchURL(const FString& URL);
	static void K2_UnPauseTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static void K2_UnPauseTimerDelegate(const FScriptDelegate& Delegate);
	static void K2_UnPauseTimer(UObject* Object, const FString& FunctionName);
	static bool K2_TimerExistsHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static bool K2_TimerExistsDelegate(const FScriptDelegate& Delegate);
	static bool K2_TimerExists(UObject* Object, const FString& FunctionName);
	static FTimerHandle K2_SetTimerDelegate(const FScriptDelegate& Delegate, float Time, bool bLooping);
	static FTimerHandle K2_SetTimer(UObject* Object, const FString& FunctionName, float Time, bool bLooping);
	static void K2_PauseTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static void K2_PauseTimerDelegate(const FScriptDelegate& Delegate);
	static void K2_PauseTimer(UObject* Object, const FString& FunctionName);
	static bool K2_IsValidTimerHandle(const FTimerHandle& Handle);
	static bool K2_IsTimerPausedHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static bool K2_IsTimerPausedDelegate(const FScriptDelegate& Delegate);
	static bool K2_IsTimerPaused(UObject* Object, const FString& FunctionName);
	static bool K2_IsTimerActiveHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static bool K2_IsTimerActiveDelegate(const FScriptDelegate& Delegate);
	static bool K2_IsTimerActive(UObject* Object, const FString& FunctionName);
	static FTimerHandle K2_InvalidateTimerHandle(FTimerHandle* Handle);
	static float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static float K2_GetTimerRemainingTimeDelegate(const FScriptDelegate& Delegate);
	static float K2_GetTimerRemainingTime(UObject* Object, const FString& FunctionName);
	static float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static float K2_GetTimerElapsedTimeDelegate(const FScriptDelegate& Delegate);
	static float K2_GetTimerElapsedTime(UObject* Object, const FString& FunctionName);
	static void K2_ClearTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle);
	static void K2_ClearTimerDelegate(const FScriptDelegate& Delegate);
	static void K2_ClearTimer(UObject* Object, const FString& FunctionName);
	static bool IsValidClass(UClass* Class);
	static bool IsValid(UObject* Object);
	static bool IsServer(UObject* WorldContextObject);
	static bool IsPackagedForDistribution();
	static bool IsLoggedIn(APlayerController* SpecificPlayer);
	static bool IsDedicatedServer(UObject* WorldContextObject);
	static bool IsControllerAssignedToGamepad(int ControllerId);
	static void HideAdBanner();
	static bool GetVolumeButtonsHandledBySystem();
	static FString GetUniqueDeviceId();
	static bool GetSupportedFullscreenResolutions(TArray<FIntPoint>* Resolutions);
	static int GetRenderingMaterialQualityLevel();
	static int GetRenderingDetailMode();
	static TArray<FString> GetPreferredLanguages();
	static FString GetPlatformUserName();
	static int GetObjectNameAsCrc32(UObject* Object);
	static FString GetObjectName(UObject* Object);
	static int GetMaxShadowCascades();
	static FString GetLocalCurrencySymbol();
	static FString GetLocalCurrencyCode();
	static float GetGameTimeInSeconds(UObject* WorldContextObject);
	static FString GetGameName();
	static FString GetEngineVersion();
	static FString GetDisplayName(UObject* Object);
	static void GetComponentBounds(USceneComponent* Component, FVector* Origin, FVector* BoxExtent, float* SphereRadius);
	static FString GetClassDisplayName(UClass* Class);
	static int GetAdIDCount();
	static void GetActorListFromComponentList(TArray<UPrimitiveComponent*> ComponentList, UClass* ActorClassFilter, TArray<AActor*>* OutActorList);
	static void GetActorBounds(AActor* Actor, FVector* Origin, FVector* BoxExtent);
	static void ForceCloseAdBanner();
	static void FlushPersistentDebugLines(UObject* WorldContextObject);
	static void FlushDebugStrings(UObject* WorldContextObject);
	static void ExecuteConsoleCommand(UObject* WorldContextObject, const FString& Command, APlayerController* SpecificPlayer);
	static void DrawDebugString(UObject* WorldContextObject, const FVector& TextLocation, const FString& Text, AActor* TestBaseActor, const FLinearColor& TextColor, float Duration);
	static void DrawDebugSphere(UObject* WorldContextObject, const FVector& Center, float Radius, int Segments, const FLinearColor& LineColor, float Duration);
	static void DrawDebugPoint(UObject* WorldContextObject, const FVector& Position, float Size, const FLinearColor& PointColor, float Duration);
	static void DrawDebugPlane(UObject* WorldContextObject, const FPlane& PlaneCoordinates, const FVector& Location, float Size, const FLinearColor& PlaneColor, float Duration);
	static void DrawDebugLine(UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, const FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugFrustum(UObject* WorldContextObject, const FTransform& FrustumTransform, const FLinearColor& FrustumColor, float Duration);
	static void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, const FTransform& DrawTransform, const FVector2D& DrawSize, const FLinearColor& DrawColor, float Duration);
	static void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, const FVector& DrawLocation, const FVector2D& DrawSize, const FLinearColor& DrawColor, float Duration);
	static void DrawDebugCylinder(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, int Segments, const FLinearColor& LineColor, float Duration);
	static void DrawDebugCoordinateSystem(UObject* WorldContextObject, const FVector& AxisLoc, const FRotator& AxisRot, float Scale, float Duration);
	static void DrawDebugConeInDegrees(UObject* WorldContextObject, const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const FLinearColor& LineColor, float Duration);
	static void DrawDebugCone(UObject* WorldContextObject, const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const FLinearColor& LineColor);
	static void DrawDebugCircle(UObject* WorldContextObject, const FVector& Center, float Radius, int NumSegments, const FLinearColor& LineColor, float Duration, float Thickness, const FVector& YAxis, const FVector& ZAxis, bool bDrawAxis);
	static void DrawDebugCapsule(UObject* WorldContextObject, const FVector& Center, float HalfHeight, float Radius, const FRotator& Rotation, const FLinearColor& LineColor, float Duration);
	static void DrawDebugCamera(ACameraActor* CameraActor, const FLinearColor& CameraColor, float Duration);
	static void DrawDebugBox(UObject* WorldContextObject, const FVector& Center, const FVector& Extent, const FLinearColor& LineColor, const FRotator& Rotation, float Duration);
	static void DrawDebugArrow(UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, float ArrowSize, const FLinearColor& LineColor, float Duration);
	static bool DoesImplementInterface(UObject* TestObject, UClass* Interface);
	static void Delay(UObject* WorldContextObject, float Duration, const FLatentActionInfo& LatentInfo);
	static void CreateCopyForUndoBuffer(UObject* ObjectToModify);
	static UObject* Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	static UObject* Conv_AssetToObject(TAssetPtr<class UObject> Asset);
	static UClass* Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass);
	static void ControlScreensaver(bool bAllowScreenSaver);
	static bool ComponentOverlapComponents_NEW(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool ComponentOverlapComponents_DEPRECATED(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool ComponentOverlapActors_NEW(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static bool ComponentOverlapActors_DEPRECATED(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static void CollectGarbage();
	static bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool CapsuleTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool CapsuleTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool CapsuleTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool CapsuleTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool CapsuleTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool CapsuleTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool CapsuleOverlapComponents_NEW(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool CapsuleOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool CapsuleOverlapActors_NEW(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static bool CapsuleOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static bool BoxTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool BoxTraceSingle(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit);
	static bool BoxTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool BoxTraceMulti(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits);
	static bool BoxOverlapComponents_NEW(UObject* WorldContextObject, const FVector& BoxPos, const FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool BoxOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& BoxPos, const FVector& Extent, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents);
	static bool BoxOverlapActors_NEW(UObject* WorldContextObject, const FVector& BoxPos, const FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static bool BoxOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& BoxPos, const FVector& BoxExtent, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors);
	static FDebugFloatHistory AddFloatHistorySample(float Value, const FDebugFloatHistory& FloatHistory);
};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.KismetTextLibrary"));
		return ptr;
	}


	static FText TextTrimTrailing(const FText& InText);
	static FText TextTrimPrecedingAndTrailing(const FText& InText);
	static FText TextTrimPreceding(const FText& InText);
	static bool TextIsTransient(const FText& InText);
	static bool TextIsEmpty(const FText& InText);
	static bool TextIsCultureInvariant(const FText& InText);
	static bool NotEqual_TextText(const FText& A, const FText& B);
	static bool NotEqual_IgnoreCase_TextText(const FText& A, const FText& B);
	static FText GetEmptyText();
	static FText Format(const FText& InPattern, TArray<FFormatTextArgument> InArgs);
	static bool FindTextInLocalizationTable(const FString& Namespace, const FString& Key, FText* OutText);
	static bool EqualEqual_TextText(const FText& A, const FText& B);
	static bool EqualEqual_IgnoreCase_TextText(const FText& A, const FText& B);
	static FString Conv_TextToString(const FText& InText);
	static FText Conv_StringToText(const FString& InString);
	static FText Conv_NameToText(const FName& InName);
	static FText Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	static FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	static FText Conv_ByteToText(unsigned char Value);
	static FText Conv_BoolToText(bool InBool);
	static FText AsTimespan_Timespan(const FTimespan& InTimespan);
	static FText AsTime_DateTime(const FDateTime& In);
	static FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	static FText AsDateTime_DateTime(const FDateTime& In);
	static FText AsDate_DateTime(const FDateTime& InDateTime);
	static FText AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const FString& CurrencyCode);
	static FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const FString& CurrencyCode);
};


// Class Engine.LoadingPerfBPFuncLib
// 0x0000 (0x0028 - 0x0028)
class ULoadingPerfBPFuncLib : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LoadingPerfBPFuncLib"));
		return ptr;
	}


	static void WriteTimings();
	static void MarkEndStreaming();
};


// Class Engine.WorldComposition
// 0x0090 (0x00B8 - 0x0028)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0028(0x0070) MISSED OFFSET
	TArray<ULevelStreaming*>                           TilesStreaming;                                           // 0x0098(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x00A8(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadAllTilesDuringCinematic;                             // 0x00B0(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRebaseOriginIn3DSpace;                                   // 0x00B1(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00B2(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                                     // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.WorldComposition"));
		return ptr;
	}

};


// Class Engine.NestedWorldComposition
// 0x0020 (0x00D8 - 0x00B8)
class UNestedWorldComposition : public UWorldComposition
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00B8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NestedWorldComposition"));
		return ptr;
	}

};


// Class Engine.NestedWorldCompositionFunctionLib
// 0x0000 (0x0028 - 0x0028)
class UNestedWorldCompositionFunctionLib : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NestedWorldCompositionFunctionLib"));
		return ptr;
	}


	static void TriggerManualNestedLevelUnload(UObject* WorldContextObject, const FName& PackageName);
	static void TriggerManualNestedLevelLoad(UObject* WorldContextObject, const FName& PackageName);
	static bool IsNestedLevelVisibleRecursive(UObject* WorldContextObject, const FName& PackageName);
	static bool IsNestedLevelVisible(UObject* WorldContextObject, const FName& PackageName);
};


// Class Engine.NetPushModelHelpers
// 0x0000 (0x0028 - 0x0028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetPushModelHelpers"));
		return ptr;
	}


	static void MarkPropertyDirtyFromRepIndex(UObject* Object, int RepIndex, const FName& PropertyName);
	static void MarkPropertyDirty(UObject* Object, const FName& PropertyName);
};


// Class Engine.ParticleWarningFunctions
// 0x0000 (0x0028 - 0x0028)
class UParticleWarningFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleWarningFunctions"));
		return ptr;
	}


	static TArray<FString> RetrieveInfoOnEmitterWithShortQuarterResArea(UParticleSystemComponent* Component, float ShortQuarterRes);
	static TArray<FString> RetrieveInfoOnEmitterWithLongNearTransition(UParticleSystemComponent* Component, float LongNearTransition);
	static TArray<FString> RetrieveInfoOnEmitterWithLongFarTransition(UParticleSystemComponent* Component, float LongFarTransition);
	static TArray<FString> RetrieveInfoOnEmittersWithoutPerVertexLighting(UParticleSystemComponent* Component);
	static TArray<FString> RetrieveInfoOnEmittersWithLowAlphaThreshold(UParticleSystemComponent* Component, float LowAlphaThreshold);
	static TArray<FString> RetrieveInfoOnEmittersWithLoopZero(UParticleSystemComponent* Component);
	static TArray<FString> RetrieveInfoOnEmittersWithKillOnCompleteUnticked(UParticleSystemComponent* Component);
	static TArray<FString> RetrieveInfoOnEmittersWithHighSpawnRate(UParticleSystemComponent* Component, int HighSpawnRate);
	static TArray<FString> RetrieveInfoOnEmittersWithDurationZero(UParticleSystemComponent* Component);
	static TArray<FString> RetrieveInfoOnEmittersUsingMaxDrawCount(UParticleSystemComponent* Component);
	static TArray<FString> RetrieveInfoOnEmittersOnCPU(UParticleSystemComponent* Component);
};


// Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USkeletalMeshMergeBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary"));
		return ptr;
	}


	static USkeletalMesh* MergeSkeletalMeshesWithMorphTargets(TArray<USkeletalMesh*> Meshes, TArray<FName> MorphTargetNames, TArray<float> MorphTargetWeights);
	static USkeletalMesh* MergeSkeletalMeshes(TArray<USkeletalMesh*> Meshes);
};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VisualLoggerKismetLibrary"));
		return ptr;
	}


	static void LogText(UObject* WorldContextObject, const FString& Text, const FName& LogCategory);
	static void LogLocation(UObject* WorldContextObject, const FVector& Location, const FString& Text, const FLinearColor& ObjectColor, float Radius, const FName& LogCategory);
	static void LogBox(UObject* WorldContextObject, const FBox& BoxShape, const FString& Text, const FLinearColor& ObjectColor, const FName& LogCategory);
};


// Class Engine.AnimBlueprintGeneratedClass
// 0x0068 (0x0290 - 0x0228)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                       // 0x0228(0x0010) (ZeroConstructor)
	USkeleton*                                         TargetSkeleton;                                           // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                             // 0x0240(0x0010) (ZeroConstructor)
	int                                                RootAnimNodeIndex;                                        // 0x0250(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0254(0x001C) MISSED OFFSET
	TArray<FAnimGroupInfo>                             Groups;                                                   // 0x0270(0x0010) (ZeroConstructor)
	TArray<FName>                                      SkeletonSlotNames;                                        // 0x0280(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimBlueprintGeneratedClass"));
		return ptr;
	}

};


// Class Engine.BodySetup
// 0x02A0 (0x02C8 - 0x0028)
class UBodySetup : public UObject
{
public:
	FKAggregateGeom                                    AggGeom;                                                  // 0x0028(0x0048)
	FName                                              BoneName;                                                 // 0x0070(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EPhysicsType>                          PhysicsType;                                              // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	unsigned char                                      bCookComplexGeometryOnServer : 1;                         // 0x007C(0x0001) (Edit)
	unsigned char                                      bConsiderForBounds : 1;                                   // 0x007C(0x0001) (Edit)
	unsigned char                                      bMeshCollideAll : 1;                                      // 0x007C(0x0001) (Transient)
	unsigned char                                      bDoubleSidedGeometry : 1;                                 // 0x007C(0x0001) (Edit)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                        // 0x007C(0x0001)
	unsigned char                                      bSharedCookedData : 1;                                    // 0x007C(0x0001)
	unsigned char                                      bGenerateMirroredCollision : 1;                           // 0x007C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	UPhysicalMaterial*                                 PhysMaterial;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBodyCollisionResponse>                CollisionReponse;                                         // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionTraceFlag>                   CollisionTraceFlag;                                       // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x008A(0x0006) MISSED OFFSET
	FBodyInstance                                      DefaultInstance;                                          // 0x0090(0x0180) (Edit)
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                    // 0x0210(0x0008) (Edit)
	FVector                                            BuildScale3D;                                             // 0x0218(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xA4];                                      // 0x0224(0x00A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BodySetup"));
		return ptr;
	}

};


// Class Engine.BodySetup2D
// 0x0030 (0x02F8 - 0x02C8)
class UBodySetup2D : public UBodySetup
{
public:
	FAggregateGeometry2D                               AggGeom2D;                                                // 0x02C8(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BodySetup2D"));
		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UBoneMaskFilter : public UObject
{
public:
	TArray<FInputBlendPose>                            BlendPoses;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BoneMaskFilter"));
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0028 (0x0050 - 0x0028)
class UBookMark : public UObject
{
public:
	FVector                                            Location;                                                 // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FRotator                                           Rotation;                                                 // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FString>                                    HiddenLevels;                                             // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BookMark"));
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FIntPoint                                          Location;                                                 // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BookMark2D"));
		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0018 (0x0040 - 0x0028)
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	UEdGraphNode*                                      Node;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStepOnce : 1;                                            // 0x0038(0x0001)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                      // 0x0038(0x0001)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                             // 0x0038(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Breakpoint"));
		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UBrushBuilder : public UObject
{
public:
	FString                                            BitmapFilename;                                           // 0x0028(0x0010) (ZeroConstructor)
	FString                                            ToolTip;                                                  // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                      // 0x0048(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<FVector>                                    Vertices;                                                 // 0x0050(0x0010) (ZeroConstructor)
	TArray<FBuilderPoly>                               Polys;                                                    // 0x0060(0x0010) (ZeroConstructor)
	FName                                              Layer;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                                       // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.BrushBuilder"));
		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x02A8 (0x02D0 - 0x0028)
class UButtonStyleAsset : public UObject
{
public:
	FButtonStyle                                       ButtonStyle;                                              // 0x0028(0x02A8) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ButtonStyleAsset"));
		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x0588 (0x05B0 - 0x0028)
class UCameraAnim : public UObject
{
public:
	UInterpGroup*                                      CameraInterpGroup;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	FBox                                               BoundingBox;                                              // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                          // 0x0050(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                                  // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	FPostProcessSettings                               BasePostProcessSettings;                                  // 0x0060(0x0540)
	float                                              BasePostProcessBlendWeight;                               // 0x05A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x05A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraAnim"));
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x00F8 (0x0120 - 0x0028)
class UCameraAnimInst : public UObject
{
public:
	UCameraAnim*                                       CamAnim;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	UInterpGroupInst*                                  InterpGroupInst;                                          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0038(0x001C) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0054(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0058(0x0010) MISSED OFFSET
	UInterpTrackMove*                                  MoveTrack;                                                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UInterpTrackInstMove*                              MoveInst;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UCurveFloat*                                       BlendInCurve;                                             // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x9F];                                      // 0x0081(0x009F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraAnimInst"));
		return ptr;
	}


	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};


// Class Engine.CameraModifier_CameraShake
// 0x0018 (0x0060 - 0x0048)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<UCameraShake*>                              ActiveShakes;                                             // 0x0048(0x0010) (ZeroConstructor)
	float                                              SplitScreenShakeScale;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CameraModifier_CameraShake"));
		return ptr;
	}

};


// Class Engine.Canvas
// 0x00C8 (0x00F0 - 0x0028)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OrgY;                                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipX;                                                    // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipY;                                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	FColor                                             DrawColor;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bCenterY : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bNoSmooth : 1;                                            // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	FPlane                                             ColorModulate;                                            // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)
	UTexture2D*                                        DefaultTexture;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	UTexture2D*                                        GradientTexture0;                                         // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	UReporterGraph*                                    ReporterGraph;                                            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x78];                                      // 0x0078(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Canvas"));
		return ptr;
	}


	FVector2D K2_TextSize(UFont* RenderFont, const FString& RenderText, const FVector2D& Scale);
	FVector2D K2_StrLen(UFont* RenderFont, const FString& RenderText);
	FVector K2_Project(const FVector& WorldLocation);
	void K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);
	void K2_DrawTexture(UTexture* RenderTexture, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, const FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const FVector2D& PivotPoint);
	void K2_DrawText(UFont* RenderFont, const FString& RenderText, const FVector2D& ScreenPosition, const FLinearColor& RenderColor, float Kerning, const FLinearColor& ShadowColor, const FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const FLinearColor& OutlineColor);
	void K2_DrawPolygon(UTexture* RenderTexture, const FVector2D& ScreenPosition, const FVector2D& Radius, int NumberOfSides, const FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);
	void K2_DrawMaterial(UMaterialInterface* RenderMaterial, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, float Rotation, const FVector2D& PivotPoint);
	void K2_DrawLine(const FVector2D& ScreenPositionA, const FVector2D& ScreenPositionB, float Thickness, const FLinearColor& RenderColor);
	void K2_DrawBox(const FVector2D& ScreenPosition, const FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, const FLinearColor& RenderColor, const FVector2D& BorderScale, const FVector2D& BackgroundScale, float Rotation, const FVector2D& PivotPoint, const FVector2D& CornerSize);
	void K2_Deproject(const FVector2D& ScreenPosition, FVector* WorldOrigin, FVector* WorldDirection);
	void DrawTextures(TArray<FTextureRenderData> RenderDatas);
};


// Class Engine.Channel
// 0x0040 (0x0068 - 0x0028)
class UChannel : public UObject
{
public:
	UNetConnection*                                    Connection;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0030(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Channel"));
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x01F8 (0x0260 - 0x0068)
class UActorChannel : public UChannel
{
public:
	AActor*                                            Actor;                                                    // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0070(0x00E8) MISSED OFFSET
	TArray<UObject*>                                   ObjectsRequiredForQueuedBunches;                          // 0x0158(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xF8];                                      // 0x0168(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ActorChannel"));
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ControlChannel"));
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x0028 (0x0090 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	int                                                BandwidthPerSecondReservationInBytes;                     // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	float                                              SaturationCooloffPeriodInSeconds;                         // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VoiceChannel"));
		return ptr;
	}

};


// Class Engine.CheatManager
// 0x0050 (0x0078 - 0x0028)
class UCheatManager : public UObject
{
public:
	ADebugCameraController*                            DebugCameraControllerRef;                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	UClass*                                            DebugCameraControllerClass;                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0038(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CheatManager"));
		return ptr;
	}


	void WidgetReflector();
	void Walk();
	void ViewSelf();
	void ViewPlayer(const FString& S);
	void ViewClass(UClass* DesiredClass);
	void ViewActor(const FName& ActorName);
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TextureAtlasVisualizer();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const FString& ClassName);
	void StreamLevelOut(const FName& PackageName);
	void StreamLevelIn(const FName& PackageName);
	void Slomo(float T);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(const FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void FontAtlasVisualizer();
	void Fly();
	void FlushLog();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DestroyTarget();
	void DestroyPawns(UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void ChangeSize(float F);
	void BugItStringCreator(const FVector& ViewLocation, const FRotator& ViewRotation, FString* GoString, FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const FString& ScreenShotDescription);
};


// Class Engine.CheckBoxStyleAsset
// 0x05F0 (0x0618 - 0x0028)
class UCheckBoxStyleAsset : public UObject
{
public:
	FCheckBoxStyle                                     CheckBoxStyle;                                            // 0x0028(0x05F0) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CheckBoxStyleAsset"));
		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0080(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PluginCommandlet"));
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SmokeTestCommandlet"));
		return ptr;
	}

};


// Class Engine.Console
// 0x00C8 (0x00F0 - 0x0028)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	ULocalPlayer*                                      ConsoleTargetPlayer;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	UTexture2D*                                        DefaultTexture_Black;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	UTexture2D*                                        DefaultTexture_White;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<FString>                                    HistoryBuffer;                                            // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x78];                                      // 0x0078(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Console"));
		return ptr;
	}

};


// Class Engine.CurveLinearColor
// 0x01E0 (0x0210 - 0x0030)
class UCurveLinearColor : public UCurveBase
{
public:
	FRichCurve                                         FloatCurves[0x4];                                         // 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveLinearColor"));
		return ptr;
	}


	FLinearColor GetLinearColorValue(float InTime);
};


// Class Engine.CurveVector
// 0x0168 (0x0198 - 0x0030)
class UCurveVector : public UCurveBase
{
public:
	FRichCurve                                         FloatCurves[0x3];                                         // 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveVector"));
		return ptr;
	}


	FVector GetVectorValue(float InTime);
};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveEdPresetCurve"));
		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0050 (0x0078 - 0x0028)
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CurveTable"));
		return ptr;
	}

};


// Class Engine.CustomWidgetDrawerInterface
// 0x0000 (0x0028 - 0x0028)
class UCustomWidgetDrawerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CustomWidgetDrawerInterface"));
		return ptr;
	}

};


// Class Engine.InstancedNavMeshesDataAsset
// 0x0010 (0x0038 - 0x0028)
class UInstancedNavMeshesDataAsset : public UDataAsset
{
public:
	TArray<FInstancedNavMesh>                          InstancedNavMeshes;                                       // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedNavMeshesDataAsset"));
		return ptr;
	}

};


// Class Engine.ParticleComputeShaderData
// 0x0020 (0x0048 - 0x0028)
class UParticleComputeShaderData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleComputeShaderData"));
		return ptr;
	}

};


// Class Engine.StringArrayDataAsset
// 0x0010 (0x0038 - 0x0028)
class UStringArrayDataAsset : public UDataAsset
{
public:
	TArray<FString>                                    Array;                                                    // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StringArrayDataAsset"));
		return ptr;
	}

};


// Class Engine.DestructibleFractureSettings
// 0x0078 (0x00A0 - 0x0028)
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                            // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FFractureMaterial                                  FractureMaterialDesc;                                     // 0x002C(0x0024) (Edit, Transient)
	int                                                RandomSeed;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<FVector>                                    VoronoiSites;                                             // 0x0058(0x0010) (ZeroConstructor)
	int                                                OriginalSubmeshCount;                                     // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<UMaterialInterface*>                        Materials;                                                // 0x0070(0x0010) (ZeroConstructor)
	TArray<FDestructibleChunkParameters>               ChunkParameters;                                          // 0x0080(0x0010) (ZeroConstructor)
	TArray<FString>                                    MaterialNames;                                            // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DestructibleFractureSettings"));
		return ptr;
	}

};


// Class Engine.AnimationSettings
// 0x0048 (0x0080 - 0x0038)
class UAnimationSettings : public UDeveloperSettings
{
public:
	TArray<float>                                      DefaultVisibleDistanceFactorThresholds;                   // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	int                                                CompressCommandletVersion;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<FString>                                    KeyEndEffectorsMatchNameArray;                            // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	UClass*                                            DefaultCompressionAlgorithm;                              // 0x0060(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              AlternativeCompressionThreshold;                          // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               ForceRecompression;                                       // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                       // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceBelowThreshold;                                     // 0x0072(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                    // 0x0073(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRaiseMaxErrorToExisting;                                 // 0x0074(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryFixedBitwiseCompression;                              // 0x0075(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryPerTrackBitwiseCompression;                           // 0x0076(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryLinearKeyRemovalCompression;                          // 0x0077(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryIntervalKeyRemoval;                                   // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStripAnimationDataOnDedicatedServer;                     // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x007A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimationSettings"));
		return ptr;
	}

};


// Class Engine.AudioSettings
// 0x0048 (0x0080 - 0x0038)
class UAudioSettings : public UDeveloperSettings
{
public:
	FStringAssetReference                              DefaultSoundClassName;                                    // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	FStringAssetReference                              DefaultBaseSoundMix;                                      // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	FStringAssetReference                              VoiPSoundClass;                                           // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	float                                              LowPassFilterResonance;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaximumConcurrentStreams;                                 // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<FAudioQualitySettings>                      QualityLevels;                                            // 0x0070(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AudioSettings"));
		return ptr;
	}

};


// Class Engine.AutomaticInstancingSettings
// 0x0008 (0x0040 - 0x0038)
class UAutomaticInstancingSettings : public UDeveloperSettings
{
public:
	bool                                               IsEnabled;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AutomaticInstancingSettings"));
		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x0120 (0x0158 - 0x0038)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	TEnumAsByte<ERenderFocusRule>                      RenderFocusRule;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	FStringClassReference                              DefaultCursor;                                            // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	FStringClassReference                              TextEditBeamCursor;                                       // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	FStringClassReference                              CrosshairsCursor;                                         // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	FStringClassReference                              GrabHandCursor;                                           // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	FStringClassReference                              GrabHandClosedCursor;                                     // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	FStringClassReference                              SlashedCircleCursor;                                      // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	float                                              ApplicationScale;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EUIScalingRule>                        UIScaleRule;                                              // 0x00A4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	FStringClassReference                              CustomScalingRuleClass;                                   // 0x00A8(0x0010) (Edit, ZeroConstructor, Config)
	FRuntimeFloatCurve                                 UIScaleCurve;                                             // 0x00B8(0x0080) (Edit, Config)
	TArray<UObject*>                                   CursorClasses;                                            // 0x0138(0x0010) (ZeroConstructor, Transient)
	UClass*                                            CustomScalingRuleClassInstance;                           // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	UDPICustomScalingRule*                             CustomScalingRule;                                        // 0x0150(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.UserInterfaceSettings"));
		return ptr;
	}

};


// Class Engine.StreamingSettings
// 0x0028 (0x0060 - 0x0038)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                              // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AsyncIOBandwidthLimit;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                          // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                         // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StreamingSettings"));
		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                                   // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AllowParallelGC : 1;                                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      CreateGCClusters : 1;                                     // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      MergeGCClusters : 1;                                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                NumRetriesBeforeForcingGC;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.GarbageCollectionSettings"));
		return ptr;
	}

};


// Class Engine.NetworkClusteringSettings
// 0x0008 (0x0040 - 0x0038)
class UNetworkClusteringSettings : public UDeveloperSettings
{
public:
	float                                              DynamicActorGridHalfSizeKm;                               // 0x0038(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	float                                              DynamicActorGridCellSizeKm;                               // 0x003C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetworkClusteringSettings"));
		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0008 (0x0040 - 0x0038)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                          // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetworkSettings"));
		return ptr;
	}

};


// Class Engine.PhysicsSettings
// 0x0090 (0x00C8 - 0x0038)
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultTerminalVelocity;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultFluidFriction;                                     // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SimulateScratchMemorySize;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TriangleMeshTriangleMinAreaThreshold;                     // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableAsyncScene;                                        // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableShapeSharing;                                      // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePCM;                                               // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bWarnMissingLocks;                                        // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnable2DPhysics;                                         // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                               // 0x0055(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                  // 0x0056(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	float                                              BounceThresholdVelocity;                                  // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x005C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x005D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
	float                                              MaxAngularVelocity;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxDepenetrationVelocity;                                 // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                   // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDefaultHasComplexCollision;                              // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              MaxPhysicsDeltaTime;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubstepping;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsync;                                        // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTime;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AsyncSceneSmoothingFactor;                                // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x0084(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<FPhysicalSurfaceName>                       PhysicalSurfaces;                                         // 0x0088(0x0010) (ZeroConstructor, Config)
	TArray<FDominanceGroupPair>                        DominanceGroups;                                          // 0x0098(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FDominanceGroupName>                        DominanceGroupNames;                                      // 0x00A8(0x0010) (ZeroConstructor, Config)
	TEnumAsByte<EDominanceGroup>                       DefaultStaticDominanceGroup;                              // 0x00B8(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	TEnumAsByte<EDominanceGroup>                       DefaultMovableDominanceGroup;                             // 0x00B9(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	bool                                               bEnableMBP;                                               // 0x00BA(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x00BB(0x0001) MISSED OFFSET
	int                                                MBPSubdivisions;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MBPWorldHalfExtentInCM;                                   // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsSettings"));
		return ptr;
	}

};


// Class Engine.RendererSettings
// 0x00D8 (0x0110 - 0x0038)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileHDR : 1;                                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;             // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bOcclusionCulling : 1;                                    // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                                 // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                        // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bTextureStreaming : 1;                                    // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                   // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bAllowStaticLighting : 1;                                 // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                      // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                          // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      bGenerateLandscapeGIData : 1;                             // 0x0050(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              TessellationAdaptivePixelsPerTriangle;                    // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSeparateTranslucency : 1;                                // 0x0058(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                    // 0x005C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	FVector                                            TranslucentSortAxis;                                      // 0x0060(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                       // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureBloom : 1;                                 // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                      // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;        // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                          // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                            // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                             // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	TEnumAsByte<EAntiAliasingMethodUI>                 DefaultFeatureAntiAliasing;                               // 0x0074(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                               // 0x0075(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EEarlyZPass>                           bDepthSort;                                               // 0x0076(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0077(0x0001) MISSED OFFSET
	unsigned char                                      bEarlyZPassMovable : 1;                                   // 0x0078(0x0001) (Edit, Config)
	unsigned char                                      bDBuffer : 1;                                             // 0x0078(0x0001) (Edit, Config)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                         // 0x007C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	unsigned char                                      bBasePassOutputsVelocity : 1;                             // 0x0080(0x0001) (Edit, Config)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              WireframeCullThreshold;                                   // 0x0084(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EUIScalingRule>                        UIScaleRule;                                              // 0x0088(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	FRuntimeFloatCurve                                 UIScaleCurve;                                             // 0x0090(0x0080) (Config, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RendererSettings"));
		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UTextureLODSettings : public UObject
{
public:
	TArray<FTextureLODGroup>                           TextureLODGroups;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureLODSettings"));
		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0048 (0x0080 - 0x0038)
class UDeviceProfile : public UTextureLODSettings
{
public:
	FString                                            DeviceType;                                               // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	FString                                            BaseProfileName;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	UObject*                                           Parent;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	TArray<FString>                                    CVars;                                                    // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DeviceProfile"));
		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x0030 (0x0058 - 0x0028)
class UDeviceProfileManager : public UObject
{
public:
	TArray<UObject*>                                   Profiles;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0038(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DeviceProfileManager"));
		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	FGuid                                              LocalizationGUID;                                         // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DialogueVoice"));
		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0038 (0x0060 - 0x0028)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                              // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	FString                                            SpokenText;                                               // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<FDialogueContextMapping>                    ContextMappings;                                          // 0x0040(0x0010) (Edit, ZeroConstructor)
	FGuid                                              LocalizationGUID;                                         // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DialogueWave"));
		return ptr;
	}

};


// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Distribution"));
		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloat"));
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatConstant"));
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	FName                                              ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinInput;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxInput;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutput;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOutput;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatParameterBase"));
		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatParticleParameter"));
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	FInterpCurveFloat                                  ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatConstantCurve"));
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Max;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Min;                                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatUniform"));
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	FInterpCurveVector2D                               ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionFloatUniformCurve"));
		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      bIsDirty : 1;                                             // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVector"));
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0018 (0x0050 - 0x0038)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	FVector                                            Constant;                                                 // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorConstant"));
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0040 (0x0090 - 0x0050)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	FName                                              ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            MinInput;                                                 // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            MaxInput;                                                 // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            MinOutput;                                                // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            MaxOutput;                                                // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x008B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorParameterBase"));
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x0090 - 0x0090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorParticleParameter"));
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	FInterpCurveVector                                 ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorConstantCurve"));
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	FVector                                            Max;                                                      // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            Min;                                                      // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorUniform"));
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	FInterpCurveTwoVectors                             ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      bLockAxes2 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0056(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes : 1;                                         // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DistributionVectorUniformCurve"));
		return ptr;
	}

};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DPICustomScalingRule"));
		return ptr;
	}

};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DynamicBlueprintBinding"));
		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ComponentDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputActionDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputAxisDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings;                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputAxisKeyDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputVectorAxisDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputKeyDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputTouchDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InstancedActorDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInstancedActorDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<FBlueprintInstancedActorDelegateBinding>    ActorDelegateBindings;                                    // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InstancedActorDelegateBinding"));
		return ptr;
	}

};


// Class Engine.EdGraph
// 0x0038 (0x0060 - 0x0028)
class UEdGraph : public UObject
{
public:
	UClass*                                            Schema;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UEdGraphNode*>                              Nodes;                                                    // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                            // 0x0040(0x0001)
	unsigned char                                      bAllowDeletion : 1;                                       // 0x0040(0x0001)
	unsigned char                                      bAllowRenaming : 1;                                       // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0041(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EdGraph"));
		return ptr;
	}

};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B0 - 0x0090)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	FString                                            Link;                                                     // 0x0090(0x0010) (ZeroConstructor)
	FString                                            Excerpt;                                                  // 0x00A0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EdGraphNode_Documentation"));
		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EdGraphSchema"));
		return ptr;
	}

};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
class UImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ImportantToggleSettingInterface"));
		return ptr;
	}

};


// Class Engine.EndUserSettings
// 0x0010 (0x0038 - 0x0028)
class UEndUserSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	bool                                               bSendAnonymousUsageDataToEpic;                            // 0x0030(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EndUserSettings"));
		return ptr;
	}

};


// Class Engine.ExecutableAnimMetaDataInterface
// 0x0000 (0x0028 - 0x0028)
class UExecutableAnimMetaDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ExecutableAnimMetaDataInterface"));
		return ptr;
	}

};


// Class Engine.Exporter
// 0x0040 (0x0068 - 0x0028)
class UExporter : public UObject
{
public:
	UClass*                                            SupportedClass;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	UObject*                                           ExportRootScope;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FString>                                    FormatExtension;                                          // 0x0038(0x0010) (ZeroConstructor)
	TArray<FString>                                    FormatDescription;                                        // 0x0048(0x0010) (ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TextIndent;                                               // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bText : 1;                                                // 0x0060(0x0001)
	unsigned char                                      bSelectedOnly : 1;                                        // 0x0060(0x0001)
	unsigned char                                      bForceFileOperations : 1;                                 // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Exporter"));
		return ptr;
	}

};


// Class Engine.RareNetworkProfilerExporter
// 0x0000 (0x0068 - 0x0068)
class URareNetworkProfilerExporter : public UExporter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RareNetworkProfilerExporter"));
		return ptr;
	}

};


// Class Engine.FFTWaterSettings
// 0x0028 (0x0050 - 0x0028)
class UFFTWaterSettings : public UObject
{
public:
	FStringAssetReference                              FFTWaterMaterialName;                                     // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	FStringAssetReference                              FFTWaterFoamTextureName;                                  // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	int                                                BaseMeshDetail;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FFTWaterSettings"));
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UFontImportOptions : public UObject
{
public:
	FFontImportOptionsData                             Data;                                                     // 0x0028(0x00B0) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.FontImportOptions"));
		return ptr;
	}

};


// Class Engine.Font
// 0x01B0 (0x01D8 - 0x0028)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TEnumAsByte<EFontCacheType>                        FontCacheType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<FFontCharacter>                             Characters;                                               // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<UTexture2D*>                                Textures;                                                 // 0x0048(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EmScale;                                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ascent;                                                   // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Descent;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Leading;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Kerning;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FFontImportOptionsData                             ImportOptions;                                            // 0x0070(0x00B0) (Edit)
	int                                                NumCharacters;                                            // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                            // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LegacyFontName;                                           // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FCompositeFont                                     CompositeFont;                                            // 0x0148(0x0028)
	unsigned char                                      UnknownData03[0x68];                                      // 0x0170(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Font"));
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect
// 0x0100 (0x0128 - 0x0028)
class UHapticFeedbackEffect : public UObject
{
public:
	FHapticFeedbackDetails                             HapticDetails;                                            // 0x0028(0x0100) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.HapticFeedbackEffect"));
		return ptr;
	}

};


// Class Engine.HighLatencySettings
// 0x0018 (0x0040 - 0x0028)
class UHighLatencySettings : public UObject
{
public:
	bool                                               UseHighLatency;                                           // 0x0028(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	int                                                PktLag;                                                   // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PktLagVariance;                                           // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               PktOrder;                                                 // 0x0034(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                PktDup;                                                   // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PktLoss;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.HighLatencySettings"));
		return ptr;
	}

};


// Class Engine.HIKCharacterization
// 0x0110 (0x0138 - 0x0028)
class UHIKCharacterization : public UObject
{
public:
	FName                                              Reference;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              Hips;                                                     // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftUpLeg;                                                // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftLeg;                                                  // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftFoot;                                                 // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightUpLeg;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightLeg;                                                 // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightFoot;                                                // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              Spine;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftArm;                                                  // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftForeArm;                                              // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              LeftHand;                                                 // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightArm;                                                 // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightForeArm;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              RightHand;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              Head;                                                     // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FHIKBoneTransform>                          BoneTransforms;                                           // 0x00A8(0x0010) (Edit, ZeroConstructor)
	bool                                               Locked;                                                   // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	TArray<int>                                        UnrealToHumanIKBoneMapping;                               // 0x00C0(0x0010) (ZeroConstructor)
	TArray<FHIKBoneMapping>                            AdditionalBones;                                          // 0x00D0(0x0010) (ZeroConstructor)
	bool                                               LeftElbowInverted;                                        // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               RightElbowInverted;                                       // 0x00E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LeftKneeInverted;                                         // 0x00E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               RightKneeInverted;                                        // 0x00E3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AdjustLeftShoulder;                                       // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	FVector                                            AdjustLeftShoulder_Axis;                                  // 0x00E8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustLeftShoulder_Angle;                                 // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AdjustRightShoulder;                                      // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	FVector                                            AdjustRightShoulder_Axis;                                 // 0x00FC(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustRightShoulder_Angle;                                // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SpineSquashNStretch;                                      // 0x010C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               NeckSquashNStretch;                                       // 0x010D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x010E(0x0002) MISSED OFFSET
	float                                              SpineJointsMinSquashNStretchFactor;                       // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpineJointsMaxSquashNStretchFactor;                       // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NeckJointsMinSquashNStretchFactor;                        // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NeckJointsMaxSquashNStretchFactor;                        // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInitFromSkeleton;                                        // 0x0120(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0121(0x0003) MISSED OFFSET
	int                                                InitFromSkeletonCount;                                    // 0x0124(0x0004) (ZeroConstructor, IsPlainOldData)
	FRotator                                           ImportRotator;                                            // 0x0128(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.HIKCharacterization"));
		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0010 (0x0038 - 0x0028)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<FComponentOverrideRecord>                   Records;                                                  // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InheritableComponentHandler"));
		return ptr;
	}

};


// Class Engine.PlayerInput
// 0x0400 (0x0428 - 0x0028)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0028(0x00F8) MISSED OFFSET
	TArray<FKeyBind>                                   DebugExecBindings;                                        // 0x0120(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0130(0x0040) MISSED OFFSET
	TArray<FName>                                      GamepadInvertedAxes;                                      // 0x0170(0x0010) (ZeroConstructor, Config)
	TArray<FName>                                      MouseInvertedAxes;                                        // 0x0180(0x0010) (ZeroConstructor, Config)
	TArray<FName>                                      InvertedCombinedAxisY;                                    // 0x0190(0x0010) (ZeroConstructor, Config)
	TArray<FName>                                      InvertedCombinedAxisX;                                    // 0x01A0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x278];                                     // 0x01B0(0x0278) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlayerInput"));
		return ptr;
	}


	void SetMouseSensitivity(float Sensitivity);
	void SetForceFeedbackIntensity(float Intensity);
	void SetCombinedAxisScale(const FName& CombinedAxisName, float Scale);
	void SetCombinedAxisNonLinearity(const FName& CombinedAxisName, float NonLinearity);
	void SetCombinedAxisLowerDeadzone(const FName& CombinedAxisName, float LowerDeadzone);
	void SetBind(const FName& BindName, const FString& Command);
	void InvertMouseAxis(const FName& AxisName);
	void InvertGamepadAxis(const FName& AxisName);
	void InvertCombinedAxisY(const FName& CombinedAxisName);
	void InvertCombinedAxisX(const FName& CombinedAxisName);
	void InvertAxisKey(const FKey& AxisKey);
	void ClearSmoothing();
};


// Class Engine.InputSettings
// 0x0098 (0x00C0 - 0x0028)
class UInputSettings : public UObject
{
public:
	TArray<FInputAxisConfigEntry>                      AxisConfig;                                               // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bUseMouseForTouch : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMouseSmoothing : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableFOVScaling : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              FOVScale;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<FInputActionKeyMapping>                     ActionMappings;                                           // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<FInputCombinedAxisKeyMapping>               CombinedAxisMappings;                                     // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bAlwaysShowTouchInterface;                                // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowConsoleOnFourFingerTap;                              // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x007A(0x0006) MISSED OFFSET
	FStringAssetReference                              DefaultTouchInterface;                                    // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	FKey                                               ConsoleKey;                                               // 0x0090(0x0020) (Config, Deprecated)
	TArray<FKey>                                       ConsoleKeys;                                              // 0x00B0(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InputSettings"));
		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<FCurveEdTab>                                Tabs;                                                     // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpCurveEdSetup"));
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<UInterpGroup*>                              InterpGroups;                                             // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	UInterpCurveEdSetup*                               CurveEdSetup;                                             // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                                  // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	UInterpGroupDirector*                              CachedDirectorGroup;                                      // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<FName>                                      AllEventNames;                                            // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpData"));
		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
class UInterpFilter : public UObject
{
public:
	FString                                            Caption;                                                  // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpFilter"));
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpFilter_Classes"));
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpFilter_Custom"));
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0050 - 0x0028)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<UInterpTrack*>                              InterpTracks;                                             // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	FName                                              GroupName;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	FColor                                             GroupColor;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x004C(0x0001) (Transient)
	unsigned char                                      bIsFolder : 1;                                            // 0x004C(0x0001)
	unsigned char                                      bIsParented : 1;                                          // 0x004C(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x004C(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroup"));
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0060 - 0x0050)
class UInterpGroupCamera : public UInterpGroup
{
public:
	UCameraAnim*                                       CameraAnimInst;                                           // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroupCamera"));
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroupDirector"));
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
class UInterpGroupInst : public UObject
{
public:
	UInterpGroup*                                      Group;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	AActor*                                            GroupActor;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<UInterpTrackInst*>                          TrackInst;                                                // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroupInst"));
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroupInstCamera"));
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpGroupInstDirector"));
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0048 (0x0070 - 0x0028)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<UInterpTrack*>                              SubTracks;                                                // 0x0038(0x0010) (ZeroConstructor)
	UClass*                                            TrackInstClass;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FString                                            TrackTitle;                                               // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                         // 0x0068(0x0001)
	unsigned char                                      bDirGroupOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bDisableTrack : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsAnimControlTrack : 1;                                  // 0x0068(0x0001)
	unsigned char                                      bSubTrackOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsRecording : 1;                                         // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrack"));
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<FBoolTrackKey>                              BoolTrack;                                                // 0x0070(0x0010) (ZeroConstructor)
	FName                                              PropertyName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackBoolProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<FDirectorTrackCut>                          CutTrack;                                                 // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                         // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackDirector"));
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<FEventTrackKey>                             EventTrack;                                               // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      bUseCustomEventName : 1;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackEvent"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	FInterpCurveFloat                                  FloatTrack;                                               // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFloatBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	FName                                              SlotName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FAnimControlTrackKey>                       AnimSeqs;                                                 // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackAnimControl"));
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                         // 0x0090(0x0001) (Edit)
	unsigned char                                      bFadeAudio : 1;                                           // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	FLinearColor                                       FadeColor;                                                // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFade"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	UClass*                                            AnimBlueprintClass;                                       // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              ParamName;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFloatAnimBPParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<UMaterialInterface*>                        TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	FName                                              ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFloatMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	FName                                              ParamName;                                                // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFloatParticleParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	FName                                              PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackFloatProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00C8 - 0x0070)
class UInterpTrackMove : public UInterpTrack
{
public:
	FInterpCurveVector                                 PosTrack;                                                 // 0x0070(0x0018) (ZeroConstructor)
	FInterpCurveVector                                 EulerTrack;                                               // 0x0088(0x0018) (ZeroConstructor)
	FInterpLookupTrack                                 LookupTrack;                                              // 0x00A0(0x0010)
	FName                                              LookAtGroupName;                                          // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                                // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowArrowAtKeys : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bDisableMovement : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowRotationOnCurveEd : 1;                               // 0x00C0(0x0001) (Edit)
	unsigned char                                      bHide3DTrack : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackMove"));
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	FInterpLookupTrack                                 LookupTrack;                                              // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackMoveAxis"));
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	FInterpCurveLinearColor                            LinearColorTrack;                                         // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackLinearColorBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	FName                                              PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackLinearColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<FParticleReplayTrackKey>                    TrackKeys;                                                // 0x0070(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackParticleReplay"));
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<FToggleTrackKey>                            ToggleTrack;                                              // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                            // 0x0080(0x0001) (Edit)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                        // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackToggle"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	FInterpCurveVector                                 VectorTrack;                                              // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackVectorBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackAudioMaster"));
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	FName                                              PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackColorScale"));
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<FSoundTrackKey>                             Sounds;                                                   // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A0(0x0001) (Edit)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      bTreatAsDialogue : 1;                                     // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAttach : 1;                                              // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackSound"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<UMaterialInterface*>                        TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	FName                                              ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackVectorMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	FName                                              PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackVectorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<FVisibilityTrackKey>                        VisibilityTrack;                                          // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackVisibility"));
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInst"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstAnimControl"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstAudioMaster"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstColorScale"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	AActor*                                            OldViewTarget;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstDirector"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstEvent"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstFade"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	UAnimInstance*                                     AnimScriptInstance;                                       // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstFloatAnimBPParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<UMaterialInstanceDynamic*>                  MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	UInterpTrackFloatMaterialParam*                    InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstFloatMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstFloatParticleParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	FVector                                            ResetLocation;                                            // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData)
	FRotator                                           ResetRotation;                                            // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstMove"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstParticleReplay"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	UProperty*                                         InterpProperty;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	UObject*                                           PropertyOuterObjectInst;                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstProperty"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	UBoolProperty*                                     BoolProperty;                                             // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ResetBool;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstBoolProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	FColor                                             ResetColor;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstFloatProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	FLinearColor                                       ResetColor;                                               // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstLinearColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	FVector                                            ResetVector;                                              // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstVectorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	UAudioComponent*                                   PlayAudioComp;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstSound"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstToggle"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<UMaterialInstanceDynamic*>                  MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<FVector>                                    ResetVectors;                                             // 0x0038(0x0010) (ZeroConstructor)
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	UInterpTrackVectorMaterialParam*                   InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstVectorMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InterpTrackInstVisibility"));
		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0039(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                                      // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                                      // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.IntSerialization"));
		return ptr;
	}

};


// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class ULayer : public UObject
{
public:
	FName                                              LayerName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<FLayerActorStats>                           ActorStats;                                               // 0x0038(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Layer"));
		return ptr;
	}

};


// Class Engine.LevelActorContainer
// 0x0010 (0x0038 - 0x0028)
class ULevelActorContainer : public UObject
{
public:
	TArray<AActor*>                                    Actors;                                                   // 0x0028(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelActorContainer"));
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x01E8 (0x0210 - 0x0028)
class ULevelStreaming : public UObject
{
public:
	TAssetPtr<class UWorld>                            WorldAsset;                                               // 0x0028(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	FName                                              PackageNameToLoad;                                        // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<FName>                                      LODPackageNames;                                          // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	FTransform                                         LevelTransform;                                           // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x00B0(0x000C) MISSED OFFSET
	unsigned char                                      UnknownData03 : 3;                                        // 0x00BC(0x0001)
	unsigned char                                      bShouldBeVisibleInEditor : 1;                             // 0x00BC(0x0001)
	unsigned char                                      Blocked : 1;                                              // 0x00BC(0x0001)
	unsigned char                                      bShouldBeLoaded : 1;                                      // 0x00BC(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBeVisible : 1;                                     // 0x00BC(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBlockOnLoad : 1;                                   // 0x00BC(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                LevelLODIndex;                                            // 0x00C0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDisableDistanceStreaming : 1;                            // 0x00C4(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData05 : 2;                                        // 0x00C4(0x0001)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                // 0x00C4(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	FLinearColor                                       LevelColor;                                               // 0x00C8(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<ALevelStreamingVolume*>                     EditorStreamingVolumes;                                   // 0x00D8(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	TArray<FString>                                    Keywords;                                                 // 0x00F0(0x0010) (ZeroConstructor)
	FScriptMulticastDelegate                           OnLevelLoaded;                                            // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnLevelUnloaded;                                          // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnLevelShown;                                             // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	FScriptMulticastDelegate                           OnLevelHidden;                                            // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0xC0];                                      // 0x0140(0x00C0) MISSED OFFSET
	ULevel*                                            LoadedLevel;                                              // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	ULevel*                                            PendingUnloadLevel;                                       // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelStreaming"));
		return ptr;
	}


	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	ALevelScriptActor* GetLevelScriptActor();
	ULevelStreaming* CreateInstance(const FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0210 - 0x0210)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelStreamingAlwaysLoaded"));
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0010 (0x0220 - 0x0210)
class ULevelStreamingKismet : public ULevelStreaming
{
public:
	unsigned char                                      bInitiallyLoaded : 1;                                     // 0x0210(0x0001) (Edit)
	unsigned char                                      bInitiallyVisible : 1;                                    // 0x0210(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0211(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelStreamingKismet"));
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0210 - 0x0210)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LevelStreamingPersistent"));
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class ULightmappedSurfaceCollection : public UObject
{
public:
	UModel*                                            SourceModel;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightmappedSurfaceCollection"));
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	FLightmassPrimitiveSettings                        LightmassSettings;                                        // 0x0028(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightmassPrimitiveSettingsObject"));
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LocalMessage"));
		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngineMessage : public ULocalMessage
{
public:
	FString                                            FailedPlaceMessage;                                       // 0x0028(0x0010) (ZeroConstructor)
	FString                                            MaxedOutMessage;                                          // 0x0038(0x0010) (ZeroConstructor)
	FString                                            EnteredMessage;                                           // 0x0048(0x0010) (ZeroConstructor)
	FString                                            LeftMessage;                                              // 0x0058(0x0010) (ZeroConstructor)
	FString                                            GlobalNameChange;                                         // 0x0068(0x0010) (ZeroConstructor)
	FString                                            SpecEnteredMessage;                                       // 0x0078(0x0010) (ZeroConstructor)
	FString                                            NewPlayerMessage;                                         // 0x0088(0x0010) (ZeroConstructor)
	FString                                            NewSpecMessage;                                           // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.EngineMessage"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionAbs"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionActorPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionAdd"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionAppendVector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	FExpressionInput                                   WorldPosition;                                            // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionAtmosphericFogColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlackBody
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	FExpressionInput                                   Temp;                                                     // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionBlackBody"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBoneMatrix
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionBoneMatrix : public UMaterialExpression
{
public:
	int                                                ReferenceIndex;                                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              BoneName;                                                 // 0x0074(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPosition;                                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionBoneMatrix"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	FExpressionInput                                   Struct;                                                   // 0x0070(0x0038) (ZeroConstructor)
	FMaterialAttributesInput                           MaterialAttributes;                                       // 0x00A8(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionBreakMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinate;                                               // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Height;                                                   // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   HeightRatioInput;                                         // 0x00E0(0x0038) (ZeroConstructor)
	float                                              HeightRatio;                                              // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionBumpOffset"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCameraPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCameraVectorWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCausticTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCausticTexture : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCausticTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCausticTextureCoordinate
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCausticTextureCoordinate : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCausticTextureCoordinate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCeil"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Min;                                                      // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   Max;                                                      // 0x00E0(0x0038) (ZeroConstructor)
	TEnumAsByte<EClampMode>                            ClampMode;                                                // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              MinDefault;                                               // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionClamp"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	UMaterialParameterCollection*                      Collection;                                               // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              ParameterName;                                            // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FGuid                                              ParameterId;                                              // 0x0080(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCollectionParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0028 (0x0098 - 0x0070)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	FString                                            Text;                                                     // 0x0078(0x0010) (Edit, ZeroConstructor)
	FLinearColor                                       CommentColor;                                             // 0x0088(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionComment"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	unsigned char                                      R : 1;                                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      G : 1;                                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      B : 1;                                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      A : 1;                                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionComponentMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionConstant"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              G;                                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionConstant2Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	FLinearColor                                       Constant;                                                 // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionConstant3Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	FLinearColor                                       Constant;                                                 // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionConstant4Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	float                                              Bias;                                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionConstantBiasScale"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	float                                              Period;                                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCosine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCrossProduct"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0048 (0x00B8 - 0x0070)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	FString                                            Code;                                                     // 0x0070(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	FString                                            Description;                                              // 0x0088(0x0010) (Edit, ZeroConstructor)
	TArray<FCustomInput>                               Inputs;                                                   // 0x0098(0x0010) (Edit, ZeroConstructor)
	FString                                            DeclarationCode;                                          // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCustom"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomVelocity
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCustomVelocity : public UMaterialExpressionCustomOutput
{
public:
	FExpressionInput                                   Velocity2D;                                               // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionCustomVelocity"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	FExpressionInput                                   Value;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDDX"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	FExpressionInput                                   Value;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDDY"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	FExpressionInput                                   TextureSize;                                              // 0x0070(0x0038) (ZeroConstructor)
	float                                              ConstWidth;                                               // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstHeight;                                              // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDecalMipmapLevel"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	FExpressionInput                                   InOpacity;                                                // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   FadeDistance;                                             // 0x00A8(0x0038) (ZeroConstructor)
	float                                              OpacityDefault;                                           // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDepthFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	FExpressionInput                                   Depth;                                                    // 0x0078(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDepthOfFieldFunction"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	FExpressionInput                                   InXY;                                                     // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDeriveNormalZ"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Fraction;                                                 // 0x00A8(0x0038) (ZeroConstructor)
	FLinearColor                                       LuminanceFactors;                                         // 0x00E0(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDesaturation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDistance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDistanceCullFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	FExpressionInput                                   Position;                                                 // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDistanceFieldGradient"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	FExpressionInput                                   Position;                                                 // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDistanceToNearestSurface"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDivide"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDotProduct"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<FString>                                    ParamNames;                                               // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	FLinearColor                                       DefaultValue;                                             // 0x0080(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionDynamicParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionEyeAdaptation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (0x0188 - 0x0070)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	FExpressionInput                                   Default;                                                  // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Inputs[0x4];                                              // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFeatureLevelSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFloor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFmod"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	UFont*                                             Font;                                                     // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFontSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x00A0 - 0x0080)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	FName                                              ParameterName;                                            // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FGuid                                              ExpressionGUID;                                           // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData)
	FName                                              Group;                                                    // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFontSampleParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFrac"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	FExpressionInput                                   ExponentIn;                                               // 0x0070(0x0038) (ZeroConstructor)
	float                                              Exponent;                                                 // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	FExpressionInput                                   BaseReflectFractionIn;                                    // 0x00B0(0x0038) (ZeroConstructor)
	float                                              BaseReflectFraction;                                      // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	FExpressionInput                                   Normal;                                                   // 0x00F0(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFresnel"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x0090 (0x0100 - 0x0070)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	FExpressionInput                                   Preview;                                                  // 0x0070(0x0038) (ZeroConstructor)
	FString                                            InputName;                                                // 0x00A8(0x0010) (Edit, ZeroConstructor)
	FString                                            Description;                                              // 0x00B8(0x0010) (Edit, ZeroConstructor)
	FGuid                                              Id;                                                       // 0x00C8(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	FVector4                                           PreviewValue;                                             // 0x00E0(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                            // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                             // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                            // 0x00F8(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFunctionInput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	FString                                            OutputName;                                               // 0x0070(0x0010) (Edit, ZeroConstructor)
	FString                                            Description;                                              // 0x0080(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	FExpressionInput                                   A;                                                        // 0x0098(0x0038) (ZeroConstructor)
	unsigned char                                      bLastPreviewed : 1;                                       // 0x00D0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	FGuid                                              Id;                                                       // 0x00D4(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionFunctionOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (0x0118 - 0x0070)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	FExpressionInput                                   Default;                                                  // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   StaticIndirect;                                           // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   DynamicIndirect;                                          // 0x00E0(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionGIReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionHash
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionHash : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionHash"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0128 (0x0198 - 0x0070)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   AGreaterThanB;                                            // 0x00E0(0x0038) (ZeroConstructor)
	FExpressionInput                                   AEqualsB;                                                 // 0x0118(0x0038) (ZeroConstructor)
	FExpressionInput                                   ALessThanB;                                               // 0x0150(0x0038) (ZeroConstructor)
	float                                              EqualsThreshold;                                          // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x0190(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionIf"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionIfCondition
// 0x00F0 (0x0160 - 0x0070)
class UMaterialExpressionIfCondition : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   IfTrue;                                                   // 0x00E0(0x0038) (ZeroConstructor)
	FExpressionInput                                   IfFalse;                                                  // 0x0118(0x0038) (ZeroConstructor)
	TEnumAsByte<EIfExpressionCondition>                Condition;                                                // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EIfExpressionAttribute>                Attribute;                                                // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0152(0x0002) MISSED OFFSET
	float                                              ConstB;                                                   // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstIfTrue;                                              // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstIfFalse;                                             // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionIfCondition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionIfShadowPass
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionIfShadowPass : public UMaterialExpression
{
public:
	FExpressionInput                                   Shadow;                                                   // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   NotShadow;                                                // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionIfShadowPass"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLightmapUVs"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	FExpressionInput                                   Realtime;                                                 // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Lightmass;                                                // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLightmassReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLightVector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   Alpha;                                                    // 0x00E0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLinearInterpolate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLocalDisturbanceTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLocalDisturbanceTexture : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLocalDisturbanceTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	FExpressionInput                                   X;                                                        // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLogarithm2"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLowResClouds
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLowResClouds : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLowResClouds"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLumaAvg
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLumaAvg : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionLumaAvg"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0578 (0x05E8 - 0x0070)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	FExpressionInput                                   BaseColor;                                                // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Metallic;                                                 // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   Specular;                                                 // 0x00E0(0x0038) (ZeroConstructor)
	FExpressionInput                                   Roughness;                                                // 0x0118(0x0038) (ZeroConstructor)
	FExpressionInput                                   EmissiveColor;                                            // 0x0150(0x0038) (ZeroConstructor)
	FExpressionInput                                   Opacity;                                                  // 0x0188(0x0038) (ZeroConstructor)
	FExpressionInput                                   OpacityMask;                                              // 0x01C0(0x0038) (ZeroConstructor)
	FExpressionInput                                   Normal;                                                   // 0x01F8(0x0038) (ZeroConstructor)
	FExpressionInput                                   WorldPositionOffset;                                      // 0x0230(0x0038) (ZeroConstructor)
	FExpressionInput                                   WorldDisplacement;                                        // 0x0268(0x0038) (ZeroConstructor)
	FExpressionInput                                   TessellationMultiplier;                                   // 0x02A0(0x0038) (ZeroConstructor)
	FExpressionInput                                   SubsurfaceColor;                                          // 0x02D8(0x0038) (ZeroConstructor)
	FExpressionInput                                   ClearCoat;                                                // 0x0310(0x0038) (ZeroConstructor)
	FExpressionInput                                   ClearCoatRoughness;                                       // 0x0348(0x0038) (ZeroConstructor)
	FExpressionInput                                   AmbientOcclusion;                                         // 0x0380(0x0038) (ZeroConstructor)
	FExpressionInput                                   Refraction;                                               // 0x03B8(0x0038) (ZeroConstructor)
	FExpressionInput                                   CustomizedUVs[0x8];                                       // 0x03F0(0x0038) (ZeroConstructor)
	FExpressionInput                                   PixelDepthOffset;                                         // 0x05B0(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionMakeMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (0x0098 - 0x0070)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	UMaterialFunction*                                 MaterialFunction;                                         // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FFunctionExpressionInput>                   FunctionInputs;                                           // 0x0078(0x0010) (ZeroConstructor)
	TArray<FFunctionExpressionOutput>                  FunctionOutputs;                                          // 0x0088(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionMaterialFunctionCall"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionMax"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionMin"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionMultiply"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0090 (0x0100 - 0x0070)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	FExpressionInput                                   Position;                                                 // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   FilterWidth;                                              // 0x00A8(0x0038) (ZeroConstructor)
	float                                              Scale;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                            // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence : 1;                                          // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	int                                                Levels;                                                   // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMin;                                                // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMax;                                                // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LevelScale;                                               // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionNoise"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	FExpressionInput                                   VectorInput;                                              // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionNormalize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionObjectBounds"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionObjectOrientation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionObjectPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionObjectRadius"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionOneMinus"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinate;                                               // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Time;                                                     // 0x00A8(0x0038) (ZeroConstructor)
	float                                              SpeedX;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedY;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFractionalPart;                                          // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPanner"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	FName                                              ParameterName;                                            // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FGuid                                              ExpressionGUID;                                           // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData)
	FName                                              Group;                                                    // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (0x00A0 - 0x0090)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SliderMin;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SliderMax;                                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x009D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionScalarParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0098 - 0x0090)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionStaticBoolParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (0x0108 - 0x0098)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	FExpressionInput                                   A;                                                        // 0x0098(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00D0(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionStaticSwitchParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (0x00D0 - 0x0090)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	FExpressionInput                                   Input;                                                    // 0x0090(0x0038) (ZeroConstructor)
	unsigned char                                      DefaultR : 1;                                             // 0x00C8(0x0001) (Edit)
	unsigned char                                      DefaultG : 1;                                             // 0x00C8(0x0001) (Edit)
	unsigned char                                      DefaultB : 1;                                             // 0x00C8(0x0001) (Edit)
	unsigned char                                      DefaultA : 1;                                             // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionStaticComponentMaskParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (0x00A8 - 0x0090)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	FLinearColor                                       DefaultValue;                                             // 0x0090(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionVectorParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleDirection"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleMacroUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleMotionBlurFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticlePositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleRadius"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleRelativeTime"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleSpeed"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPerInstanceFadeAmount"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPerInstanceRandom"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPixelDepth"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPixelNormalWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	FExpressionInput                                   Base;                                                     // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Exponent;                                                 // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstExponent;                                            // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPower"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPrecomputedAOMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x00E0 (0x0150 - 0x0070)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	FExpressionInput                                   Default;                                                  // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Inputs[0x3];                                              // 0x00A8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionQualitySwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	FExpressionInput                                   CustomWorldNormal;                                        // 0x0070(0x0038) (ZeroConstructor)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                          // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionReflectionVectorWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (0x0158 - 0x0070)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	FExpressionInput                                   NormalizedRotationAxis;                                   // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   RotationAngle;                                            // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   PivotPoint;                                               // 0x00E0(0x0038) (ZeroConstructor)
	FExpressionInput                                   Position;                                                 // 0x0118(0x0038) (ZeroConstructor)
	float                                              Period;                                                   // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionRotateAboutAxis"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinate;                                               // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   Time;                                                     // 0x00A8(0x0038) (ZeroConstructor)
	float                                              CenterX;                                                  // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterY;                                                  // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionRotator"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	FExpressionInput                                   Input;                                                    // 0x0078(0x0038) (ZeroConstructor)
	FExpressionInput                                   OffsetFraction;                                           // 0x00B0(0x0038) (ZeroConstructor, Deprecated)
	FVector2D                                          ConstInput;                                               // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSceneColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	FExpressionInput                                   Input;                                                    // 0x0078(0x0038) (ZeroConstructor)
	FExpressionInput                                   Coordinates;                                              // 0x00B0(0x0038) (ZeroConstructor, Deprecated)
	FVector2D                                          ConstInput;                                               // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSceneDepth"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSceneTexelSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                           // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bClampUVs;                                                // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFiltered;                                                // 0x00AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00AB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSceneTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionScreenPosition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	float                                              Period;                                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                 // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                  // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0073(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                                       // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAccurateWindVelocities;                                  // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSpeedTree"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (0x0158 - 0x0070)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	FExpressionInput                                   Radius;                                                   // 0x00E0(0x0038) (ZeroConstructor)
	FExpressionInput                                   Hardness;                                                 // 0x0118(0x0038) (ZeroConstructor)
	float                                              AttenuationRadius;                                        // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSphereMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	FExpressionInput                                   Density;                                                  // 0x0070(0x0038) (ZeroConstructor)
	float                                              ConstantDensity;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSphericalParticleOpacity"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSquareRoot"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionStaticBool"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (0x0120 - 0x0070)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	FExpressionInput                                   A;                                                        // 0x0078(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00B0(0x0038) (ZeroConstructor)
	FExpressionInput                                   Value;                                                    // 0x00E8(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionStaticSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	FExpressionInput                                   A;                                                        // 0x0070(0x0038) (ZeroConstructor)
	FExpressionInput                                   B;                                                        // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionSubtract"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	UTexture*                                          Texture;                                                  // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialSamplerType>                  SamplerType;                                              // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                            // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureBase"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureObject"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0128 (0x01A8 - 0x0080)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0080(0x0038) (ZeroConstructor)
	FExpressionInput                                   TextureObject;                                            // 0x00B8(0x0038) (ZeroConstructor)
	FExpressionInput                                   MipValue;                                                 // 0x00F0(0x0038) (ZeroConstructor)
	FExpressionInput                                   CoordinatesDX;                                            // 0x0128(0x0038) (ZeroConstructor)
	FExpressionInput                                   CoordinatesDY;                                            // 0x0160(0x0038) (ZeroConstructor)
	TEnumAsByte<ETextureMipValueMode>                  MipValueMode;                                             // 0x0198(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESamplerSourceMode>                    SamplerSource;                                            // 0x0199(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x019A(0x0002) MISSED OFFSET
	uint32_t                                           ConstCoordinate;                                          // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ConstMipValue;                                            // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x01B0 - 0x01A8)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x01A8(0x0001) (Edit)
	unsigned char                                      bMipBiasOnLowResolution : 1;                              // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionParticleSubUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPredicatedTextureSample
// 0x0040 (0x01E8 - 0x01A8)
class UMaterialExpressionPredicatedTextureSample : public UMaterialExpressionTextureSample
{
public:
	FExpressionInput                                   Predicate;                                                // 0x01A8(0x0038) (ZeroConstructor)
	FColor                                             DefaultColour;                                            // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPredicatedTextureSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x01C8 - 0x01A8)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	FName                                              ParameterName;                                            // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FGuid                                              ExpressionGUID;                                           // 0x01B0(0x0010) (ZeroConstructor, IsPlainOldData)
	FName                                              Group;                                                    // 0x01C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureSampleParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureObjectParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureSampleParameter2D"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x01D0 - 0x01C8)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x01CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01CD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionAntialiasedTextureMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D
// 0x0040 (0x0208 - 0x01C8)
class UMaterialExpressionPredicatedTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter2D
{
public:
	FExpressionInput                                   Predicate;                                                // 0x01C8(0x0038) (ZeroConstructor)
	FColor                                             DefaultColour;                                            // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x01D0 - 0x01C8)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x01C8(0x0001) (Edit)
	unsigned char                                      bMipBiasOnLowResolution : 1;                              // 0x01C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureSampleParameterSubUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureSampleParameterCube"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UTiling;                                                  // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VTiling;                                                  // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                            // 0x007C(0x0001) (Edit)
	unsigned char                                      UnMirrorV : 1;                                            // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTextureCoordinate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      bOverride_Period : 1;                                     // 0x0070(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              Period;                                                   // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTime"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTransform"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	FExpressionInput                                   Input;                                                    // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                            // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTransformPosition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionTwoSidedSign"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionUnderwaterTranslucencyTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionUnderwaterTranslucencyTexture : public UMaterialExpression
{
public:
	FExpressionInput                                   Coordinates;                                              // 0x0070(0x0038) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionUnderwaterTranslucencyTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionVertexColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexID
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexID : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionVertexID"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionVertexNormalWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionViewProperty"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionViewSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialExpressionWorldPosition"));
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0050 (0x0078 - 0x0028)
class UMaterialFunction : public UObject
{
public:
	FGuid                                              StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	FString                                            Description;                                              // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                                     // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<FText>                                      LibraryCategoriesText;                                    // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<UMaterialExpression*>                       FunctionExpressions;                                      // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                                       // 0x0070(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialFunction"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0000 (0x01B8 - 0x01B8)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialInstanceDynamic"));
		return ptr;
	}


	void SetVectorParameterValue(const FName& ParameterName, const FLinearColor& Value);
	void SetTextureParameterValue(const FName& ParameterName, UTexture* Value);
	void SetScalarParameterValue(const FName& ParameterName, float Value);
	void MergeParameters(UMaterialInstance* MaterialInstance);
	void K2_InterpolateMaterialInstanceParams(UMaterialInstance* MaterialA, UMaterialInstance* MaterialB, float Alpha);
	FLinearColor K2_GetVectorParameterValue(const FName& ParameterName);
	UTexture* K2_GetTextureParameterValue(const FName& ParameterName);
	float K2_GetScalarParameterValue(const FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(UMaterialInterface* SourceMaterialToCopyFrom, bool bOverride);
	void CopyParameterOverrides(UMaterialInstance* MaterialInstance);
};


// Class Engine.MaterialParameterCollection
// 0x0038 (0x0060 - 0x0028)
class UMaterialParameterCollection : public UObject
{
public:
	FGuid                                              StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	TArray<FCollectionScalarParameter>                 ScalarParameters;                                         // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<FCollectionVectorParameter>                 VectorParameters;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialParameterCollection"));
		return ptr;
	}

};


// Class Engine.MaterialParameterCollectionInstance
// 0x00C8 (0x00F0 - 0x0028)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	UMaterialParameterCollection*                      Collection;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	UWorld*                                            World;                                                    // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0040(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaterialParameterCollectionInstance"));
		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MatineeInterface"));
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0058 (0x0190 - 0x0138)
class UTexture2D : public UTexture
{
public:
	int                                                RequestedMips;                                            // 0x0138(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ResidentMips;                                             // 0x013C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                StreamingIndex;                                           // 0x0140(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                FirstResourceMemMip;                                      // 0x0144(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0148(0x0004) MISSED OFFSET
	FIntPoint                                          ImportedSize;                                             // 0x014C(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              ForceMipLevelsToBeResidentTimestamp;                      // 0x0154(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                         // 0x0158(0x0001) (Transient)
	unsigned char                                      bIsStreamable : 1;                                        // 0x0158(0x0001) (Transient)
	unsigned char                                      bHasCancelationPending : 1;                               // 0x0158(0x0001) (Transient)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                          // 0x0158(0x0001) (Transient)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x015D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x015E(0x0002) MISSED OFFSET
	int                                                MinimumLoadedMips;                                        // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2C];                                      // 0x0164(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Texture2D"));
		return ptr;
	}


	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};


// Class Engine.CanvasRenderTarget2D
// 0x0018 (0x0180 - 0x0168)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	FScriptMulticastDelegate                           OnCanvasRenderTargetUpdate;                               // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CanvasRenderTarget2D"));
		return ptr;
	}


	void UpdateResource();
	void Render();
	void ReceiveUpdate(UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	static UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass* CanvasRenderTarget2DClass, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource);
};


// Class Engine.CompressedCanvasRenderTarget2D
// 0x0018 (0x01A8 - 0x0190)
class UCompressedCanvasRenderTarget2D : public UTexture2D
{
public:
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	UCanvasRenderTarget2D*                             RenderTarget;                                             // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CompressedCanvasRenderTarget2D"));
		return ptr;
	}


	void UpdateResource();
};


// Class Engine.MaybeCompressedCanvasRenderTarget2D
// 0x0020 (0x0048 - 0x0028)
class UMaybeCompressedCanvasRenderTarget2D : public UObject
{
public:
	FScriptMulticastDelegate                           OnCanvasUpdate;                                           // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	UCanvasRenderTarget2D*                             UncompressedRenderTarget;                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	UCompressedCanvasRenderTarget2D*                   CompressedRenderTarget;                                   // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MaybeCompressedCanvasRenderTarget2D"));
		return ptr;
	}


	void UpdateResource();
	UTexture* GetTexture();
	static UMaybeCompressedCanvasRenderTarget2D* CreateMaybeCompressedCanvasRenderTarget2D(UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource);
};


// Class Engine.NavArea_Default
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Default : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavArea_Default"));
		return ptr;
	}

};


// Class Engine.NavArea_LowHeight
// 0x0000 (0x0040 - 0x0040)
class UNavArea_LowHeight : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavArea_LowHeight"));
		return ptr;
	}

};


// Class Engine.NavArea_Null
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Null : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavArea_Null"));
		return ptr;
	}

};


// Class Engine.NavArea_Obstacle
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Obstacle : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavArea_Obstacle"));
		return ptr;
	}

};


// Class Engine.NavAreaMeta
// 0x0000 (0x0040 - 0x0040)
class UNavAreaMeta : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavAreaMeta"));
		return ptr;
	}

};


// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (0x00C0 - 0x0040)
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	UClass*                                            Agent0Area;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent1Area;                                               // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent2Area;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent3Area;                                               // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent4Area;                                               // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent5Area;                                               // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent6Area;                                               // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent7Area;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent8Area;                                               // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent9Area;                                               // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent10Area;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent11Area;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent12Area;                                              // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent13Area;                                              // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent14Area;                                              // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	UClass*                                            Agent15Area;                                              // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavAreaMeta_SwitchByAgent"));
		return ptr;
	}

};


// Class Engine.NavCollision
// 0x00E8 (0x0110 - 0x0028)
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET
	TArray<FNavCollisionCylinder>                      CylinderCollision;                                        // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<FNavCollisionBox>                           BoxCollision;                                             // 0x0088(0x0010) (Edit, ZeroConstructor)
	UClass*                                            AreaClass;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsDynamicObstacle : 1;                                   // 0x00A0(0x0001) (Edit, Config)
	unsigned char                                      bGatherConvexGeometry : 1;                                // 0x00A0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x6F];                                      // 0x00A1(0x006F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavCollision"));
		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UNavigationDataChunk : public UObject
{
public:
	FName                                              NavigationDataName;                                       // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationDataChunk"));
		return ptr;
	}

};


// Class Engine.RecastNavMeshDataChunk
// 0x0010 (0x0040 - 0x0030)
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RecastNavMeshDataChunk"));
		return ptr;
	}

};


// Class Engine.NavigationPath
// 0x0060 (0x0088 - 0x0028)
class UNavigationPath : public UObject
{
public:
	FScriptMulticastDelegate                           PathUpdatedNotifier;                                      // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<FVector>                                    PathPoints;                                               // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<ENavigationOptionFlag>                 RecalculateOnInvalidation;                                // 0x0048(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3F];                                      // 0x0049(0x003F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationPath"));
		return ptr;
	}


	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	FString GetDebugString();
	void EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const FLinearColor& PathColor);
};


// Class Engine.NavigationPathGenerator
// 0x0000 (0x0028 - 0x0028)
class UNavigationPathGenerator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavigationPathGenerator"));
		return ptr;
	}

};


// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (0x0040 - 0x0040)
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.RecastFilter_UseDefaultArea"));
		return ptr;
	}

};


// Class Engine.NavLinkTrivial
// 0x0000 (0x0050 - 0x0050)
class UNavLinkTrivial : public UNavLinkDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavLinkTrivial"));
		return ptr;
	}

};


// Class Engine.NavNodeInterface
// 0x0000 (0x0028 - 0x0028)
class UNavNodeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NavNodeInterface"));
		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x00D8 (0x0550 - 0x0478)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0478(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DemoNetDriver"));
		return ptr;
	}

};


// Class Engine.NetPhysicsInterpolatorInterface
// 0x0000 (0x0028 - 0x0028)
class UNetPhysicsInterpolatorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.NetPhysicsInterpolatorInterface"));
		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0048 (0x0070 - 0x0028)
class UObjectLibrary : public UObject
{
public:
	UClass*                                            ObjectBaseClass;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBlueprintClasses;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<UObject*>                                   Objects;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0048(0x0010) (ZeroConstructor)
	bool                                               bUseWeakReferences;                                       // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsFullyLoaded;                                           // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x16];                                      // 0x005A(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ObjectLibrary"));
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UObjectReferencer : public UObject
{
public:
	TArray<UObject*>                                   ReferencedObjects;                                        // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ObjectReferencer"));
		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x01A8 (0x01F8 - 0x0050)
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x1A8];                                     // 0x0050(0x01A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PackageMapClient"));
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0088 (0x00B0 - 0x0028)
class UParticleEmitter : public UObject
{
public:
	FName                                              EmitterName;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<UParticleLODLevel*>                         LODLevels;                                                // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      ConvertedModules : 1;                                     // 0x0048(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MediumDetailSpawnRateScale;                               // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterQuality>                       MaxEmitterQuality;                                        // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterQuality>                       MinEmitterQuality;                                        // 0x005E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x005F(0x0001) MISSED OFFSET
	unsigned char                                      bIsSoloing : 1;                                           // 0x0060(0x0001) (Transient)
	unsigned char                                      bCookedOut : 1;                                           // 0x0060(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                        // 0x0060(0x0001) (Edit)
	unsigned char                                      bHasAnyEnabledLODs : 1;                                   // 0x0060(0x0001) (Transient)
	unsigned char                                      bHasAnyEnabledLODsValid : 1;                              // 0x0060(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x3F];                                      // 0x0061(0x003F) MISSED OFFSET
	TArray<UParticleModule*>                           ModulesNeedingInstanceData;                               // 0x00A0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x00B0 - 0x00B0)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleSpriteEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	UParticleModuleRequired*                           RequiredModule;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<UParticleModule*>                           Modules;                                                  // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	UParticleModule*                                   TypeDataModule;                                           // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	UParticleModuleSpawn*                              SpawnModule;                                              // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	UParticleModuleEventGenerator*                     EventGenerator;                                           // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	TArray<UParticleModuleSpawnBase*>                  SpawningModules;                                          // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<UParticleModule*>                           SpawnModules;                                             // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<UParticleModule*>                           UpdateModules;                                            // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<UParticleModuleOrbit*>                      OrbitModules;                                             // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<UParticleModuleEventReceiverBase*>          EventReceiverModules;                                     // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                     // 0x00B0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleLODLevel"));
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0028 (0x0050 - 0x0028)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                         // 0x0028(0x0001)
	unsigned char                                      bUpdateModule : 1;                                        // 0x0028(0x0001)
	unsigned char                                      bFinalUpdateModule : 1;                                   // 0x0028(0x0001)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bCurvesAsColor : 1;                                       // 0x0028(0x0001)
	unsigned char                                      b3DDrawMode : 1;                                          // 0x0028(0x0001) (Edit)
	unsigned char                                      bSupported3DDrawMode : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001)
	unsigned char                                      bEditable : 1;                                            // 0x0029(0x0001)
	unsigned char                                      LODDuplicate : 1;                                         // 0x0029(0x0001)
	unsigned char                                      bSupportsRandomSeed : 1;                                  // 0x0029(0x0001)
	unsigned char                                      bRequiresLoopingNotification : 1;                         // 0x0029(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	unsigned char                                      LODValidity;                                              // 0x002C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	TArray<int>                                        ModuleInstanceOffsets;                                    // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<int>                                        ModuleOffsets;                                            // 0x0040(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModule"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                  // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0158 (0x01B0 - 0x0058)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	FRawDistributionVector                             Acceleration;                                             // 0x0058(0x0038) (Edit)
	FRawDistributionVector                             AdditionalAcceleration[0x5];                              // 0x0090(0x0038) (Edit)
	unsigned char                                      bUseGroupAAccelerationForAllGroups : 1;                   // 0x01A8(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAcceleration"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (0x0068 - 0x0058)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	FVector                                            Acceleration;                                             // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationConstant"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0070 (0x00C8 - 0x0058)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	UDistributionFloat*                                DragCoefficient;                                          // 0x0058(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UDistributionFloat*                                DragOnLocalVelocity;                                      // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bUseGroupADragCoefficientForAllGroups : 1;                // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	UDistributionFloat*                                AdditionalDragCoefficient[0x5];                           // 0x0070(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bUseGroupADragOnLocalVelocityForAllGroups : 1;            // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	UDistributionFloat*                                AdditionalDragOnLocalVelocity[0x5];                       // 0x00A0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationDrag"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0010 (0x0068 - 0x0058)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	UDistributionFloat*                                DragScale;                                                // 0x0058(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UDistributionFloat*                                DragLocalVelocityScale;                                   // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationDragScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationEmitterPoint
// 0x0040 (0x0098 - 0x0058)
class UParticleModuleAccelerationEmitterPoint : public UParticleModuleAccelerationBase
{
public:
	FRawDistributionFloat                              AccelerationScale;                                        // 0x0058(0x0038) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationEmitterPoint"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0038 (0x0090 - 0x0058)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	FRawDistributionVector                             AccelOverLife;                                            // 0x0058(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAccelerationOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAttractorBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0088 (0x00D8 - 0x0050)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	FVector                                            EndPoint0;                                                // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            EndPoint1;                                                // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              Range;                                                    // 0x0068(0x0038) (Edit)
	FRawDistributionFloat                              Strength;                                                 // 0x00A0(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAttractorLine"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (0x00E0 - 0x0050)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	FName                                              EmitterName;                                              // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	FRawDistributionFloat                              Range;                                                    // 0x0058(0x0038) (Edit)
	unsigned char                                      bStrengthByDistance : 1;                                  // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	FRawDistributionFloat                              Strength;                                                 // 0x0098(0x0038) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource : 1;                                         // 0x00D8(0x0001) (Edit)
	unsigned char                                      bInheritSourceVel : 1;                                    // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAttractorParticle"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (0x0100 - 0x0050)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	FRawDistributionVector                             Position;                                                 // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              Range;                                                    // 0x0088(0x0038) (Edit)
	FRawDistributionFloat                              Strength;                                                 // 0x00C0(0x0038) (Edit)
	unsigned char                                      StrengthByDistance : 1;                                   // 0x00F8(0x0001) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00F8(0x0001) (Edit)
	unsigned char                                      bOverrideVelocity : 1;                                    // 0x00F8(0x0001) (Edit)
	unsigned char                                      bUseWorldSpacePosition : 1;                               // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_X : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x00F9(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x00F9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00FA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAttractorPoint"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0018 (0x0068 - 0x0050)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	FVector                                            Position;                                                 // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	UDistributionFloat*                                Strength;                                                 // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAttractorPointGravity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleBeamBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x00C0 (0x0110 - 0x0050)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FBeamModifierOptions                               PositionOptions;                                          // 0x0054(0x0004) (Edit)
	FRawDistributionVector                             Position;                                                 // 0x0058(0x0038) (Edit)
	FBeamModifierOptions                               TangentOptions;                                           // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	FRawDistributionVector                             Tangent;                                                  // 0x0098(0x0038) (Edit)
	unsigned char                                      bAbsoluteTangent : 1;                                     // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	FBeamModifierOptions                               StrengthOptions;                                          // 0x00D4(0x0004) (Edit)
	FRawDistributionFloat                              Strength;                                                 // 0x00D8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleBeamModifier"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0158 (0x01A8 - 0x0050)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                     // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                Frequency;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	FRawDistributionVector                             NoiseRange;                                               // 0x0060(0x0038) (Edit)
	FRawDistributionFloat                              NoiseRangeScale;                                          // 0x0098(0x0038) (Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	FRawDistributionVector                             NoiseSpeed;                                               // 0x00D8(0x0038) (Edit)
	unsigned char                                      bSmooth : 1;                                              // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                          // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                           // 0x0118(0x0001)
	unsigned char                                      bOscillate : 1;                                           // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                            // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                                    // 0x0124(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	FRawDistributionFloat                              NoiseTangentStrength;                                     // 0x0128(0x0038) (Edit)
	int                                                NoiseTessellation;                                        // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                         // 0x0164(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0165(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                        // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                                     // 0x016C(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	FRawDistributionFloat                              NoiseScale;                                               // 0x0170(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleBeamNoise"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x00D0 (0x0120 - 0x0050)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FName                                              SourceName;                                               // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                                      // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	FRawDistributionVector                             Source;                                                   // 0x0060(0x0038) (Edit)
	unsigned char                                      bLockSource : 1;                                          // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	FRawDistributionVector                             SourceTangent;                                            // 0x00A0(0x0038) (Edit)
	unsigned char                                      bLockSourceTangent : 1;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	FRawDistributionFloat                              SourceStrength;                                           // 0x00E0(0x0038) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleBeamSource"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x00D0 (0x0120 - 0x0050)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FName                                              TargetName;                                               // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	FRawDistributionVector                             Target;                                                   // 0x0060(0x0038) (Edit)
	unsigned char                                      bTargetAbsolute : 1;                                      // 0x0098(0x0001) (Edit)
	unsigned char                                      bLockTarget : 1;                                          // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	FRawDistributionVector                             TargetTangent;                                            // 0x00A0(0x0038) (Edit)
	unsigned char                                      bLockTargetTangent : 1;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	FRawDistributionFloat                              TargetStrength;                                           // 0x00E0(0x0038) (Edit)
	unsigned char                                      bLockTargetStength : 1;                                   // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              LockRadius;                                               // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleBeamTarget"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleCameraBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	FRawDistributionFloat                              CameraOffset;                                             // 0x0050(0x0038) (Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                                       // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleCameraOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleCollisionBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0150 (0x01A0 - 0x0050)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	FRawDistributionVector                             DampingFactor;                                            // 0x0050(0x0038) (Edit)
	FRawDistributionVector                             DampingFactorRotation;                                    // 0x0088(0x0038) (Edit)
	FRawDistributionFloat                              MaxCollisions;                                            // 0x00C0(0x0038) (Edit)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                           // 0x0100(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0110(0x0004) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                        // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	FRawDistributionFloat                              ParticleMass;                                             // 0x0118(0x0038) (Edit)
	float                                              DirScalar;                                                // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                            // 0x0154(0x0001) (Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x0154(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                                      // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	FRawDistributionFloat                              DelayAmount;                                              // 0x0160(0x0038) (Edit)
	unsigned char                                      bDropDetail : 1;                                          // 0x0198(0x0001) (Edit)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                // 0x0198(0x0001) (Edit)
	unsigned char                                      bIgnoreSourceActor : 1;                                   // 0x0198(0x0001) (Edit)
	unsigned char                                      bIgnoreCollisionsWithHiddenObjects : 1;                   // 0x0198(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0199(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                                     // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleCollision"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0088 (0x00D8 - 0x0050)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	FRawDistributionFloat                              Resilience;                                               // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              ResilienceScaleOverLife;                                  // 0x0088(0x0038) (Edit)
	float                                              DampingFactorRotation;                                    // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusScale;                                              // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                 // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                            // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00D2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleCollisionGPU"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleColorBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x02B8 (0x0308 - 0x0050)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	unsigned char                                      bUseGroupAColorForAllGroups : 1;                          // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionVector                             StartColor;                                               // 0x0058(0x0038) (Edit)
	FRawDistributionVector                             AdditionalStartColor[0x5];                                // 0x0090(0x0038) (Edit)
	unsigned char                                      bUseGroupAAlphaForAllGroups : 1;                          // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET
	FRawDistributionFloat                              StartAlpha;                                               // 0x01B0(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartAlpha[0x5];                                // 0x01E8(0x0038) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x0300(0x0001) (Edit)
	unsigned char                                      bIgnoreComponentColorTint : 1;                            // 0x0300(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0301(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleColor"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x0328 - 0x0308)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0308(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleColor_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0078 (0x00C8 - 0x0050)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	FRawDistributionVector                             ColorOverLife;                                            // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              AlphaOverLife;                                            // 0x0088(0x0038) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleColorOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0078 (0x00C8 - 0x0050)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	FRawDistributionVector                             ColorScaleOverLife;                                       // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              AlphaScaleOverLife;                                       // 0x0088(0x0038) (Edit)
	unsigned char                                      bEmitterTime : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleColorScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMurkyColor
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleMurkyColor : public UParticleModuleColorBase
{
public:
	FLinearColor                                       ColorScale;                                               // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMurkyColor"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<FParticleEvent_GenerateInfo>                Events;                                                   // 0x0050(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventGenerator"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGeneratorGPU
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleEventGeneratorGPU : public UParticleModuleEventBase
{
public:
	TArray<FParticleEventGPU_GenerateInfo>             Events;                                                   // 0x0050(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventGeneratorGPU"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FName                                              EventName;                                                // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventReceiverBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0068 - 0x0060)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                        // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventReceiverKillParticles"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0190 (0x01F0 - 0x0060)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	FRawDistributionFloat                              SpawnCount;                                               // 0x0060(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalSpawnCounts[0x5];                               // 0x0098(0x0038) (Edit)
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x01B0(0x0001) (Edit)
	unsigned char                                      bUseParticleTime : 1;                                     // 0x01B0(0x0001) (Edit)
	unsigned char                                      bUsePSysLocation : 1;                                     // 0x01B0(0x0001) (Edit)
	unsigned char                                      bInheritVelocity : 1;                                     // 0x01B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01B1(0x0007) MISSED OFFSET
	FRawDistributionVector                             InheritVelocityScale;                                     // 0x01B8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventReceiverSpawn"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleKillBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x0078 (0x00C8 - 0x0050)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	FRawDistributionVector                             LowerLeftCorner;                                          // 0x0050(0x0038) (Edit)
	FRawDistributionVector                             UpperRightCorner;                                         // 0x0088(0x0038) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      bKillInside : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleKillBox"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	FRawDistributionFloat                              Height;                                                   // 0x0050(0x0038) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      bFloor : 1;                                               // 0x0088(0x0001) (Edit)
	unsigned char                                      bApplyPSysScale : 1;                                      // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleKillHeight"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillOnFFTWater
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleKillOnFFTWater : public UParticleModuleKillBase
{
public:
	TEnumAsByte<EFFTWaterKillPointLocation>            FFTWaterKillPointLocation;                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned char                                      bUseGroupAFFTWaterKillPointForAllGroups : 1;              // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TEnumAsByte<EFFTWaterKillPointLocation>            AdditionalFFTWaterKillPointLocations[0x5];                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleKillOnFFTWater"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLifetimeBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0170 (0x01C0 - 0x0050)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	unsigned char                                      bUseGroupAValuesForAllGroups : 1;                         // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionFloat                              LifeTime;                                                 // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalLifetimes[0x5];                                 // 0x0090(0x0038) (Edit)
	unsigned char                                      UnknownData01[0x18];                                      // 0x01A8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x01E0 - 0x01C0)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x01C0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLifetime_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleLightBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLightBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x00E8 (0x0138 - 0x0050)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAffectsTranslucency;                                     // 0x0051(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreComponentTint;                                     // 0x0052(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreviewLightRadius;                                      // 0x0053(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SpawnFraction;                                            // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionVector                             ColorScaleOverLife;                                       // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              BrightnessOverLife;                                       // 0x0090(0x0038) (Edit)
	FRawDistributionFloat                              RadiusScale;                                              // 0x00C8(0x0038) (Edit)
	FRawDistributionFloat                              LightExponent;                                            // 0x0100(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLight"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0158 - 0x0138)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0138(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLight_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0128 (0x0178 - 0x0050)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	FRawDistributionVector                             StartLocation;                                            // 0x0050(0x0038) (Edit)
	FRawDistributionVector                             AdditionalStartLocations[0x4];                            // 0x0088(0x0038) (Edit)
	unsigned char                                      StartLocationUseGroupAForAll : 1;                         // 0x0168(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              DistributeOverNPoints;                                    // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0174(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x0198 - 0x0178)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0178(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0178 - 0x0178)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationWorldOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x0198 - 0x0178)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0178(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationWorldOffset_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FVector                                            UniversalOffset;                                          // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FLocationBoneSocketInfo>                    SourceLocations;                                          // 0x0060(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0074(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0074(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	FVector                                            InheritVelocityScale;                                     // 0x0078(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InheritedSpeedCap;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              SkelMeshActorParamName;                                   // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationBoneSocket"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x00E0 (0x0130 - 0x0050)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	FRawDistributionVector                             Location;                                                 // 0x0050(0x0038) (Edit)
	FRawDistributionVector                             LocationOffset;                                           // 0x0088(0x0038) (Edit)
	FRawDistributionVector                             ScaleFactor;                                              // 0x00C0(0x0038) (Edit)
	FRawDistributionVector                             Direction;                                                // 0x00F8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationDirect"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0070 - 0x0050)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	FName                                              EmitterName;                                              // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity : 1;                                // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                               // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	FName                                              EmitterName;                                              // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationEmitterDirect"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationGPU
// 0x0158 (0x01A8 - 0x0050)
class UParticleModuleLocationGPU : public UParticleModuleLocationBase
{
public:
	FRawDistributionVector                             StartLocation;                                            // 0x0050(0x0038) (Edit)
	FRawDistributionVector                             AdditionalStartLocations[0x5];                            // 0x0088(0x0038) (Edit)
	unsigned char                                      bUseGroupAStartLocationForAllGroups : 1;                  // 0x01A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationGPU"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0078 (0x00C8 - 0x0050)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x0050(0x0001) (Edit)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0050(0x0001) (Edit)
	unsigned char                                      Velocity : 1;                                             // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionFloat                              VelocityScale;                                            // 0x0058(0x0038) (Edit)
	FRawDistributionVector                             StartLocation;                                            // 0x0090(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationComputeShaderOutput
// 0x0008 (0x00D0 - 0x00C8)
class UParticleModuleLocationComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	UParticleComputeShaderData*                        PositionData;                                             // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationComputeShaderOutput"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0280 (0x0348 - 0x00C8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                       // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	FRawDistributionFloat                              StartRadius;                                              // 0x00D0(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRadiuses[0x4];                             // 0x0108(0x0038) (Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x01E8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01E9(0x0003) MISSED OFFSET
	FVector2D                                          RadiusScale;                                              // 0x01EC(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	FRawDistributionFloat                              StartHeight;                                              // 0x01F8(0x0038) (Edit)
	unsigned char                                      StartHeightUseGroupAForAll : 1;                           // 0x0230(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0231(0x0007) MISSED OFFSET
	FRawDistributionFloat                              AdditionalStartHeights[0x4];                              // 0x0238(0x0038) (Edit)
	FVector2D                                          AngleRange;                                               // 0x0318(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          AdditionalAngleRanges[0x4];                               // 0x0320(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AngleRangeUseGroupAForAll : 1;                            // 0x0340(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0341(0x0003) MISSED OFFSET
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x0344(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0345(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0368 - 0x0348)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0348(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0150 (0x0218 - 0x00C8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	FRawDistributionFloat                              StartRadius;                                              // 0x00C8(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRadiuses[0x4];                             // 0x0100(0x0038) (Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x01E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	FVector2D                                          PositiveXAngleRange;                                      // 0x01E4(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          NegativeXAngleRange;                                      // 0x01EC(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          PositiveYAngleRange;                                      // 0x01F4(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          NegativeYAngleRange;                                      // 0x01FC(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          PositiveZAngleRange;                                      // 0x0204(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          NegativeZAngleRange;                                      // 0x020C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0214(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0238 - 0x0218)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0218(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphereGPU
// 0x02F0 (0x03B8 - 0x00C8)
class UParticleModuleLocationPrimitiveSphereGPU : public UParticleModuleLocationPrimitiveBase
{
public:
	FRawDistributionFloat                              StartRadius;                                              // 0x00C8(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRadius[0x4];                               // 0x0100(0x0038) (Edit)
	unsigned char                                      bUseGroupAStartRadiusForAllGroups : 1;                    // 0x01E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01E1(0x0007) MISSED OFFSET
	FRawDistributionFloat                              AdditionalVelocityScales[0x4];                            // 0x01E8(0x0038) (Edit)
	unsigned char                                      bUseGroupAVelocityScaleForAllGroups : 1;                  // 0x02C8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET
	FRawDistributionVector                             AdditionalStartLocations[0x4];                            // 0x02D0(0x0038) (Edit)
	unsigned char                                      bUseGroupAStartLocationForAllGroups : 1;                  // 0x03B0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphereGPU"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationVelocityComputeShaderOutput
// 0x00F0 (0x01B8 - 0x00C8)
class UParticleModuleLocationVelocityComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	UParticleComputeShaderData*                        PositionData;                                             // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionVector                             ComputedVelocityScale;                                    // 0x00D0(0x0038) (Edit)
	float                                              SpeedCap;                                                 // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	FRawDistributionVector                             BaseVelocity;                                             // 0x0110(0x0038) (Edit)
	FRawDistributionVector                             LocationOffset;                                           // 0x0148(0x0038) (Edit)
	FRawDistributionVector                             LocationOffsetScaledDirection;                            // 0x0180(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationVelocityComputeShaderOutput"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphereSlice
// 0x01B8 (0x0208 - 0x0050)
class UParticleModuleLocationPrimitiveSphereSlice : public UParticleModuleLocationBase
{
public:
	FRawDistributionFloat                              StartRadius;                                              // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRadiuses[0x4];                             // 0x0088(0x0038) (Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x0168(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	FPrimitiveSphereEmitterAngleRanges                 AngleRanges[0x2];                                         // 0x016C(0x0010) (Edit)
	float                                              FirstSliceDistributionWeight;                             // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0190(0x0001) (Edit)
	unsigned char                                      Velocity : 1;                                             // 0x0190(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	FRawDistributionFloat                              VelocityScale;                                            // 0x0198(0x0038) (Edit)
	FRawDistributionVector                             StartLocation;                                            // 0x01D0(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphereSlice"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00E0 (0x0130 - 0x0050)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	FRawDistributionVector                             StartOffset;                                              // 0x0050(0x0038) (Edit)
	FRawDistributionFloat                              Height;                                                   // 0x0088(0x0038) (Edit)
	FRawDistributionFloat                              Angle;                                                    // 0x00C0(0x0038) (Edit)
	FRawDistributionFloat                              Thickness;                                                // 0x00F8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationPrimitiveTriangle"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x00B0 - 0x0050)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FVector                                            UniversalOffset;                                          // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0060(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0060(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	FName                                              SkelMeshActorParamName;                                   // 0x0064(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<FName>                                      ValidAssociatedBones;                                     // 0x0070(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	FVector                                            NormalToCompare;                                          // 0x0084(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x0094(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0098(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleLocationSkelVertSurface"));
		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0058 - 0x0050)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	FVector2D                                          PivotOffset;                                              // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModulePivotOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	FRawDistributionVector                             SourceMovementScale;                                      // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSourceMovement"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMaterialBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<UMaterialInterface*>                        MeshMaterials;                                            // 0x0050(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshMaterial"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleOrbitBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x00C8 (0x0120 - 0x0058)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	FRawDistributionVector                             OffsetAmount;                                             // 0x0060(0x0038) (Edit)
	FOrbitOptions                                      OffsetOptions;                                            // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	FRawDistributionVector                             RotationAmount;                                           // 0x00A0(0x0038) (Edit)
	FOrbitOptions                                      RotationOptions;                                          // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	FRawDistributionVector                             RotationRateAmount;                                       // 0x00E0(0x0038) (Edit)
	FOrbitOptions                                      RotationRateOptions;                                      // 0x0118(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleOrbit"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleOrientationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleOrientationAxisLock"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParameterBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0068 - 0x0050)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<FEmitterDynamicParameter>                   DynamicParams;                                            // 0x0050(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                        // 0x0064(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParameterDynamic"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0068(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParameterDynamic_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParametersOverX
// 0x0018 (0x0068 - 0x0050)
class UParticleModuleParametersOverX : public UParticleModule
{
public:
	float                                              GroupScales[0x6];                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParametersOverX"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParametersOverCustom
// 0x0188 (0x01F0 - 0x0068)
class UParticleModuleParametersOverCustom : public UParticleModuleParametersOverX
{
public:
	FRawDistributionFloat                              DynamicParamScaleOverCustomScale;                         // 0x0068(0x0038) (Edit)
	FRawDistributionFloat                              SpawnRateOverCustomScale;                                 // 0x00A0(0x0038) (Edit)
	FRawDistributionFloat                              LifetimeOverCustomScale;                                  // 0x00D8(0x0038) (Edit)
	FRawDistributionFloat                              SizeOverCustomScale;                                      // 0x0110(0x0038) (Edit)
	FRawDistributionFloat                              InitialVelocityOverCustomScale;                           // 0x0148(0x0038) (Edit)
	FRawDistributionFloat                              OpacityOverCustomScale;                                   // 0x0180(0x0038) (Edit)
	FRawDistributionFloat                              CylinderRadiusOverCustomScale;                            // 0x01B8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParametersOverCustom"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParametersOverVelocity
// 0x0130 (0x0198 - 0x0068)
class UParticleModuleParametersOverVelocity : public UParticleModuleParametersOverX
{
public:
	float                                              MinSpeed;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            VelocityComponentsWeights;                                // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	FRawDistributionFloat                              SpawnRateOverSpeedScale;                                  // 0x0080(0x0038) (Edit)
	FRawDistributionFloat                              LifetimeOverSpeedScale;                                   // 0x00B8(0x0038) (Edit)
	FRawDistributionFloat                              SizeOverSpeedScale;                                       // 0x00F0(0x0038) (Edit)
	FRawDistributionFloat                              InitialVelocityOverSpeedScale;                            // 0x0128(0x0038) (Edit)
	FRawDistributionFloat                              OpacityOverSpeedScale;                                    // 0x0160(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleParametersOverVelocity"));
		return ptr;
	}

};


// Class Engine.SubUVAnimation
// 0x0060 (0x0088 - 0x0028)
class USubUVAnimation : public UObject
{
public:
	UTexture2D*                                        SubUVTexture;                                             // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SafeMarginSize;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x44];                                      // 0x0044(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SubUVAnimation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x02A8 (0x02F8 - 0x0050)
class UParticleModuleRequired : public UParticleModule
{
public:
	unsigned char                                      bDeactivateGroupA : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bDeactivateGroupB : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bDeactivateGroupC : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bDeactivateGroupD : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bDeactivateGroupE : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EPriorityGroups>                       EmitterPriority;                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned char                                      bUseComplexitySystemWhenLooping : 1;                      // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<EPriorityGroups>                       SwitchPriority;                                           // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	unsigned char                                      bReplacementGroupIsAdditive : 1;                          // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	UMaterialInterface*                                Material;                                                 // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            EmitterOrigin;                                            // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      EmitterOriginUseGroupAForAll : 1;                         // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	FVector                                            AdditionalEmitterOrigins[0x5];                            // 0x0080(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FRotator                                           EmitterRotation;                                          // 0x00BC(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	unsigned char                                      bUseGroupAScreenAlignmentForAllGroups : 1;                // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleScreenAlignment>              AdditionalScreenAlignments[0x5];                          // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	float                                              AlignmentInheritedVelocityScale;                          // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                                       // 0x00DC(0x0001) (Edit)
	unsigned char                                      bFollowEmitter : 1;                                       // 0x00DC(0x0001) (Edit)
	unsigned char                                      bTrailInGrandParentSpace : 1;                             // 0x00DC(0x0001) (Edit)
	unsigned char                                      bKillOnDeactivate : 1;                                    // 0x00DC(0x0001) (Edit)
	unsigned char                                      bKillOnCompleted : 1;                                     // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData09[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	unsigned char                                      bUseLegacyEmitterTime : 1;                                // 0x00E4(0x0001) (Edit)
	unsigned char                                      UnknownData11[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	float                                              EmitterDuration;                                          // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEmitterDurationUseRange : 1;                             // 0x00F0(0x0001) (Edit)
	unsigned char                                      bDurationRecalcEachLoop : 1;                              // 0x00F0(0x0001) (Edit)
	unsigned char                                      bSeparateLoopTimeForSubUV : 1;                            // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData12[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                EmitterLoops;                                             // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              LoopTime;                                                 // 0x00F8(0x0038) (Edit)
	FRawDistributionFloat                              LoopOffset;                                               // 0x0130(0x0038) (Edit)
	FRawDistributionFloat                              LoopTimeForSubUV;                                         // 0x0168(0x0038) (Edit)
	float                                              LoopBeginTime;                                            // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEndTime;                                              // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              SpawnRate;                                                // 0x01A8(0x0038)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x01E0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x01E1(0x0007) MISSED OFFSET
	TArray<FParticleBurst>                             BurstList;                                                // 0x01E8(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                             // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEmitterDelayUseRange : 1;                                // 0x0200(0x0001) (Edit)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                  // 0x0200(0x0001) (Edit)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x0204(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0205(0x0003) MISSED OFFSET
	int                                                SubImages_Horizontal;                                     // 0x0208(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x020C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                             // 0x0210(0x0001) (Edit)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	float                                              RandomImageTime;                                          // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                               // 0x021C(0x0001) (Edit)
	unsigned char                                      UnknownData17[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	FVector                                            MacroUVPosition;                                          // 0x0220(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMaxDrawCount : 1;                                     // 0x0230(0x0001) (Edit)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	int                                                MaxDrawCount;                                             // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0239(0x0003) MISSED OFFSET
	FVector                                            NormalsSphereCenter;                                      // 0x023C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            NormalsCylinderDirection;                                 // 0x0248(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x0254(0x0001) (Edit)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleUVFlipMode>                   UVFlippingMode;                                           // 0x0258(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	UTexture2D*                                        CutoutTexture;                                            // 0x0260(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0268(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0269(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x2];                                       // 0x026A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x026C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SafeMarginSize;                                           // 0x0270(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	TArray<FName>                                      NamedMaterialOverrides;                                   // 0x0278(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bUseDistanceFading : 1;                                   // 0x0288(0x0001) (Edit)
	unsigned char                                      UnknownData24[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              FarStopFade;                                              // 0x028C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FarStartFade;                                             // 0x0290(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearStartFade;                                            // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearStopFade;                                             // 0x0298(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ApplyFOVDistanceScaling : 1;                              // 0x029C(0x0001) (Edit)
	unsigned char                                      bUseDistanceSizeScale : 1;                                // 0x029C(0x0001) (Edit)
	unsigned char                                      UnknownData25[0x3];                                       // 0x029D(0x0003) MISSED OFFSET
	float                                              FarScaleFactor;                                           // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FarScaleEndDistance;                                      // 0x02A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FarScaleBeginDistance;                                    // 0x02A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearScaleBeginDistance;                                   // 0x02AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearScaleEndDistance;                                     // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearScaleFactor;                                          // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x40];                                      // 0x02B8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRequired"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAlignRotationToVelocity
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleAlignRotationToVelocity : public UParticleModuleRotationBase
{
public:
	FRawDistributionFloat                              AdditionalAngle;                                          // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleAlignRotationToVelocity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	FRawDistributionVector                             StartRotation;                                            // 0x0050(0x0038) (Edit)
	unsigned char                                      bInheritParent : 1;                                       // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotateRotationAxis
// 0x0068 (0x00B8 - 0x0050)
class UParticleModuleRotateRotationAxis : public UParticleModuleRotationBase
{
public:
	FRotationAboutAxisParameters                       FacingAxis;                                               // 0x0050(0x0010) (Edit)
	unsigned char                                      bUseGroupAFacingAxisForAllGroups : 1;                     // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	FRotationAboutAxisParameters                       AdditionalFacingAxes[0x5];                                // 0x0064(0x0010) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotateRotationAxis"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0158 (0x01A8 - 0x0050)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	unsigned char                                      bUseGroupARotationForAllGroups : 1;                       // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionFloat                              StartRotation;                                            // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRotation[0x5];                             // 0x0090(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x01C8 - 0x01A8)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x01A8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	FRawDistributionFloat                              RotationOverLife;                                         // 0x0050(0x0038) (Edit)
	unsigned char                                      Scale : 1;                                                // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationRateBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	FRawDistributionVector                             StartRotationRate;                                        // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x0088(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotationRate_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	FRawDistributionVector                             LifeMultiplier;                                           // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotationRateMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	FRawDistributionVector                             RotRate;                                                  // 0x0050(0x0038) (Edit)
	unsigned char                                      bScaleRotRate : 1;                                        // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleMeshRotationRateOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0158 (0x01A8 - 0x0050)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	unsigned char                                      bUseGroupARotationRateForAllGroups : 1;                   // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionFloat                              StartRotationRate;                                        // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalStartRotationRate[0x5];                         // 0x0090(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x01C8 - 0x01A8)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x01A8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationRate_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	FRawDistributionFloat                              LifeMultiplier;                                           // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleRotationRateMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSizeBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0160 (0x01B0 - 0x0050)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	FRawDistributionVector                             StartSize;                                                // 0x0058(0x0038) (Edit)
	FRawDistributionVector                             AdditionalStartSizes[0x5];                                // 0x0090(0x0038) (Edit)
	unsigned char                                      bKeepAspectRatio : 1;                                     // 0x01A8(0x0001) (Edit)
	unsigned char                                      bIgnoreComponentScale : 1;                                // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSize"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x01D0 - 0x01B0)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x01B0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSize_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	FRawDistributionVector                             LifeMultiplier;                                           // 0x0050(0x0038) (Edit)
	unsigned char                                      MultiplyX : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      MultiplyY : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      MultiplyZ : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSizeMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeOverVelocity
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleSizeOverVelocity : public UParticleModuleSizeBase
{
public:
	FRawDistributionFloat                              SizeMultiplier;                                           // 0x0050(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSizeOverVelocity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	FRawDistributionVector                             SizeScale;                                                // 0x0050(0x0038) (Edit)
	unsigned char                                      EnableX : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      EnableY : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      EnableZ : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSizeScale"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	FVector2D                                          SpeedScale;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector2D                                          MaxScale;                                                 // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSizeScaleBySpeed"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bProcessBurstList : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSpawnBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x0220 (0x0278 - 0x0058)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	FRawDistributionFloat                              Rate;                                                     // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              AdditionalRates[0x5];                                     // 0x0090(0x0038) (Edit)
	float                                              StartScaleDistance;                                       // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EndScaleDistance;                                         // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              RateScaleOverDistance;                                    // 0x01B0(0x0038) (Edit)
	FRawDistributionFloat                              RateScale;                                                // 0x01E8(0x0038) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	TArray<FParticleBurst>                             BurstList;                                                // 0x0228(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	FRawDistributionFloat                              BurstScale;                                               // 0x0238(0x0038) (Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                           // 0x0270(0x0001) (Edit)
	unsigned char                                      bBurstTreatedAsLoopingForLODs : 1;                        // 0x0270(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0271(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSpawn"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (0x00A8 - 0x0058)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	unsigned char                                      bAffectsGroupA : 1;                                       // 0x0058(0x0001) (Edit)
	unsigned char                                      bAffectsGroupB : 1;                                       // 0x0058(0x0001) (Edit)
	unsigned char                                      bAffectsGroupC : 1;                                       // 0x0058(0x0001) (Edit)
	unsigned char                                      bAffectsGroupD : 1;                                       // 0x0058(0x0001) (Edit)
	unsigned char                                      bAffectsGroupE : 1;                                       // 0x0058(0x0001) (Edit)
	unsigned char                                      bAffectsReplacementGroup : 1;                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              UnitScalar;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              SpawnPerUnit;                                             // 0x0060(0x0038) (Edit)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              MovementTolerance;                                        // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFrameDistance;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                // 0x00A4(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                // 0x00A4(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                // 0x00A4(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSpawnPerUnit"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnitNew
// 0x0000 (0x00A8 - 0x00A8)
class UParticleModuleSpawnPerUnitNew : public UParticleModuleSpawnPerUnit
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSpawnPerUnitNew"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnRepeatPerPoint
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleSpawnRepeatPerPoint : public UParticleModuleSpawnBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSpawnRepeatPerPoint"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSubUVBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0040 (0x0090 - 0x0050)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	FRawDistributionFloat                              SubImageIndex;                                            // 0x0050(0x0038) (Edit)
	unsigned char                                      bUseRealTime : 1;                                         // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSubUV"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (0x00D8 - 0x0090)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	FRawDistributionFloat                              FrameRate;                                                // 0x0098(0x0038) (Edit)
	int                                                StartingFrame;                                            // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleSubUVMovie"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTrailBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0068 (0x00B8 - 0x0050)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	FName                                              SourceName;                                               // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	FRawDistributionFloat                              SourceStrength;                                           // 0x0060(0x0038) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                        // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<FVector>                                    SourceOffsetDefaults;                                     // 0x00A0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation : 1;                                     // 0x00B4(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTrailSource"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0068 - 0x0050)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0050(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0050(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataAnimTrail"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0138 (0x0188 - 0x0050)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                TextureTile;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Sheets;                                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                            // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FName                                              BranchParentName;                                         // 0x0074(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	FRawDistributionFloat                              Distance;                                                 // 0x0080(0x0038) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	FRawDistributionFloat                              TaperFactor;                                              // 0x00C0(0x0038) (Edit)
	FRawDistributionFloat                              TaperScale;                                               // 0x00F8(0x0038) (Edit)
	unsigned char                                      RenderGeometry : 1;                                       // 0x0130(0x0001) (Edit)
	unsigned char                                      RenderDirectLine : 1;                                     // 0x0130(0x0001) (Edit)
	unsigned char                                      RenderLines : 1;                                          // 0x0130(0x0001) (Edit)
	unsigned char                                      RenderTessellation : 1;                                   // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	TArray<UParticleModuleBeamSource*>                 LOD_BeamModule_Source;                                    // 0x0138(0x0010) (ZeroConstructor)
	TArray<UParticleModuleBeamTarget*>                 LOD_BeamModule_Target;                                    // 0x0148(0x0010) (ZeroConstructor)
	TArray<UParticleModuleBeamNoise*>                  LOD_BeamModule_Noise;                                     // 0x0158(0x0010) (ZeroConstructor)
	TArray<UParticleModuleBeamModifier*>               LOD_BeamModule_SourceModifier;                            // 0x0168(0x0010) (ZeroConstructor)
	TArray<UParticleModuleBeamModifier*>               LOD_BeamModule_TargetModifier;                            // 0x0178(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataBeam2"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x0CC0 (0x0D10 - 0x0050)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	FGPUSpriteEmitterInfo                              EmitterInfo;                                              // 0x0050(0x02A0) (Transient)
	FGPUSpriteResourceData                             ResourceData;                                             // 0x02F0(0x0A00) (Transient)
	float                                              CameraMotionBlurAmount;                                   // 0x0CF0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                        // 0x0CF4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0CF5(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleAlphaThresholdLevel>          AlphaCullingAggressiveness;                               // 0x0CF8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0CF9(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideAlphaThreshold : 1;                              // 0x0CFC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0CFD(0x0003) MISSED OFFSET
	float                                              OverriddenAlphaThreshold;                                 // 0x0D00(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInteractionWithKillPlane>             InteractionWithKillPlane;                                 // 0x0D04(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EKillPlaneKillPointLocation>           KillPlanePointLocation;                                   // 0x0D05(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0D06(0x0002) MISSED OFFSET
	float                                              FadingTimeWhenKilled;                                     // 0x0D08(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0D0C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataGpu"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0070 (0x00C0 - 0x0050)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	UStaticMesh*                                       Mesh;                                                     // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CastShadows : 1;                                          // 0x0058(0x0001)
	unsigned char                                      DoCollisions : 1;                                         // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideMaterial : 1;                                    // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              Pitch;                                                    // 0x0064(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Roll;                                                     // 0x0068(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Yaw;                                                      // 0x006C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	FRawDistributionVector                             RollPitchYawRange;                                        // 0x0070(0x0038) (Edit)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	unsigned char                                      bCameraFacing : 1;                                        // 0x00B4(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x00B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x00BA(0x0002) MISSED OFFSET
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                         // 0x00BC(0x0001) (Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;               // 0x00BC(0x0001) (Edit)
	unsigned char                                      bFaceCameraOnlyOnSpawn : 1;                               // 0x00BC(0x0001) (Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                      // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataMesh"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0080 - 0x0050)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0060(0x0001) (Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0060(0x0001) (Edit)
	unsigned char                                      bClipSourceSegement : 1;                                  // 0x0060(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0060(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0060(0x0001) (Edit)
	unsigned char                                      bSpawnInitialParticle : 1;                                // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                                      // 0x006C(0x0001) (Edit)
	unsigned char                                      bRenderSpawnPoints : 1;                                   // 0x006C(0x0001) (Edit)
	unsigned char                                      bRenderTangents : 1;                                      // 0x006C(0x0001) (Edit)
	unsigned char                                      bRenderTessellation : 1;                                  // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                        // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleTypeDataRibbon"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                  // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldGlobal"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (0x0088 - 0x0050)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	UVectorField*                                      VectorField;                                              // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeTranslation;                                      // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FRotator                                           RelativeRotation;                                         // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeScale3D;                                          // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                            // 0x0084(0x0001) (Edit)
	unsigned char                                      bTileX : 1;                                               // 0x0084(0x0001) (Edit)
	unsigned char                                      bTileY : 1;                                               // 0x0084(0x0001) (Edit)
	unsigned char                                      bTileZ : 1;                                               // 0x0084(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldLocal"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0068 - 0x0050)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	FVector                                            MinInitialRotation;                                       // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            MaxInitialRotation;                                       // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (0x0060 - 0x0050)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	FVector                                            RotationRate;                                             // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	UDistributionFloat*                                VectorFieldScale;                                         // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldScale"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	UDistributionFloat*                                VectorFieldScaleOverLife;                                 // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVectorFieldScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0058 - 0x0050)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                        // 0x0050(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocityBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEmitterPointVelocity
// 0x0038 (0x0090 - 0x0058)
class UParticleModuleEmitterPointVelocity : public UParticleModuleVelocityBase
{
public:
	FRawDistributionFloat                              VelocityScale;                                            // 0x0058(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEmitterPointVelocity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0190 (0x01E8 - 0x0058)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	FRawDistributionVector                             StartVelocity;                                            // 0x0060(0x0038) (Edit)
	FRawDistributionVector                             AdditionalStartVelocities[0x5];                           // 0x0098(0x0038) (Edit)
	FRawDistributionFloat                              StartVelocityRadial;                                      // 0x01B0(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x0208 - 0x01E8)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                           // 0x01E8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocity_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0330 (0x0388 - 0x0058)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	FRawDistributionFloat                              Angle;                                                    // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              Velocity;                                                 // 0x0090(0x0038) (Edit)
	FVector                                            Direction;                                                // 0x00C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x00D4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	FVelocityConeGroupParams                           AdditionalParams[0x5];                                    // 0x00D8(0x0080) (Edit)
	uint32_t                                           VelocityDistributeOverNPoints;                            // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VelocityNPointsRandomness;                                // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            AdditiveVelocity;                                         // 0x0360(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConeDepthScale;                                           // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      WorldSpaceOffset : 1;                                     // 0x0370(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	FVector                                            EmitterOriginOffset;                                      // 0x0374(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PushAwayFromCenterFactor;                                 // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0384(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocityCone"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityConeEmitterPoint
// 0x0088 (0x00E0 - 0x0058)
class UParticleModuleVelocityConeEmitterPoint : public UParticleModuleVelocityBase
{
public:
	FRawDistributionFloat                              Angle;                                                    // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              VelocityScale;                                            // 0x0090(0x0038) (Edit)
	uint32_t                                           VelocityDistributeOverNPoints;                            // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VelocityNPointsRandomness;                                // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FVector                                            AdditiveVelocity;                                         // 0x00D0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocityConeEmitterPoint"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0078 (0x00D0 - 0x0058)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	FRawDistributionVector                             Scale;                                                    // 0x0058(0x0038) (Edit)
	FRawDistributionVector                             CustomParentScale;                                        // 0x0090(0x0038) (Edit)
	unsigned char                                      ScalesRespectEmitterRotation : 1;                         // 0x00C8(0x0001) (Edit)
	unsigned char                                      UseCustomLocalSpace : 1;                                  // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              SpeedCap;                                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocityInheritParent"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0040 (0x0098 - 0x0058)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	FRawDistributionVector                             VelOverLife;                                              // 0x0058(0x0038) (Edit)
	unsigned char                                      Absolute : 1;                                             // 0x0090(0x0001) (Edit, ExportObject)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleVelocityOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleWindBase
// 0x0000 (0x0050 - 0x0050)
class UParticleModuleWindBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleWindBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleWindInfluence
// 0x0078 (0x00C8 - 0x0050)
class UParticleModuleWindInfluence : public UParticleModuleWindBase
{
public:
	float                                              WindSpeedCap;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomFactorForWindDirection;                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FRawDistributionFloat                              InfluenceOnAcceleration;                                  // 0x0058(0x0038) (Edit)
	FRawDistributionFloat                              InfluenceOnVelocity;                                      // 0x0090(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleWindInfluence"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleModuleEventSendToGame"));
		return ptr;
	}

};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x002C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ParticleSystemReplay"));
		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x0100 - 0x0100)
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DemoPendingNetGame"));
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0048 (0x0070 - 0x0028)
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideFrictionCombineMode;                             // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	float                                              Restitution;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideRestitutionCombineMode;                          // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	float                                              Density;                                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RaiseMassToPower;                                         // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageThresholdScale;                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	UPhysicalMaterialPropertyBase*                     PhysicalMaterialProperty;                                 // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                              // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1F];                                      // 0x0051(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicalMaterial"));
		return ptr;
	}

};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0028 - 0x0028)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicalMaterialPropertyBase"));
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x00D0 (0x00F8 - 0x0028)
class UPhysicsAsset : public UObject
{
public:
	TArray<UBodySetup*>                                BodySetup;                                                // 0x0028(0x0010) (ExportObject, ZeroConstructor)
	TArray<int>                                        BoundsBodies;                                             // 0x0038(0x0010) (ZeroConstructor)
	TArray<UPhysicsConstraintTemplate*>                ConstraintSetup;                                          // 0x0048(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0058(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsAsset"));
		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	USoundBase*                                        DefaultImpactSound;                                       // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsCollisionHandler"));
		return ptr;
	}

};


// Class Engine.PhysicsConstraintTemplate
// 0x0218 (0x0240 - 0x0028)
class UPhysicsConstraintTemplate : public UObject
{
public:
	FName                                              JointName;                                                // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	FName                                              ConstraintBone1;                                          // 0x0030(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	FName                                              ConstraintBone2;                                          // 0x0038(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            Pos1;                                                     // 0x0040(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            PriAxis1;                                                 // 0x004C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            SecAxis1;                                                 // 0x0058(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            Pos2;                                                     // 0x0064(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            PriAxis2;                                                 // 0x0070(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	FVector                                            SecAxis2;                                                 // 0x007C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bEnableProjection : 1;                                    // 0x0088(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              ProjectionLinearTolerance;                                // 0x008C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ProjectionAngularTolerance;                               // 0x0090(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearXMotion;                                            // 0x0094(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearYMotion;                                            // 0x0095(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearZMotion;                                            // 0x0096(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0097(0x0001) MISSED OFFSET
	float                                              LinearLimitSize;                                          // 0x0098(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bLinearLimitSoft : 1;                                     // 0x009C(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	float                                              LinearLimitStiffness;                                     // 0x00A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              LinearLimitDamping;                                       // 0x00A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bLinearBreakable : 1;                                     // 0x00A8(0x0001) (Deprecated)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              LinearBreakThreshold;                                     // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularSwing1Motion;                                      // 0x00B0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularSwing2Motion;                                      // 0x00B1(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularTwistMotion;                                       // 0x00B2(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x00B3(0x0001) MISSED OFFSET
	unsigned char                                      bSwingLimitSoft : 1;                                      // 0x00B4(0x0001) (Deprecated)
	unsigned char                                      bTwistLimitSoft : 1;                                      // 0x00B4(0x0001) (Deprecated)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	float                                              Swing1LimitAngle;                                         // 0x00B8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Swing2LimitAngle;                                         // 0x00BC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              TwistLimitAngle;                                          // 0x00C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              SwingLimitStiffness;                                      // 0x00C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              SwingLimitDamping;                                        // 0x00C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              TwistLimitStiffness;                                      // 0x00CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              TwistLimitDamping;                                        // 0x00D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bAngularBreakable : 1;                                    // 0x00D4(0x0001) (Deprecated)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	float                                              AngularBreakThreshold;                                    // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	FConstraintInstance                                DefaultInstance;                                          // 0x00E0(0x0160) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsConstraintTemplate"));
		return ptr;
	}

};


// Class Engine.PhysicsSerializer
// 0x00A8 (0x00D0 - 0x0028)
class UPhysicsSerializer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0028(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PhysicsSerializer"));
		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<FDelegateArray>                             AllDelegates;                                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlatformInterfaceBase"));
		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<FString>                                    LocalCloudFiles;                                          // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                               // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.CloudStorageBase"));
		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                              // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<FScriptDelegate>                            ClickedBannerDelegates;                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<FScriptDelegate>                            ClosedAdDelegates;                                        // 0x0050(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.InGameAdManager"));
		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<FPurchaseInfo>                              AvailableProducts;                                        // 0x0038(0x0010) (ZeroConstructor)
	FString                                            LastError;                                                // 0x0048(0x0010) (ZeroConstructor)
	FString                                            LastErrorSolution;                                        // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MicroTransactionBase"));
		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TwitterIntegrationBase"));
		return ptr;
	}


	bool TwitterRequest(const FString& URL, TArray<FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const FString& InitialMessage, const FString& URL, const FString& Picture);
	void Init();
	int GetNumAccounts();
	FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	FString                                            OriginalURL;                                              // 0x0028(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Tag;                                                      // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	FString                                            StringResponse;                                           // 0x0040(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0060(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.PlatformInterfaceWebResponse"));
		return ptr;
	}


	int GetNumHeaders();
	FString GetHeaderValue(const FString& HeaderName);
	void GetHeader(int HeaderIndex, FString* Header, FString* Value);
};


// Class Engine.LocalPlayer
// 0x01C8 (0x0210 - 0x0048)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET
	UGameViewportClient*                               ViewportClient;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0068(0x0040) MISSED OFFSET
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                // 0x00A8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	UClass*                                            PendingLevelPlayerControllerClass;                        // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSentSplitJoin : 1;                                       // 0x00B8(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              MinimumAspectRatio;                                       // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x150];                                     // 0x00C0(0x0150) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LocalPlayer"));
		return ptr;
	}

};


// Class Engine.ChildConnection
// 0x0008 (0x34590 - 0x34588)
class UChildConnection : public UNetConnection
{
public:
	UNetConnection*                                    Parent;                                                   // 0x34588(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ChildConnection"));
		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0010 (0x34598 - 0x34588)
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x34588(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DemoNetConnection"));
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Polys"));
		return ptr;
	}

};


// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ReporterBase"));
		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0078 (0x00A8 - 0x0030)
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0030(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ReporterGraph"));
		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0030 (0x0058 - 0x0028)
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                  // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Diffusion;                                                // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Gain;                                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GainHF;                                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayTime;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsDelay;                                         // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateGain;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateDelay;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ReverbEffect"));
		return ptr;
	}

};


// Class Engine.Rig
// 0x0020 (0x0048 - 0x0028)
class URig : public UObject
{
public:
	TArray<FTransformBase>                             TransformBases;                                           // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<FNode>                                      Nodes;                                                    // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Rig"));
		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SaveGame"));
		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0018 (0x0040 - 0x0028)
class USimpleConstructionScript : public UObject
{
public:
	TArray<USCS_Node*>                                 RootNodes;                                                // 0x0028(0x0010) (ZeroConstructor)
	USCS_Node*                                         DefaultSceneRootNode;                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SimpleConstructionScript"));
		return ptr;
	}

};


// Class Engine.SCS_Node
// 0x0060 (0x0088 - 0x0028)
class USCS_Node : public UObject
{
public:
	UActorComponent*                                   ComponentTemplate;                                        // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	FName                                              VariableName;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	FName                                              AttachToName;                                             // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	FName                                              ParentComponentOrVariableName;                            // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	FName                                              ParentComponentOwnerClassName;                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsParentComponentNative;                                 // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               ServerMigrationFlagSet;                                   // 0x0051(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	TArray<USCS_Node*>                                 ChildNodes;                                               // 0x0058(0x0010) (ZeroConstructor)
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                            // 0x0068(0x0010) (Edit, ZeroConstructor)
	FGuid                                              VariableGuid;                                             // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SCS_Node"));
		return ptr;
	}

};


// Class Engine.Selection
// 0x0030 (0x0058 - 0x0028)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0028(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Selection"));
		return ptr;
	}

};


// Class Engine.DestructibleMesh
// 0x0098 (0x02D0 - 0x0238)
class UDestructibleMesh : public USkeletalMesh
{
public:
	FDestructibleParameters                            DefaultDestructibleParameters;                            // 0x0238(0x0088) (Edit)
	TArray<FFractureEffect>                            FractureEffects;                                          // 0x02C0(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DestructibleMesh"));
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0038 (0x0060 - 0x0028)
class USkeletalMeshSocket : public UObject
{
public:
	FName                                              SocketName;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	FName                                              BoneName;                                                 // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	FVector                                            RelativeLocation;                                         // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FRotator                                           RelativeRotation;                                         // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeScale;                                            // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForceAlwaysAnimated;                                     // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SkeletalMeshSocket"));
		return ptr;
	}


	void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, const FVector& WorldLocation, const FVector& WorldNormal);
	FVector GetSocketLocation(USkeletalMeshComponent* SkelComp);
};


// Class Engine.SlateBrushAsset
// 0x0090 (0x00B8 - 0x0028)
class USlateBrushAsset : public UObject
{
public:
	FSlateBrush                                        Brush;                                                    // 0x0028(0x0090) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SlateBrushAsset"));
		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0028 (0x0050 - 0x0028)
class USoundBase : public UObject
{
public:
	USoundClass*                                       SoundClassObject;                                         // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	TEnumAsByte<EMaxConcurrentResolutionRule>          MaxConcurrentResolutionRule;                              // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                MaxConcurrentPlayCount;                                   // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	USoundAttenuation*                                 AttenuationSettings;                                      // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundBase"));
		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x0068 - 0x0050)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.DialogueSoundWaveProxy"));
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x00E0 (0x0130 - 0x0050)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	USoundNode*                                        FirstNode;                                                // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FAttenuationSettings                               AttenuationOverrides;                                     // 0x0068(0x00C0) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundCue"));
		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class USoundGroups : public UObject
{
public:
	TArray<FSoundGroup>                                SoundGroupProfiles;                                       // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundGroups"));
		return ptr;
	}

};


// Class Engine.SoundWave
// 0x01C8 (0x0218 - 0x0050)
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0054(0x0001) (Edit)
	unsigned char                                      bStreaming : 1;                                           // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                StreamingPriority;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01 : 3;                                        // 0x005C(0x0001)
	unsigned char                                      bMature : 1;                                              // 0x005C(0x0001) (Edit)
	unsigned char                                      bManualWordWrap : 1;                                      // 0x005C(0x0001) (Edit)
	unsigned char                                      bSingleLine : 1;                                          // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                               // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	FString                                            SpokenText;                                               // 0x0068(0x0010) (Edit, ZeroConstructor)
	float                                              Volume;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Pitch;                                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumChannels;                                              // 0x0080(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SampleRate;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                RawPCMDataSize;                                           // 0x0088(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<FSubtitleCue>                               Subtitles;                                                // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<FLocalizedSubtitle>                         LocalizedSubtitles;                                       // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x168];                                     // 0x00B0(0x0168) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundWave"));
		return ptr;
	}

};


// Class Engine.SoundWaveProcedural
// 0x0018 (0x0230 - 0x0218)
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0218(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundWaveProcedural"));
		return ptr;
	}

};


// Class Engine.SoundClass
// 0x0050 (0x0078 - 0x0028)
class USoundClass : public UObject
{
public:
	FSoundClassProperties                              Properties;                                               // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<USoundClass*>                               ChildClasses;                                             // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers;                                 // 0x0060(0x0010) (Edit, ZeroConstructor)
	USoundClass*                                       ParentClass;                                              // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundClass"));
		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0050 (0x0078 - 0x0028)
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                             // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              EQPriority;                                               // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FAudioEQEffect                                     EQSettings;                                               // 0x0030(0x0028) (Edit)
	TArray<FSoundClassAdjuster>                        SoundClassEffects;                                        // 0x0058(0x0010) (Edit, ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeInTime;                                               // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundMix"));
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x0038 - 0x0028)
class USoundNode : public UObject
{
public:
	TArray<USoundNode*>                                ChildNodes;                                               // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNode"));
		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0038 - 0x0038)
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeAssetReferencer"));
		return ptr;
	}

};


// Class Engine.SoundNodeWavePlayer
// 0x0030 (0x0068 - 0x0038)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TAssetPtr<class USoundWave>                        SoundWaveAssetPtr;                                        // 0x0038(0x0020) (Edit)
	USoundWave*                                        SoundWave;                                                // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeWavePlayer"));
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x00D0 (0x0108 - 0x0038)
class USoundNodeAttenuation : public USoundNode
{
public:
	USoundAttenuation*                                 AttenuationSettings;                                      // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FAttenuationSettings                               AttenuationOverrides;                                     // 0x0040(0x00C0) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeAttenuation"));
		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeBranch : public USoundNode
{
public:
	FName                                              BoolParameterName;                                        // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeBranch"));
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeConcatenator"));
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayMax;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeDelay"));
		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0060 - 0x0038)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	FDialogueWaveParameter                             DialogueWaveParameter;                                    // 0x0038(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeDialoguePlayer"));
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0048 - 0x0038)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<FDistanceDatum>                             CrossFadeInput;                                           // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeDistanceCrossFade"));
		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0050 - 0x0048)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	FName                                              ParamName;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeParamCrossFade"));
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeDoppler"));
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0138 (0x0170 - 0x0038)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0048(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	UDistributionFloatConstantCurve*                   VolumeInterpCurve;                                        // 0x0050(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	UDistributionFloatConstantCurve*                   PitchInterpCurve;                                         // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	FRuntimeFloatCurve                                 VolumeCurve;                                              // 0x0060(0x0080) (Edit)
	FRuntimeFloatCurve                                 PitchCurve;                                               // 0x00E0(0x0080) (Edit)
	float                                              PitchMin;                                                 // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeEnveloper"));
		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0048 - 0x0038)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeGroupControl"));
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0040 - 0x0038)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeLooping"));
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0038 - 0x0038)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeMature"));
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0048 - 0x0038)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeMixer"));
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeModulator"));
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0078 - 0x0038)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	FModulatorContinuousParams                         PitchModulationParams;                                    // 0x0038(0x0020) (Edit)
	FModulatorContinuousParams                         VolumeModulationParams;                                   // 0x0058(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeModulatorContinuous"));
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0060 - 0x0038)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                      // 0x0038(0x0001) (Edit)
	unsigned char                                      bModulatePitch : 1;                                       // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMin;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMin;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMax;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeOscillator"));
		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0000 (0x0038 - 0x0038)
class USoundNodeQualityLevel : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeQualityLevel"));
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0068 - 0x0038)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                PreselectAtLevelLoad;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                         // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	TArray<bool>                                       HasBeenUsed;                                              // 0x0050(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                            // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeRandom"));
		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSoundClass : public USoundNode
{
public:
	USoundClass*                                       SoundClassOverride;                                       // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeSoundClass"));
		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSwitch : public USoundNode
{
public:
	FName                                              IntParameterName;                                         // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeSwitch"));
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0040 - 0x0038)
class USoundNodeWaveParam : public USoundNode
{
public:
	FName                                              WaveParameterName;                                        // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SoundNodeWaveParam"));
		return ptr;
	}

};


// Class Engine.StaticMeshSocket
// 0x0040 (0x0068 - 0x0028)
class UStaticMeshSocket : public UObject
{
public:
	FName                                              SocketName;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeLocation;                                         // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FRotator                                           RelativeRotation;                                         // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FVector                                            RelativeScale;                                            // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	FString                                            Tag;                                                      // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.StaticMeshSocket"));
		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x0028 (0x0050 - 0x0028)
class USubsurfaceProfile : public UObject
{
public:
	FSubsurfaceProfileStruct                           Settings;                                                 // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.SubsurfaceProfile"));
		return ptr;
	}

};


// Class Engine.TestInterfaceAlternative
// 0x0000 (0x0028 - 0x0028)
class UTestInterfaceAlternative : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TestInterfaceAlternative"));
		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x00A8 (0x00D0 - 0x0028)
class UTextPropertyTestObject : public UObject
{
public:
	FText                                              DefaultedText;                                            // 0x0028(0x0038)
	FText                                              UndefaultedText;                                          // 0x0060(0x0038)
	FText                                              TransientText;                                            // 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextPropertyTestObject"));
		return ptr;
	}

};


// Class Engine.LightMapTexture2D
// 0x0008 (0x0198 - 0x0190)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0190(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.LightMapTexture2D"));
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0008 (0x0198 - 0x0190)
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                           // 0x0190(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ShadowMapTexture2D"));
		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0008 (0x0198 - 0x0190)
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                               // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureMultiplier;                                        // 0x0194(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureLightProfile"));
		return ptr;
	}

};


// Class Engine.Texture2DDynamic
// 0x0018 (0x0150 - 0x0138)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x0140(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0141(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.Texture2DDynamic"));
		return ptr;
	}

};


// Class Engine.TextureCube
// 0x0058 (0x0190 - 0x0138)
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0138(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureCube"));
		return ptr;
	}

};


// Class Engine.TextureRenderTargetCube
// 0x0020 (0x0160 - 0x0140)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FLinearColor                                       ClearColor;                                               // 0x0144(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0154(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	unsigned char                                      bHDR : 1;                                                 // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x0158(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TextureRenderTargetCube"));
		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.ThumbnailInfo"));
		return ptr;
	}

};


// Class Engine.TimelineTemplate
// 0x0070 (0x0098 - 0x0028)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                               // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	unsigned char                                      bAutoPlay : 1;                                            // 0x0030(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0030(0x0001) (Edit)
	unsigned char                                      bReplicated : 1;                                          // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bValidatedAsWired : 1;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<FTTEventTrack>                              EventTracks;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<FTTFloatTrack>                              FloatTracks;                                              // 0x0048(0x0010) (ZeroConstructor)
	TArray<FTTVectorTrack>                             VectorTracks;                                             // 0x0058(0x0010) (ZeroConstructor)
	TArray<FTTLinearColorTrack>                        LinearColorTracks;                                        // 0x0068(0x0010) (ZeroConstructor)
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                            // 0x0078(0x0010) (Edit, ZeroConstructor)
	FGuid                                              TimelineGuid;                                             // 0x0088(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TimelineTemplate"));
		return ptr;
	}

};


// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UTouchInterface : public UObject
{
public:
	TArray<FTouchInputControl>                         Controls;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreventRecenter;                                         // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.TouchInterface"));
		return ptr;
	}

};


// Class Engine.UserDefinedEnum
// 0x0010 (0x0068 - 0x0058)
class UUserDefinedEnum : public UEnum
{
public:
	TArray<FText>                                      DisplayNames;                                             // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.UserDefinedEnum"));
		return ptr;
	}

};


// Class Engine.AnimDataEntryStruct
// 0x0000 (0x00A8 - 0x00A8)
class UAnimDataEntryStruct : public UUserDefinedStruct
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.AnimDataEntryStruct"));
		return ptr;
	}

};


// Class Engine.VectorField
// 0x0020 (0x0048 - 0x0028)
class UVectorField : public UObject
{
public:
	FBox                                               Bounds;                                                   // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VectorField"));
		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x0088 - 0x0048)
class UVectorFieldAnimated : public UVectorField
{
public:
	UTexture2D*                                        Texture;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesY;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FrameCount;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoop : 1;                                                // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	UVectorFieldStatic*                                NoiseField;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseScale;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VectorFieldAnimated"));
		return ptr;
	}

};


// Class Engine.VectorFieldStatic
// 0x0088 (0x00D0 - 0x0048)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                    // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeY;                                                    // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7C];                                      // 0x0054(0x007C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VectorFieldStatic"));
		return ptr;
	}

};


// Class Engine.VertexAnimBase
// 0x0008 (0x0030 - 0x0028)
class UVertexAnimBase : public UObject
{
public:
	USkeletalMesh*                                     BaseSkelMesh;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VertexAnimBase"));
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0010 (0x0040 - 0x0030)
class UMorphTarget : public UVertexAnimBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.MorphTarget"));
		return ptr;
	}

};


// Class Engine.VertexAnimation
// 0x0018 (0x0048 - 0x0030)
class UVertexAnimation : public UVertexAnimBase
{
public:
	int                                                NumAnimatedVerts;                                         // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0034(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VertexAnimation"));
		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindObject<UClass>(_xor_("Class Engine.VisualLoggerAutomationTests"));
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
