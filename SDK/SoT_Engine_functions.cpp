// Sea of Thieves (2) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "SoT_Engine_classes.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.ActorComponent.ToggleActive
// (Native, Public, BlueprintCallable)

void UActorComponent::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ToggleActive"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetTickGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickGroup"));

	struct
	{
		TEnumAsByte<ETickingGroup>     NewTickGroup;
	} params;

	params.NewTickGroup = NewTickGroup;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickableWhenPaused"));

	struct
	{
		bool                           bTickableWhenPaused;
	} params;

	params.bTickableWhenPaused = bTickableWhenPaused;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetIsReplicated
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ShouldReplicate                (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetIsReplicated(bool ShouldReplicate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetIsReplicated"));

	struct
	{
		bool                           ShouldReplicate;
	} params;

	params.ShouldReplicate = ShouldReplicate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetComponentTickEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetComponentTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetComponentTickEnabled"));

	struct
	{
		bool                           bEnabled;
	} params;

	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetActive(bool bNewActive, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetActive"));

	struct
	{
		bool                           bNewActive;
		bool                           bReset;
	} params;

	params.bNewActive = bNewActive;
	params.bReset = bReset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent"));

	struct
	{
		class UActorComponent*         PrerequisiteComponent;
	} params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteActor"));

	struct
	{
		class AActor*                  PrerequisiteActor;
	} params;

	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveTick"));

	struct
	{
		float                          DeltaSeconds;
	} params;

	params.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveEndPlay"));

	struct
	{
		TEnumAsByte<EEndPlayReason>    EndPlayReason;
	} params;

	params.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UActorComponent::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveBeginPlay"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.OnRep_IsActive
// (Final, Native, Public)

void UActorComponent::OnRep_IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.OnRep_IsActive"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.K2_DestroyComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::K2_DestroyComponent(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.K2_DestroyComponent"));

	struct
	{
		class UObject*                 Object;
	} params;

	params.Object = Object;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.IsComponentTickEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsComponentTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsComponentTickEnabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsBeingDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsBeingDestroyed"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsActive"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetTargetNetDormancy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EComponentNetDormancy> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EComponentNetDormancy> UActorComponent::GetTargetNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetTargetNetDormancy"));

	struct
	{
		TEnumAsByte<EComponentNetDormancy> ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UActorComponent::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetOwner"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.FlushNetDormancy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.FlushNetDormancy"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.Deactivate
// (Native, Public, BlueprintCallable)

void UActorComponent::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Deactivate"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ComponentHasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::ComponentHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ComponentHasTag"));

	struct
	{
		struct FName                   Tag;
		bool                           ReturnValue;
	} params;

	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.AddTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteComponent"));

	struct
	{
		class UActorComponent*         PrerequisiteComponent;
	} params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.AddTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteActor"));

	struct
	{
		class AActor*                  PrerequisiteActor;
	} params;

	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.Activate
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Activate"));

	struct
	{
		bool                           bReset;
	} params;

	params.bReset = bReset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.UserConstructionScript
// (Event, Public, BlueprintEvent)

void AActor::UserConstructionScript()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.UserConstructionScript"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.TearOff
// (Native, Public, BlueprintCallable)

void AActor::TearOff()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.TearOff"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SnapRootComponentTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SnapRootComponentTo"));

	struct
	{
		class AActor*                  InParentActor;
		struct FName                   InSocketName;
	} params;

	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetTickGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickGroup"));

	struct
	{
		TEnumAsByte<ETickingGroup>     NewTickGroup;
	} params;

	params.NewTickGroup = NewTickGroup;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickableWhenPaused"));

	struct
	{
		bool                           bTickableWhenPaused;
	} params;

	params.bTickableWhenPaused = bTickableWhenPaused;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetReplicates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicates                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetReplicates(bool bInReplicates)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicates"));

	struct
	{
		bool                           bInReplicates;
	} params;

	params.bInReplicates = bInReplicates;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetReplicateMovement
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicateMovement           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetReplicateMovement(bool bInReplicateMovement)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicateMovement"));

	struct
	{
		bool                           bInReplicateMovement;
	} params;

	params.bInReplicateMovement = bInReplicateMovement;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewOwner                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetOwner"));

	struct
	{
		class AActor*                  NewOwner;
	} params;

	params.NewOwner = NewOwner;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetLifeSpan
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InLifespan                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetLifeSpan(float InLifespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetLifeSpan"));

	struct
	{
		float                          InLifespan;
	} params;

	params.InLifespan = InLifespan;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetIgnoreNetTransformUpdates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInIgnoreNetTransformUpdates   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetIgnoreNetTransformUpdates(bool bInIgnoreNetTransformUpdates)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetIgnoreNetTransformUpdates"));

	struct
	{
		bool                           bInIgnoreNetTransformUpdates;
	} params;

	params.bInIgnoreNetTransformUpdates = bInIgnoreNetTransformUpdates;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorTickEnabled"));

	struct
	{
		bool                           bEnabled;
	} params;

	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorScale3D"));

	struct
	{
		struct FVector                 NewScale3D;
	} params;

	params.NewScale3D = NewScale3D;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::SetActorRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorRotation"));

	struct
	{
		struct FRotator                NewRotation;
		bool                           ReturnValue;
	} params;

	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.SetActorRelativeScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewRelativeScale               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeScale3D(const struct FVector& NewRelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorRelativeScale3D"));

	struct
	{
		struct FVector                 NewRelativeScale;
	} params;

	params.NewRelativeScale = NewRelativeScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorHiddenInGame
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorHiddenInGame(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorHiddenInGame"));

	struct
	{
		bool                           bNewHidden;
	} params;

	params.bNewHidden = bNewHidden;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorEnableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewActorEnableCollision       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorEnableCollision(bool bNewActorEnableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorEnableCollision"));

	struct
	{
		bool                           bNewActorEnableCollision;
	} params;

	params.bNewActorEnableCollision = bNewActorEnableCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.RemoveTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteComponent"));

	struct
	{
		class UActorComponent*         PrerequisiteComponent;
	} params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.RemoveTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteActor"));

	struct
	{
		class AActor*                  PrerequisiteActor;
	} params;

	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveTick"));

	struct
	{
		float                          DeltaSeconds;
	} params;

	params.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveRadialDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DamageReceived                 (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveRadialDamage"));

	struct
	{
		float                          DamageReceived;
		class UDamageType*             DamageType;
		struct FVector                 Origin;
		struct FHitResult              HitInfo;
		class AController*             InstigatedBy;
		class AActor*                  DamageCauser;
	} params;

	params.DamageReceived = DamageReceived;
	params.DamageType = DamageType;
	params.Origin = Origin;
	params.HitInfo = HitInfo;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceivePointDamage
// (BlueprintAuthorityOnly, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ShotFromDirection              (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceivePointDamage"));

	struct
	{
		float                          Damage;
		class UDamageType*             DamageType;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
		class UPrimitiveComponent*     HitComponent;
		struct FName                   BoneName;
		struct FVector                 ShotFromDirection;
		class AController*             InstigatedBy;
		class AActor*                  DamageCauser;
	} params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitComponent = HitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveHit
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*     MyComp                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bSelfMoved                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void AActor::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveHit"));

	struct
	{
		class UPrimitiveComponent*     MyComp;
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		bool                           bSelfMoved;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
		struct FVector                 NormalImpulse;
		struct FHitResult              Hit;
	} params;

	params.MyComp = MyComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.bSelfMoved = bSelfMoved;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveEndPlay"));

	struct
	{
		TEnumAsByte<EEndPlayReason>    EndPlayReason;
	} params;

	params.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AActor::ReceiveDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveDestroyed"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void AActor::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveBeginPlay"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveAnyDamage"));

	struct
	{
		float                          Damage;
		class UDamageType*             DamageType;
		class AController*             InstigatedBy;
		class AActor*                  DamageCauser;
	} params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnReleased
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorOnReleased()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnReleased"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchLeave
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchLeave"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnter
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnter"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnd"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchBegin"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnClicked
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorOnClicked()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnClicked"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndOverlap"));

	struct
	{
		class AActor*                  OtherActor;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorEndCursorOver
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorEndCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndCursorOver"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginOverlap"));

	struct
	{
		class AActor*                  OtherActor;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorBeginCursorOver
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorBeginCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginCursorOver"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_Role
// (Native, Public)

void AActor::OnRep_Role()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Role"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_ReplicateMovement
// (Native, Public)

void AActor::OnRep_ReplicateMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicateMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_ReplicatedMovement
// (Native, Public)

void AActor::OnRep_ReplicatedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicatedMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_Instigator
// (Native, Public)

void AActor::OnRep_Instigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Instigator"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_AttachmentReplication
// (Native, Public)

void AActor::OnRep_AttachmentReplication()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_AttachmentReplication"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.Actor.OnEndPlayDynamicMulticastEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                  EndPlayActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::OnEndPlayDynamicMulticastEvent__DelegateSignature(class AActor* EndPlayActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.Actor.OnEndPlayDynamicMulticastEvent__DelegateSignature"));

	struct
	{
		class AActor*                  EndPlayActor;
	} params;

	params.EndPlayActor = EndPlayActor;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.Actor.OnDestroyedDynamicMulticastEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                  DeletedActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::OnDestroyedDynamicMulticastEvent__DelegateSignature(class AActor* DeletedActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.Actor.OnDestroyedDynamicMulticastEvent__DelegateSignature"));

	struct
	{
		class AActor*                  DeletedActor;
	} params;

	params.DeletedActor = DeletedActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.MakeNoise
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   NoiseInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRange                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeNoise"));

	struct
	{
		float                          Loudness;
		class APawn*                   NoiseInstigator;
		struct FVector                 NoiseLocation;
		float                          MaxRange;
		struct FName                   Tag;
	} params;

	params.Loudness = Loudness;
	params.NoiseInstigator = NoiseInstigator;
	params.NoiseLocation = NoiseLocation;
	params.MaxRange = MaxRange;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.MakeMIDForMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeMIDForMaterial"));

	struct
	{
		class UMaterialInterface*      Parent;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.Parent = Parent;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_TeleportTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DestLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DestRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_TeleportTo"));

	struct
	{
		struct FVector                 DestLocation;
		struct FRotator                DestRotation;
		bool                           ReturnValue;
	} params;

	params.DestLocation = DestLocation;
	params.DestRotation = DestRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorTransform"));

	struct
	{
		struct FTransform              NewTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
		bool                           ReturnValue;
	} params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorRelativeTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewRelativeTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeTransform"));

	struct
	{
		struct FTransform              NewRelativeTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewRelativeTransform = NewRelativeTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRelativeRotation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeRotation"));

	struct
	{
		struct FRotator                NewRelativeRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewRelativeRotation = NewRelativeRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewRelativeLocation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeLocation"));

	struct
	{
		struct FVector                 NewRelativeLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewRelativeLocation = NewRelativeLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocationAndRotation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
		bool                           ReturnValue;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocation"));

	struct
	{
		struct FVector                 NewLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
		bool                           ReturnValue;
	} params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_OnReset
// (Event, Public, BlueprintEvent)

void AActor::K2_OnReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnReset"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_OnEndViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnEndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnEndViewTarget"));

	struct
	{
		class APlayerController*       PC;
	} params;

	params.PC = PC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_OnBecomeViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnBecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnBecomeViewTarget"));

	struct
	{
		class APlayerController*       PC;
	} params;

	params.PC = PC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_GetRootComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* AActor::K2_GetRootComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetRootComponent"));

	struct
	{
		class USceneComponent*         ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AActor::K2_GetActorRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::K2_GetActorLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_DestroyComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::K2_DestroyComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyComponent"));

	struct
	{
		class UActorComponent*         Component;
	} params;

	params.Component = Component;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_DestroyActor
// (Native, Public, BlueprintCallable)

void AActor::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyActor"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AttachRootComponentToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentToActor"));

	struct
	{
		class AActor*                  InParentActor;
		struct FName                   InSocketName;
		TEnumAsByte<EAttachLocation>   AttachLocationType;
		bool                           bWeldSimulatedBodies;
	} params;

	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AttachRootComponentTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentTo"));

	struct
	{
		class USceneComponent*         InParent;
		struct FName                   InSocketName;
		TEnumAsByte<EAttachLocation>   AttachLocationType;
		bool                           bWeldSimulatedBodies;
	} params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AddActorWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldTransform"));

	struct
	{
		struct FTransform              DeltaTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldRotation"));

	struct
	{
		struct FRotator                DeltaRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorWorldOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldOffset"));

	struct
	{
		struct FVector                 DeltaLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalTransform"));

	struct
	{
		struct FTransform              NewTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalRotation"));

	struct
	{
		struct FRotator                DeltaRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalOffset"));

	struct
	{
		struct FVector                 DeltaLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.IsOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsOverlappingActor"));

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;

	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsChildActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsChildActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsChildActor"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorTickEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsActorTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorTickEnabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorBeingDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsActorBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorBeingDestroyed"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.HasNetOwner
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::HasNetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.HasNetOwner"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.HasAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::HasAuthority()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.HasAuthority"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetVerticalDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetVerticalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVerticalDistanceTo"));

	struct
	{
		class AActor*                  OtherActor;
		float                          ReturnValue;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVelocity"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform AActor::GetTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTransform"));

	struct
	{
		struct FTransform              ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::GetTickableWhenPaused()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTickableWhenPaused"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetPxActorCapacityForPhysXAggregate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char AActor::GetPxActorCapacityForPhysXAggregate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetPxActorCapacityForPhysXAggregate"));

	struct
	{
		unsigned char                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetParentActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AActor::GetParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetParentActor"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AActor::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOwner"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetOverlappingComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UPrimitiveComponent*> OverlappingComponents          (Parm, OutParm, ZeroConstructor)

void AActor::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingComponents"));

	struct
	{
		TArray<class UPrimitiveComponent*> OverlappingComponents;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OverlappingComponents != nullptr)
		*OverlappingComponents = params.OverlappingComponents;
}


// Function Engine.Actor.GetOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingActors"));

	struct
	{
		TArray<class AActor*>          OverlappingActors;
		class UClass*                  ClassFilter;
	} params;

	params.ClassFilter = ClassFilter;

	UObject::ProcessEvent(fn, &params);

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.Actor.GetLifeSpan
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetLifeSpan()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetLifeSpan"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInterfaceImplementer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* AActor::GetInterfaceImplementer(class UClass* InterfaceClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInterfaceImplementer"));

	struct
	{
		class UClass*                  InterfaceClass;
		class UObject*                 ReturnValue;
	} params;

	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigatorController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AController* AActor::GetInstigatorController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigatorController"));

	struct
	{
		class AController*             ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AActor::GetInstigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigator"));

	struct
	{
		class APawn*                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputVectorAxisValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetInputVectorAxisValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputVectorAxisValue"));

	struct
	{
		struct FKey                    InputAxisKey;
		struct FVector                 ReturnValue;
	} params;

	params.InputAxisKey = InputAxisKey;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InputAxisName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisValue(const struct FName& InputAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisValue"));

	struct
	{
		struct FName                   InputAxisName;
		float                          ReturnValue;
	} params;

	params.InputAxisName = InputAxisName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisKeyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisKeyValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisKeyValue"));

	struct
	{
		struct FKey                    InputAxisKey;
		float                          ReturnValue;
	} params;

	params.InputAxisKey = InputAxisKey;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDotProductTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDotProductTo"));

	struct
	{
		class AActor*                  OtherActor;
		float                          ReturnValue;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDistanceTo"));

	struct
	{
		class AActor*                  OtherActor;
		float                          ReturnValue;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetDotProductTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDotProductTo"));

	struct
	{
		class AActor*                  OtherActor;
		float                          ReturnValue;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDistanceTo"));

	struct
	{
		class AActor*                  OtherActor;
		float                          ReturnValue;
	} params;

	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> AActor::GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByTag"));

	struct
	{
		class UClass*                  ComponentClass;
		struct FName                   Tag;
		TArray<class UActorComponent*> ReturnValue;
	} params;

	params.ComponentClass = ComponentClass;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> AActor::GetComponentsByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByClass"));

	struct
	{
		class UClass*                  ComponentClass;
		TArray<class UActorComponent*> ReturnValue;
	} params;

	params.ComponentClass = ComponentClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentInterfacesByClass
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UActorComponent*> OutInterfaces                  (Parm, OutParm, ZeroConstructor)
// class UClass*                  InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)

void AActor::GetComponentInterfacesByClass(class UClass* InterfaceClass, TArray<class UActorComponent*>* OutInterfaces)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentInterfacesByClass"));

	struct
	{
		TArray<class UActorComponent*> OutInterfaces;
		class UClass*                  InterfaceClass;
	} params;

	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	if (OutInterfaces != nullptr)
		*OutInterfaces = params.OutInterfaces;
}


// Function Engine.Actor.GetComponentInterfaceByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::GetComponentInterfaceByClass(class UClass* InterfaceClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentInterfaceByClass"));

	struct
	{
		class UClass*                  InterfaceClass;
		class UActorComponent*         ReturnValue;
	} params;

	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentByClass
// (Native, Public)
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::GetComponentByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentByClass"));

	struct
	{
		class UClass*                  ComponentClass;
		class UActorComponent*         ReturnValue;
	} params;

	params.ComponentClass = ComponentClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachParentActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AActor::GetAttachParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAttachParentActor"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorUpVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorTimeDilation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetActorTimeDilation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorTimeDilation"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorScale3D"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRightVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRightVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRelativeScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorRelativeScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRelativeScale3D"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorForwardVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEyesViewPoint"));

	struct
	{
		struct FVector                 OutLocation;
		struct FRotator                OutRotation;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.Actor.GetActorEnableCollision
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::GetActorEnableCollision()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEnableCollision"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorBounds
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorBounds"));

	struct
	{
		bool                           bOnlyCollidingComponents;
		struct FVector                 Origin;
		struct FVector                 BoxExtent;
	} params;

	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	UObject::ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.Actor.ForceNetUpdate
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AActor::ForceNetUpdate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ForceNetUpdate"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.FlushNetDormancy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.FlushNetDormancy"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.EnableInput
// (Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::EnableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.EnableInput"));

	struct
	{
		class APlayerController*       PlayerController;
	} params;

	params.PlayerController = PlayerController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.DisableInput
// (Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DisableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DisableInput"));

	struct
	{
		class APlayerController*       PlayerController;
	} params;

	params.PlayerController = PlayerController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.DetachRootComponentFromParent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DetachRootComponentFromParent"));

	struct
	{
		bool                           bMaintainWorldPosition;
	} params;

	params.bMaintainWorldPosition = bMaintainWorldPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AttachRootComponentToNoReplication
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AttachRootComponentToNoReplication(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AttachRootComponentToNoReplication"));

	struct
	{
		class USceneComponent*         InParent;
		struct FName                   InSocketName;
		TEnumAsByte<EAttachLocation>   AttachLocationType;
		bool                           bWeldSimulatedBodies;
	} params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AttachActorToActorNoReplication
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AttachActorToActorNoReplication(class AActor* InParentActor, const struct FName& InSocketName, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AttachActorToActorNoReplication"));

	struct
	{
		class AActor*                  InParentActor;
		struct FName                   InSocketName;
		bool                           bWeldSimulatedBodies;
	} params;

	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteComponent"));

	struct
	{
		class UActorComponent*         PrerequisiteComponent;
	} params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteActor"));

	struct
	{
		class AActor*                  PrerequisiteActor;
	} params;

	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   TemplateName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class UObject*                 ComponentTemplateContext       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddComponent"));

	struct
	{
		struct FName                   TemplateName;
		bool                           bManualAttachment;
		struct FTransform              RelativeTransform;
		class UObject*                 ComponentTemplateContext;
		class UActorComponent*         ReturnValue;
	} params;

	params.TemplateName = TemplateName;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.ComponentTemplateContext = ComponentTemplateContext;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.ActorHasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::ActorHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ActorHasTag"));

	struct
	{
		struct FName                   Tag;
		bool                           ReturnValue;
	} params;

	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.ToggleVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::ToggleVisibility(bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ToggleVisibility"));

	struct
	{
		bool                           bPropagateToChildren;
	} params;

	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SnapTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SnapTo(class USceneComponent* InParent, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SnapTo"));

	struct
	{
		class USceneComponent*         InParent;
		struct FName                   InSocketName;
	} params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SharesBasis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*         Other                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::SharesBasis(class USceneComponent* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SharesBasis"));

	struct
	{
		class USceneComponent*         Other;
		bool                           ReturnValue;
	} params;

	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.SetWorldScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldScale3D(const struct FVector& NewScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetWorldScale3D"));

	struct
	{
		struct FVector                 NewScale;
	} params;

	params.NewScale = NewScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewVisibility                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetVisibility"));

	struct
	{
		bool                           bNewVisibility;
		bool                           bPropagateToChildren;
	} params;

	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetRelativeScale3D
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetRelativeScale3D"));

	struct
	{
		struct FVector                 NewScale3D;
	} params;

	params.NewScale3D = NewScale3D;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetHiddenInGame
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewHidden                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetHiddenInGame"));

	struct
	{
		bool                           NewHidden;
		bool                           bPropagateToChildren;
	} params;

	params.NewHidden = NewHidden;
	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetAbsolute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewAbsoluteLocation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteRotation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteScale              (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetAbsolute"));

	struct
	{
		bool                           bNewAbsoluteLocation;
		bool                           bNewAbsoluteRotation;
		bool                           bNewAbsoluteScale;
	} params;

	params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	params.bNewAbsoluteScale = bNewAbsoluteScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.ResetRelativeTransform
// (Final, Native, Public, BlueprintCallable)

void USceneComponent::ResetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ResetRelativeTransform"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.OnRep_Visibility
// (Final, Native, Private)
// Parameters:
// bool                           OldValue                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::OnRep_Visibility(bool OldValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Visibility"));

	struct
	{
		bool                           OldValue;
	} params;

	params.OldValue = OldValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.OnRep_Transform
// (Final, Native, Private)

void USceneComponent::OnRep_Transform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Transform"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.K2_TryGetCachedSocketVelocity
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   SocketName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutVelocity                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::K2_TryGetCachedSocketVelocity(const struct FName& SocketName, struct FVector* OutVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_TryGetCachedSocketVelocity"));

	struct
	{
		struct FName                   SocketName;
		struct FVector                 OutVelocity;
		bool                           ReturnValue;
	} params;

	params.SocketName = SocketName;

	UObject::ProcessEvent(fn, &params);

	if (OutVelocity != nullptr)
		*OutVelocity = params.OutVelocity;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_SetWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldTransform"));

	struct
	{
		struct FTransform              NewTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldRotation"));

	struct
	{
		struct FRotator                NewRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocation"));

	struct
	{
		struct FVector                 NewLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeTransform"));

	struct
	{
		struct FTransform              NewTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeRotation"));

	struct
	{
		struct FRotator                NewRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocation"));

	struct
	{
		struct FVector                 NewLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_GetComponentToWorld
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USceneComponent::K2_GetComponentToWorld()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentToWorld"));

	struct
	{
		struct FTransform              ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::K2_GetComponentScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentScale"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USceneComponent::K2_GetComponentRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::K2_GetComponentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_AttachTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AttachTo"));

	struct
	{
		class USceneComponent*         InParent;
		struct FName                   InSocketName;
		TEnumAsByte<EAttachLocation>   AttachType;
		bool                           bWeldSimulatedBodies;
	} params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachType = AttachType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.K2_AddWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldTransform"));

	struct
	{
		struct FTransform              DeltaTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldRotation"));

	struct
	{
		struct FRotator                DeltaRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddWorldOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldOffset"));

	struct
	{
		struct FVector                 DeltaLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeRotation"));

	struct
	{
		struct FRotator                DeltaRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeLocation"));

	struct
	{
		struct FVector                 DeltaLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalTransform"));

	struct
	{
		struct FTransform              DeltaTransform;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalRotation"));

	struct
	{
		struct FRotator                DeltaRotation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalOffset"));

	struct
	{
		struct FVector                 DeltaLocation;
		bool                           bSweep;
		struct FHitResult              SweepHitResult;
		bool                           bTeleport;
	} params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.IsVisible
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsVisible"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsSimulatingPhysics
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsSimulatingPhysics(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsSimulatingPhysics"));

	struct
	{
		struct FName                   BoneName;
		bool                           ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsAnySimulatingPhysics
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsAnySimulatingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsAnySimulatingPhysics"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetUpVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketTransform
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERelativeTransformSpace> TransformSpace                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USceneComponent::GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketTransform"));

	struct
	{
		struct FName                   InSocketName;
		TEnumAsByte<ERelativeTransformSpace> TransformSpace;
		struct FTransform              ReturnValue;
	} params;

	params.InSocketName = InSocketName;
	params.TransformSpace = TransformSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USceneComponent::GetSocketRotation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketRotation"));

	struct
	{
		struct FName                   InSocketName;
		struct FRotator                ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketQuaternion
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FQuat USceneComponent::GetSocketQuaternion(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketQuaternion"));

	struct
	{
		struct FName                   InSocketName;
		struct FQuat                   ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetSocketLocation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketLocation"));

	struct
	{
		struct FName                   InSocketName;
		struct FVector                 ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRightVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRightVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRelativeTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USceneComponent::GetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRelativeTransform"));

	struct
	{
		struct FTransform              ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetPhysicsVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APhysicsVolume* USceneComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetPhysicsVolume"));

	struct
	{
		class APhysicsVolume*          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetParentComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USceneComponent*> Parents                        (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetParentComponents(TArray<class USceneComponent*>* Parents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetParentComponents"));

	struct
	{
		TArray<class USceneComponent*> Parents;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (Parents != nullptr)
		*Parents = params.Parents;
}


// Function Engine.SceneComponent.GetNumChildrenComponents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USceneComponent::GetNumChildrenComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetNumChildrenComponents"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetForwardVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetComponentVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetComponentVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetComponentVelocity"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetChildrenComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeAllDescendants         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class USceneComponent*> Children                       (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildrenComponents"));

	struct
	{
		bool                           bIncludeAllDescendants;
		TArray<class USceneComponent*> Children;
	} params;

	params.bIncludeAllDescendants = bIncludeAllDescendants;

	UObject::ProcessEvent(fn, &params);

	if (Children != nullptr)
		*Children = params.Children;
}


// Function Engine.SceneComponent.GetChildComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ChildIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* USceneComponent::GetChildComponent(int ChildIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildComponent"));

	struct
	{
		int                            ChildIndex;
		class USceneComponent*         ReturnValue;
	} params;

	params.ChildIndex = ChildIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USceneComponent::GetAttachSocketName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachSocketName"));

	struct
	{
		struct FName                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* USceneComponent::GetAttachParent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachParent"));

	struct
	{
		class USceneComponent*         ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachedBasisTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USceneComponent::GetAttachedBasisTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachedBasisTransform"));

	struct
	{
		struct FTransform              ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAllSocketNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> USceneComponent::GetAllSocketNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAllSocketNames"));

	struct
	{
		TArray<struct FName>           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DoesSocketExist
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::DoesSocketExist(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DoesSocketExist"));

	struct
	{
		struct FName                   InSocketName;
		bool                           ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DetachFromParent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCallModify                    (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DetachFromParent"));

	struct
	{
		bool                           bMaintainWorldPosition;
		bool                           bCallModify;
	} params;

	params.bMaintainWorldPosition = bMaintainWorldPosition;
	params.bCallModify = bCallModify;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.SpawnDefaultController
// (Native, Public, BlueprintCallable)

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SpawnDefaultController"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.SetCanAffectNavigationGeneration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void APawn::SetCanAffectNavigationGeneration(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SetCanAffectNavigationGeneration"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*             OldController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceiveUnpossessed(class AController* OldController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceiveUnpossessed"));

	struct
	{
		class AController*             OldController;
	} params;

	params.OldController = OldController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*             NewController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceivePossessed(class AController* NewController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceivePossessed"));

	struct
	{
		class AController*             NewController;
	} params;

	params.NewController = NewController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.PawnMakeNoise
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseNoiseMakerLocation         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.PawnMakeNoise"));

	struct
	{
		float                          Loudness;
		struct FVector                 NoiseLocation;
		bool                           bUseNoiseMakerLocation;
		class AActor*                  NoiseMaker;
	} params;

	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;
	params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	params.NoiseMaker = NoiseMaker;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.OnRep_PlayerState
// (Native, Public)

void APawn::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_PlayerState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.OnRep_Controller
// (Native, Public)

void APawn::OnRep_Controller()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_Controller"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.LaunchPawn
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.LaunchPawn"));

	struct
	{
		struct FVector                 LaunchVelocity;
		bool                           bXYOverride;
		bool                           bZOverride;
	} params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.K2_GetMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::K2_GetMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.K2_GetMovementInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsMoveInputIgnored"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsLocallyControlled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsControlled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsControlled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPendingMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetPendingMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetPendingMovementInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetNavAgentLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetNavAgentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetNavAgentLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPawnMovementComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPawnMovementComponent* APawn::GetMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementComponent"));

	struct
	{
		class UPawnMovementComponent*  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementBaseActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                   Pawn                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APawn::GetMovementBaseActor(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementBaseActor"));

	struct
	{
		class APawn*                   Pawn;
		class AActor*                  ReturnValue;
	} params;

	params.Pawn = Pawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetLastMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetLastMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetLastMovementInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetControlRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APawn::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetControlRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AController* APawn::GetController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetController"));

	struct
	{
		class AController*             ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetBaseAimRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.DetachFromControllerPendingDestroy
// (Native, Public, BlueprintCallable)

void APawn::DetachFromControllerPendingDestroy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.DetachFromControllerPendingDestroy"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ConsumeMovementInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::ConsumeMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ConsumeMovementInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.AddMovementInput
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldDirection                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleValue                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddMovementInput"));

	struct
	{
		struct FVector                 WorldDirection;
		float                          ScaleValue;
		bool                           bForce;
	} params;

	params.WorldDirection = WorldDirection;
	params.ScaleValue = ScaleValue;
	params.bForce = bForce;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerYawInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerYawInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerRollInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerRollInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerPitchInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerPitchInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.UnCrouch
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::UnCrouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.UnCrouch"));

	struct
	{
		bool                           bClientSimulation;
	} params;

	params.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.StopJumping
// (Native, Public, BlueprintCallable)

void ACharacter::StopJumping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopJumping"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.StopAnimMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::StopAnimMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopAnimMontage"));

	struct
	{
		class UAnimMontage*            AnimMontage;
	} params;

	params.AnimMontage = AnimMontage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.SetReplicateMovement
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicateMovement           (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::SetReplicateMovement(bool bInReplicateMovement)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.SetReplicateMovement"));

	struct
	{
		bool                           bInReplicateMovement;
	} params;

	params.bInReplicateMovement = bInReplicateMovement;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.PlayAnimMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACharacter::PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.PlayAnimMontage"));

	struct
	{
		class UAnimMontage*            AnimMontage;
		float                          InPlayRate;
		struct FName                   StartSectionName;
		float                          ReturnValue;
	} params;

	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.OnWalkingOffLedge
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 PreviousFloorImpactNormal      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PreviousFloorContactNormal     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PreviousLocation               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          TimeDelta                      (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnWalkingOffLedge"));

	struct
	{
		struct FVector                 PreviousFloorImpactNormal;
		struct FVector                 PreviousFloorContactNormal;
		struct FVector                 PreviousLocation;
		float                          TimeDelta;
	} params;

	params.PreviousFloorImpactNormal = PreviousFloorImpactNormal;
	params.PreviousFloorContactNormal = PreviousFloorContactNormal;
	params.PreviousLocation = PreviousLocation;
	params.TimeDelta = TimeDelta;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_RootMotion
// (Final, Native, Public)

void ACharacter::OnRep_RootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_RootMotion"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_ReplicatedBasedMovement
// (Native, Public)

void ACharacter::OnRep_ReplicatedBasedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_ReplicatedBasedMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_IsCrouched
// (Native, Public)

void ACharacter::OnRep_IsCrouched()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_IsCrouched"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnLaunched
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLaunched"));

	struct
	{
		struct FVector                 LaunchVelocity;
		bool                           bXYOverride;
		bool                           bZOverride;
	} params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnLanded
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void ACharacter::OnLanded(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLanded"));

	struct
	{
		struct FHitResult              Hit;
	} params;

	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnJumped
// (Native, Event, Public, BlueprintEvent)

void ACharacter::OnJumped()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnJumped"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.LaunchCharacter
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.LaunchCharacter"));

	struct
	{
		struct FVector                 LaunchVelocity;
		bool                           bXYOverride;
		bool                           bZOverride;
	} params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_UpdateCustomMovement
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_UpdateCustomMovement(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_UpdateCustomMovement"));

	struct
	{
		float                          DeltaTime;
	} params;

	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnStartCrouch"));

	struct
	{
		float                          HalfHeightAdjust;
		float                          ScaledHalfHeightAdjust;
	} params;

	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PrevCustomMode                 (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnMovementModeChanged"));

	struct
	{
		TEnumAsByte<EMovementMode>     PrevMovementMode;
		TEnumAsByte<EMovementMode>     NewMovementMode;
		unsigned char                  PrevCustomMode;
		unsigned char                  NewCustomMode;
	} params;

	params.PrevMovementMode = PrevMovementMode;
	params.NewMovementMode = NewMovementMode;
	params.PrevCustomMode = PrevCustomMode;
	params.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnEndCrouch"));

	struct
	{
		float                          HalfHeightAdjust;
		float                          ScaledHalfHeightAdjust;
	} params;

	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.Jump
// (Native, Public, BlueprintCallable)

void ACharacter::Jump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Jump"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.IsPlayingRootMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsPlayingRootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingRootMotion"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.IsPlayingNetworkedRootMotionMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsPlayingNetworkedRootMotionMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingNetworkedRootMotionMontage"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.IsJumpProvidingForce
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsJumpProvidingForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsJumpProvidingForce"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.GetCurrentMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* ACharacter::GetCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetCurrentMontage"));

	struct
	{
		class UAnimMontage*            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.Crouch
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::Crouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Crouch"));

	struct
	{
		bool                           bClientSimulation;
	} params;

	params.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatWalk
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatWalk"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatGhost
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatGhost"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatFly
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatFly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatFly"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.CanJumpInternal
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJumpInternal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJumpInternal"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.CanJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJump"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.UnlockAIResources
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bUnlockMovement                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UnlockAILogic                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.UnlockAIResources"));

	struct
	{
		bool                           bUnlockMovement;
		bool                           UnlockAILogic;
	} params;

	params.bUnlockMovement = bUnlockMovement;
	params.UnlockAILogic = UnlockAILogic;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.TryGetPawnOwner
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UAnimInstance::TryGetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.TryGetPawnOwner"));

	struct
	{
		class APawn*                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.StopSlotAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.StopSlotAnimation"));

	struct
	{
		float                          InBlendOutTime;
		struct FName                   SlotNodeName;
	} params;

	params.InBlendOutTime = InBlendOutTime;
	params.SlotNodeName = SlotNodeName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.SetMorphTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::SetMorphTarget(const struct FName& MorphTargetName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetMorphTarget"));

	struct
	{
		struct FName                   MorphTargetName;
		float                          Value;
	} params;

	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTriggerTime            (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* UAnimInstance::PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage"));

	struct
	{
		class UAnimSequenceBase*       Asset;
		struct FName                   SlotNodeName;
		float                          BlendInTime;
		float                          BlendOutTime;
		float                          InPlayRate;
		int                            LoopCount;
		float                          BlendOutTriggerTime;
		class UAnimMontage*            ReturnValue;
	} params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;
	params.BlendOutTriggerTime = BlendOutTriggerTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.PlaySlotAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimation"));

	struct
	{
		class UAnimSequenceBase*       Asset;
		struct FName                   SlotNodeName;
		float                          BlendInTime;
		float                          BlendOutTime;
		float                          InPlayRate;
		int                            LoopCount;
		float                          ReturnValue;
	} params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Stop"));

	struct
	{
		float                          InBlendOutTime;
		class UAnimMontage*            Montage;
	} params;

	params.InBlendOutTime = InBlendOutTime;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewPlayRate                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetPlayRate"));

	struct
	{
		class UAnimMontage*            Montage;
		float                          NewPlayRate;
	} params;

	params.Montage = Montage;
	params.NewPlayRate = NewPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_SetNextSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SectionNameToChange            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   NextSection                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetNextSection"));

	struct
	{
		struct FName                   SectionNameToChange;
		struct FName                   NextSection;
		class UAnimMontage*            Montage;
	} params;

	params.SectionNameToChange = SectionNameToChange;
	params.NextSection = NextSection;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_Resume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Resume(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Resume"));

	struct
	{
		class UAnimMontage*            Montage;
	} params;

	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            MontageToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Play"));

	struct
	{
		class UAnimMontage*            MontageToPlay;
		float                          InPlayRate;
		float                          ReturnValue;
	} params;

	params.MontageToPlay = MontageToPlay;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Pause(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Pause"));

	struct
	{
		class UAnimMontage*            Montage;
	} params;

	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSectionsEnd"));

	struct
	{
		struct FName                   SectionName;
		class UAnimMontage*            Montage;
	} params;

	params.SectionName = SectionName;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_JumpToSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSection"));

	struct
	{
		struct FName                   SectionName;
		class UAnimMontage*            Montage;
	} params;

	params.SectionName = SectionName;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_IsPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsPlaying(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsPlaying"));

	struct
	{
		class UAnimMontage*            Montage;
		bool                           ReturnValue;
	} params;

	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_IsActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsActive(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsActive"));

	struct
	{
		class UAnimMontage*            Montage;
		bool                           ReturnValue;
	} params;

	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetCurrentSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAnimInstance::Montage_GetCurrentSection(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetCurrentSection"));

	struct
	{
		class UAnimMontage*            Montage;
		struct FName                   ReturnValue;
	} params;

	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.LockAIResources
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bLockMovement                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           LockAILogic                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.LockAIResources"));

	struct
	{
		bool                           bLockMovement;
		bool                           LockAILogic;
	} params;

	params.bLockMovement = bLockMovement;
	params.LockAILogic = LockAILogic;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.IsPlayingSlotAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimSequenceBase*       Asset                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.IsPlayingSlotAnimation"));

	struct
	{
		class UAnimSequenceBase*       Asset;
		struct FName                   SlotNodeName;
		bool                           ReturnValue;
	} params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetSyncGroupPosition
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetSyncGroupPosition(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetSyncGroupPosition"));

	struct
	{
		struct FName                   Name;
		float                          ReturnValue;
	} params;

	params.Name = Name;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetStateWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetStateWeight"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeFraction"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTime(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTime"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimLength(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimLength"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* UAnimInstance::GetOwningComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningComponent"));

	struct
	{
		class USkeletalMeshComponent*  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UAnimInstance::GetOwningActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningActor"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetMaxPlayingAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetMaxPlayingAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetMaxPlayingAnimTimeRemaining"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetMaxAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetMaxAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetMaxAnimTimeRemaining"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction"));

	struct
	{
		int                            MachineIndex;
		int                            TransitionIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed"));

	struct
	{
		int                            MachineIndex;
		int                            TransitionIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration"));

	struct
	{
		int                            MachineIndex;
		int                            TransitionIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceStateWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceStateWeight"));

	struct
	{
		int                            MachineIndex;
		int                            StateIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime"));

	struct
	{
		int                            MachineIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction"));

	struct
	{
		int                            AssetPlayerIndex;
		float                          ReturnValue;
	} params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd"));

	struct
	{
		int                            AssetPlayerIndex;
		float                          ReturnValue;
	} params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction"));

	struct
	{
		int                            AssetPlayerIndex;
		float                          ReturnValue;
	} params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTime(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTime"));

	struct
	{
		int                            AssetPlayerIndex;
		float                          ReturnValue;
	} params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerLength(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerLength"));

	struct
	{
		int                            AssetPlayerIndex;
		float                          ReturnValue;
	} params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurveValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   CurveName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurveValue(const struct FName& CurveName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurveValue"));

	struct
	{
		struct FName                   CurveName;
		float                          ReturnValue;
	} params;

	params.CurveName = CurveName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAnimInstance::GetCurrentStateName(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentStateName"));

	struct
	{
		int                            MachineIndex;
		struct FName                   ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentStateElapsedTime"));

	struct
	{
		int                            MachineIndex;
		float                          ReturnValue;
	} params;

	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction"));

	struct
	{
		class UAnimationAsset*         AnimAsset;
		float                          CurrentTime;
		float                          ReturnValue;
	} params;

	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd"));

	struct
	{
		class UAnimationAsset*         AnimAsset;
		float                          CurrentTime;
		float                          ReturnValue;
	} params;

	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction"));

	struct
	{
		class UAnimationAsset*         AnimAsset;
		float                          CurrentTime;
		float                          ReturnValue;
	} params;

	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerLength"));

	struct
	{
		class UAnimationAsset*         AnimAsset;
		float                          ReturnValue;
	} params;

	params.AnimAsset = AnimAsset;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.ClearMorphTargets
// (Final, Native, Public, BlueprintCallable)

void UAnimInstance::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.ClearMorphTargets"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.CalculateDirection
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Velocity                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                BaseRotation                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.CalculateDirection"));

	struct
	{
		struct FVector                 Velocity;
		struct FRotator                BaseRotation;
		float                          ReturnValue;
	} params;

	params.Velocity = Velocity;
	params.BaseRotation = BaseRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.BlueprintUpdateAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaTimeX                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintUpdateAnimation"));

	struct
	{
		float                          DeltaTimeX;
	} params;

	params.DeltaTimeX = DeltaTimeX;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintUninitializeAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintUninitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintUninitializeAnimation"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintPostEvaluateAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintInitializeAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintInitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintInitializeAnimation"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.AnimNotify_Sound
// (Final, Native, Public)
// Parameters:
// class UAnimNotify*             Notify                         (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::AnimNotify_Sound(class UAnimNotify* Notify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.AnimNotify_Sound"));

	struct
	{
		class UAnimNotify*             Notify;
	} params;

	params.Notify = Notify;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimNotify.Received_Notify
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotify::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.Received_Notify"));

	struct
	{
		class USkeletalMeshComponent*  MeshComp;
		class UAnimSequenceBase*       Animation;
		bool                           ReturnValue;
	} params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotify.GetNotifyName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UAnimNotify::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.GetNotifyName"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyTick
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FrameDeltaTime                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyTick"));

	struct
	{
		class USkeletalMeshComponent*  MeshComp;
		class UAnimSequenceBase*       Animation;
		float                          FrameDeltaTime;
		bool                           ReturnValue;
	} params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.FrameDeltaTime = FrameDeltaTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyEnd
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyEnd"));

	struct
	{
		class USkeletalMeshComponent*  MeshComp;
		class UAnimSequenceBase*       Animation;
		bool                           ReturnValue;
	} params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyBegin
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TotalDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyBegin"));

	struct
	{
		class USkeletalMeshComponent*  MeshComp;
		class UAnimSequenceBase*       Animation;
		float                          TotalDuration;
		bool                           ReturnValue;
	} params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.GetNotifyName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UAnimNotifyState::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.GetNotifyName"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraComponent.ProjectWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntPoint               ViewDimensions                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCameraComponent::ProjectWorldLocation(const struct FVector& WorldLocation, const struct FIntPoint& ViewDimensions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.ProjectWorldLocation"));

	struct
	{
		struct FVector                 WorldLocation;
		struct FIntPoint               ViewDimensions;
		struct FVector                 ReturnValue;
	} params;

	params.WorldLocation = WorldLocation;
	params.ViewDimensions = ViewDimensions;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraComponent.GetCameraView
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FMinimalViewInfo        DesiredView                    (Parm, OutParm)

void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.GetCameraView"));

	struct
	{
		float                          DeltaTime;
		struct FMinimalViewInfo        DesiredView;
	} params;

	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	if (DesiredView != nullptr)
		*DesiredView = params.DesiredView;
}


// Function Engine.CameraComponent.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void UCameraComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.AddOrUpdateBlendable"));

	struct
	{
		TScriptInterface<class UBlendableInterface> InBlendableObject;
		float                          InWeight;
	} params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.StopMovementImmediately
// (Native, Public, BlueprintCallable)

void UMovementComponent::StopMovementImmediately()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.StopMovementImmediately"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
// (Native, Public, BlueprintCallable)

void UMovementComponent::SnapUpdatedComponentToPlane()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SnapUpdatedComponentToPlane"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetUpdatedComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         NewUpdatedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMovementComponent::SetUpdatedComponent(class USceneComponent* NewUpdatedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetUpdatedComponent"));

	struct
	{
		class USceneComponent*         NewUpdatedComponent;
	} params;

	params.NewUpdatedComponent = NewUpdatedComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintOrigin
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintOrigin"));

	struct
	{
		struct FVector                 PlaneOrigin;
	} params;

	params.PlaneOrigin = PlaneOrigin;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintNormal
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintNormal(const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintNormal"));

	struct
	{
		struct FVector                 PlaneNormal;
	} params;

	params.PlaneNormal = PlaneNormal;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintFromVectors"));

	struct
	{
		struct FVector                 Forward;
		struct FVector                 Up;
	} params;

	params.Forward = Forward;
	params.Up = Up;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintEnabled"));

	struct
	{
		bool                           bEnabled;
	} params;

	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting                 (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintAxisSetting(TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting"));

	struct
	{
		TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting;
	} params;

	params.NewAxisSetting = NewAxisSetting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.PhysicsVolumeChanged
// (Native, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.PhysicsVolumeChanged"));

	struct
	{
		class APhysicsVolume*          NewVolume;
	} params;

	params.NewVolume = NewVolume;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.K2_MoveUpdatedComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Delta                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_MoveUpdatedComponent"));

	struct
	{
		struct FVector                 Delta;
		struct FRotator                NewRotation;
		struct FHitResult              OutHit;
		bool                           bSweep;
		bool                           bTeleport;
		bool                           ReturnValue;
	} params;

	params.Delta = Delta;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetModifiedMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetMaxSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetMaxSpeedModifier"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.IsExceedingMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MaxSpeed                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.IsExceedingMaxSpeed"));

	struct
	{
		float                          MaxSpeed;
		bool                           ReturnValue;
	} params;

	params.MaxSpeed = MaxSpeed;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector UMovementComponent::GetPlaneConstraintOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintOrigin"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector UMovementComponent::GetPlaneConstraintNormal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintNormal"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EPlaneConstraintAxisSetting> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPlaneConstraintAxisSetting> UMovementComponent::GetPlaneConstraintAxisSetting()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting"));

	struct
	{
		TEnumAsByte<EPlaneConstraintAxisSetting> ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPhysicsVolume
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APhysicsVolume* UMovementComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPhysicsVolume"));

	struct
	{
		class APhysicsVolume*          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetMaxSpeed"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetGravityZ
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetGravityZ"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainNormalToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UMovementComponent::ConstrainNormalToPlane(const struct FVector& Normal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainNormalToPlane"));

	struct
	{
		struct FVector                 Normal;
		struct FVector                 ReturnValue;
	} params;

	params.Normal = Normal;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainLocationToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UMovementComponent::ConstrainLocationToPlane(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainLocationToPlane"));

	struct
	{
		struct FVector                 Location;
		struct FVector                 ReturnValue;
	} params;

	params.Location = Location;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainDirectionToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UMovementComponent::ConstrainDirectionToPlane(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainDirectionToPlane"));

	struct
	{
		struct FVector                 Direction;
		struct FVector                 ReturnValue;
	} params;

	params.Direction = Direction;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.StopMovementKeepPathing
// (Final, Native, Public, BlueprintCallable)

void UNavMovementComponent::StopMovementKeepPathing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopMovementKeepPathing"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavMovementComponent.StopActiveMovement
// (Native, Public, BlueprintCallable)

void UNavMovementComponent::StopActiveMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopActiveMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavMovementComponent.IsSwimming
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsSwimming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsSwimming"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsMovingOnGround
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsMovingOnGround()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsMovingOnGround"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFlying
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFlying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFlying"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFalling
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFalling"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsCrouching
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsCrouching()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsCrouching"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.GetActorFeetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavMovementComponent::GetActorFeetLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.GetActorFeetLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.K2_GetInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::K2_GetInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.K2_GetInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPawnMovementComponent::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.IsMoveInputIgnored"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPendingInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::GetPendingInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPendingInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPawnOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UPawnMovementComponent::GetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPawnOwner"));

	struct
	{
		class APawn*                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetLastInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::GetLastInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetLastInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.ConsumeInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::ConsumeInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.ConsumeInputVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.AddInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldVector                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UPawnMovementComponent::AddInputVector(const struct FVector& WorldVector, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.AddInputVector"));

	struct
	{
		struct FVector                 WorldVector;
		bool                           bForce;
	} params;

	params.WorldVector = WorldVector;
	params.bForce = bForce;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.UpdateMaxNavMeshProjectionIntervalAndModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DesiredMaxNavMeshProjectionInterval (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::UpdateMaxNavMeshProjectionIntervalAndModifier(float DesiredMaxNavMeshProjectionInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.UpdateMaxNavMeshProjectionIntervalAndModifier"));

	struct
	{
		float                          DesiredMaxNavMeshProjectionInterval;
	} params;

	params.DesiredMaxNavMeshProjectionInterval = DesiredMaxNavMeshProjectionInterval;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InWalkableFloorZ               (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorZ"));

	struct
	{
		float                          InWalkableFloorZ;
	} params;

	params.InWalkableFloorZ = InWalkableFloorZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InWalkableFloorAngle           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle"));

	struct
	{
		float                          InWalkableFloorAngle;
	} params;

	params.InWalkableFloorAngle = InWalkableFloorAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetNavMeshProjectionInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InNavMeshProjectionInterval    (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetNavMeshProjectionInterval(float InNavMeshProjectionInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetNavMeshProjectionInterval"));

	struct
	{
		float                          InNavMeshProjectionInterval;
	} params;

	params.InNavMeshProjectionInterval = InNavMeshProjectionInterval;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetMovementMode
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetMovementMode"));

	struct
	{
		TEnumAsByte<EMovementMode>     NewMovementMode;
		unsigned char                  NewCustomMode;
	} params;

	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToIgnore"));

	struct
	{
		int                            GroupFlags;
	} params;

	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToAvoid"));

	struct
	{
		int                            GroupFlags;
	} params;

	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceGroup"));

	struct
	{
		int                            GroupFlags;
	} params;

	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveOld
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          OldTimeStamp                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   OldAccel                       (Parm)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  OldMoveFlags                   (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char OldMoveFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveOld"));

	struct
	{
		float                          OldTimeStamp;
		struct FVector_NetQuantize10   OldAccel;
		class UPrimitiveComponent*     ClientMovementBase;
		struct FName                   ClientBaseBoneName;
		unsigned char                  OldMoveFlags;
	} params;

	params.OldTimeStamp = OldTimeStamp;
	params.OldAccel = OldAccel;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.OldMoveFlags = OldMoveFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveDualHybridRootMotion
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveDualHybridRootMotion"));

	struct
	{
		float                          TimeStamp0;
		struct FVector_NetQuantize10   InAccel0;
		unsigned char                  PendingFlags;
		uint32_t                       View0;
		float                          TimeStamp;
		struct FVector_NetQuantize10   InAccel;
		struct FVector_NetQuantize100  ClientLoc;
		unsigned char                  NewFlags;
		unsigned char                  ClientRoll;
		uint32_t                       View;
		class UPrimitiveComponent*     ClientMovementBase;
		struct FName                   ClientBaseBoneName;
		unsigned char                  ClientMovementMode;
	} params;

	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveDual
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveDual"));

	struct
	{
		float                          TimeStamp0;
		struct FVector_NetQuantize10   InAccel0;
		unsigned char                  PendingFlags;
		uint32_t                       View0;
		float                          TimeStamp;
		struct FVector_NetQuantize10   InAccel;
		struct FVector_NetQuantize100  ClientLoc;
		unsigned char                  NewFlags;
		unsigned char                  ClientRoll;
		uint32_t                       View;
		class UPrimitiveComponent*     ClientMovementBase;
		struct FName                   ClientBaseBoneName;
		unsigned char                  ClientMovementMode;
	} params;

	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMove
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize10   InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMove"));

	struct
	{
		float                          TimeStamp;
		struct FVector_NetQuantize10   InAccel;
		struct FVector_NetQuantize100  ClientLoc;
		unsigned char                  CompressedMoveFlags;
		unsigned char                  ClientRoll;
		uint32_t                       View;
		class UPrimitiveComponent*     ClientMovementBase;
		struct FName                   ClientBaseBoneName;
		unsigned char                  ClientMovementMode;
	} params;

	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalking"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalkable
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalkable(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalkable"));

	struct
	{
		struct FHitResult              Hit;
		bool                           ReturnValue;
	} params;

	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetValidPerchRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetValidPerchRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetValidPerchRadius"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetPerchRadiusThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetNavMeshProjectionInterval
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetNavMeshProjectionInterval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetNavMeshProjectionInterval"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMovementBase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMovementBase"));

	struct
	{
		class UPrimitiveComponent*     ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxJumpHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxJumpHeight"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxAcceleration"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCharacterMovementComponent::GetCurrentAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCurrentAcceleration"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACharacter* UCharacterMovementComponent::GetCharacterOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCharacterOwner"));

	struct
	{
		class ACharacter*              ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetAnalogInputModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetAnalogInputModifier"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.DisableMovement
// (Native, Public, BlueprintCallable)

void UCharacterMovementComponent::DisableMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.DisableMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition"));

	struct
	{
		float                          TimeStamp;
		struct FVector                 NewLoc;
		class UPrimitiveComponent*     NewBase;
		struct FName                   NewBaseBoneName;
		bool                           bHasBase;
		bool                           bBaseRelativePosition;
		unsigned char                  ServerMovementMode;
	} params;

	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ServerMontageTrackPosition     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ServerLoc                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ServerRotation                 (Parm)
// float                          ServerVelZ                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ServerBase                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ServerBoneName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition"));

	struct
	{
		float                          TimeStamp;
		float                          ServerMontageTrackPosition;
		struct FVector                 ServerLoc;
		struct FVector_NetQuantizeNormal ServerRotation;
		float                          ServerVelZ;
		class UPrimitiveComponent*     ServerBase;
		struct FName                   ServerBoneName;
		bool                           bHasBase;
		bool                           bBaseRelativePosition;
		unsigned char                  ServerMovementMode;
	} params;

	params.TimeStamp = TimeStamp;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAdjustPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAdjustPosition"));

	struct
	{
		float                          TimeStamp;
		struct FVector                 NewLoc;
		struct FVector                 NewVel;
		class UPrimitiveComponent*     NewBase;
		struct FName                   NewBaseBoneName;
		bool                           bHasBase;
		bool                           bBaseRelativePosition;
		unsigned char                  ServerMovementMode;
	} params;

	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAckGoodMove
// (Net, Native, Event, Public, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAckGoodMove"));

	struct
	{
		float                          TimeStamp;
	} params;

	params.TimeStamp = TimeStamp;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.CapsuleTouched
// (Native, Protected, HasOutParms)
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void UCharacterMovementComponent::CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CapsuleTouched"));

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		int                            OtherBodyIndex;
		bool                           bFromSweep;
		struct FHitResult              SweepResult;
	} params;

	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.CalcVelocity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Friction                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFluid                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          BrakingDeceleration            (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CalcVelocity"));

	struct
	{
		float                          DeltaTime;
		float                          Friction;
		bool                           bFluid;
		float                          BrakingDeceleration;
	} params;

	params.DeltaTime = DeltaTime;
	params.Friction = Friction;
	params.bFluid = bFluid;
	params.BrakingDeceleration = BrakingDeceleration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.AddImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddImpulse"));

	struct
	{
		struct FVector                 Impulse;
		bool                           bVelocityChange;
	} params;

	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.AddForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddForce(const struct FVector& Force)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddForce"));

	struct
	{
		struct FVector                 Force;
	} params;

	params.Force = Force;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UGameInstance::ReceiveShutdown()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveShutdown"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.ReceiveInit
// (Event, Public, BlueprintEvent)

void UGameInstance::ReceiveInit()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveInit"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.DebugRemovePlayer
// (Exec, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugRemovePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugRemovePlayer"));

	struct
	{
		int                            ControllerId;
	} params;

	params.ControllerId = ControllerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.DebugCreatePlayer
// (Exec, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugCreatePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugCreatePlayer"));

	struct
	{
		int                            ControllerId;
	} params;

	params.ControllerId = ControllerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.StartPlay
// (Native, Public, BlueprintCallable)

void AGameMode::StartPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.StartPlay"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.StartMatch
// (Native, Public, BlueprintCallable)

void AGameMode::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.StartMatch"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.SpawnDefaultPawnFor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AGameMode::SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.SpawnDefaultPawnFor"));

	struct
	{
		class AController*             NewPlayer;
		class AActor*                  StartSpot;
		class APawn*                   ReturnValue;
	} params;

	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ShouldReset
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  ActorToReset                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ShouldReset(class AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ShouldReset"));

	struct
	{
		class AActor*                  ActorToReset;
		bool                           ReturnValue;
	} params;

	params.ActorToReset = ActorToReset;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.SetBandwidthLimit
// (Exec, Native, Public)
// Parameters:
// float                          AsyncIOBandwidthLimit          (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.SetBandwidthLimit"));

	struct
	{
		float                          AsyncIOBandwidthLimit;
	} params;

	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ReturnToMainMenuHost
// (Native, Public, BlueprintCallable)

void AGameMode::ReturnToMainMenuHost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReturnToMainMenuHost"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.RestartGame
// (Native, Public, BlueprintCallable)

void AGameMode::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.RestartGame"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ResetLevel
// (Native, Public, BlueprintCallable)

void AGameMode::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ResetLevel"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ReadyToStartMatch
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ReadyToStartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToStartMatch"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ReadyToEndMatch
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ReadyToEndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToEndMatch"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.PlayerCanRestart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::PlayerCanRestart(class APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.PlayerCanRestart"));

	struct
	{
		class APlayerController*       Player;
		bool                           ReturnValue;
	} params;

	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.MustSpectate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class APlayerController*       NewPlayerController            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::MustSpectate(class APlayerController* NewPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.MustSpectate"));

	struct
	{
		class APlayerController*       NewPlayerController;
		bool                           ReturnValue;
	} params;

	params.NewPlayerController = NewPlayerController;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_PostLogin"));

	struct
	{
		class APlayerController*       NewPlayer;
	} params;

	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnSwapPlayerControllers
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       OldPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       NewPC                          (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnSwapPlayerControllers"));

	struct
	{
		class APlayerController*       OldPC;
		class APlayerController*       NewPC;
	} params;

	params.OldPC = OldPC;
	params.NewPC = NewPC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnSetMatchState
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FName                   NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnSetMatchState(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnSetMatchState"));

	struct
	{
		struct FName                   NewState;
	} params;

	params.NewState = NewState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnRestartPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnRestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnRestartPlayer"));

	struct
	{
		class AController*             NewPlayer;
	} params;

	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*             ExitingController              (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnLogout(class AController* ExitingController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnLogout"));

	struct
	{
		class AController*             ExitingController;
	} params;

	params.ExitingController = ExitingController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnChangeName
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*             Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewName                        (Parm, ZeroConstructor)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnChangeName"));

	struct
	{
		class AController*             Other;
		class FString                  NewName;
		bool                           bNameChange;
	} params;

	params.Other = Other;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_FindPlayerStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AGameMode::K2_FindPlayerStart(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_FindPlayerStart"));

	struct
	{
		class AController*             Player;
		class AActor*                  ReturnValue;
	} params;

	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.IsMatchInProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::IsMatchInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.IsMatchInProgress"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.InitStartSpot
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  StartSpot                      (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::InitStartSpot(class AActor* StartSpot, class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.InitStartSpot"));

	struct
	{
		class AActor*                  StartSpot;
		class AController*             NewPlayer;
	} params;

	params.StartSpot = StartSpot;
	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.HasMatchStarted
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::HasMatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.HasMatchStarted"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.HasMatchEnded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::HasMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.HasMatchEnded"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetNumPlayers
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AGameMode::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetNumPlayers"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetMatchState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AGameMode::GetMatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetMatchState"));

	struct
	{
		struct FName                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetDefaultPawnClassForController
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*             InController                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* AGameMode::GetDefaultPawnClassForController(class AController* InController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetDefaultPawnClassForController"));

	struct
	{
		class AController*             InController;
		class UClass*                  ReturnValue;
	} params;

	params.InController = InController;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.FindPlayerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  IncomingName                   (Parm, ZeroConstructor)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AGameMode::FindPlayerStart(class AController* Player, const class FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.FindPlayerStart"));

	struct
	{
		class AController*             Player;
		class FString                  IncomingName;
		class AActor*                  ReturnValue;
	} params;

	params.Player = Player;
	params.IncomingName = IncomingName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.EndMatch
// (Native, Public, BlueprintCallable)

void AGameMode::EndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.EndMatch"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ChoosePlayerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AGameMode::ChoosePlayerStart(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ChoosePlayerStart"));

	struct
	{
		class AController*             Player;
		class AActor*                  ReturnValue;
	} params;

	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ChangeName
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewName                        (Parm, ZeroConstructor)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ChangeName"));

	struct
	{
		class AController*             Controller;
		class FString                  NewName;
		bool                           bNameChange;
	} params;

	params.Controller = Controller;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.CanSpectate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*       Viewer                         (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerState*            ViewTarget                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.CanSpectate"));

	struct
	{
		class APlayerController*       Viewer;
		class APlayerState*            ViewTarget;
		bool                           ReturnValue;
	} params;

	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.AbortMatch
// (Native, Public, BlueprintCallable)

void AGameMode::AbortMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.AbortMatch"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeRigidBody"));

	struct
	{
		struct FName                   BoneName;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.WakeAllRigidBodies
// (Native, Public, BlueprintCallable)

void UPrimitiveComponent::WakeAllRigidBodies()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeAllRigidBodies"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FWalkableSlopeOverride  NewOverride                    (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimitiveComponent::SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride"));

	struct
	{
		struct FWalkableSlopeOverride  NewOverride;
	} params;

	params.NewOverride = NewOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewTranslucentSortPriority     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetTranslucentSortPriority"));

	struct
	{
		int                            NewTranslucentSortPriority;
	} params;

	params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetSimulatePhysics
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSimulate                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetSimulatePhysics"));

	struct
	{
		bool                           bSimulate;
	} params;

	params.bSimulate = bSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetRenderInMainPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetRenderInMainPass(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderInMainPass"));

	struct
	{
		bool                           bValue;
	} params;

	params.bValue = bValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetRenderCustomDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetRenderCustomDepth(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderCustomDepth"));

	struct
	{
		bool                           bValue;
	} params;

	params.bValue = bValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysMaterialOverride"));

	struct
	{
		class UPhysicalMaterial*       NewPhysMaterial;
	} params;

	params.NewPhysMaterial = NewPhysMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity"));

	struct
	{
		float                          NewMaxAngVel;
		bool                           bAddToCurrent;
		struct FName                   BoneName;
	} params;

	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity"));

	struct
	{
		struct FVector                 NewVel;
		bool                           bAddToCurrent;
		struct FName                   BoneName;
	} params;

	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity"));

	struct
	{
		struct FVector                 NewAngVel;
		bool                           bAddToCurrent;
		struct FName                   BoneName;
	} params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOwnerNoSee"));

	struct
	{
		bool                           bNewOwnerNoSee;
	} params;

	params.bNewOwnerNoSee = bNewOwnerNoSee;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOnlyOwnerSee"));

	struct
	{
		bool                           bNewOnlyOwnerSee;
	} params;

	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision"));

	struct
	{
		bool                           bNewNotifyRigidBodyCollision;
	} params;

	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMaterial"));

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      Material;
	} params;

	params.ElementIndex = ElementIndex;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMassScale
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMassScale(const struct FName& BoneName, float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassScale"));

	struct
	{
		struct FName                   BoneName;
		float                          InMassScale;
	} params;

	params.BoneName = BoneName;
	params.InMassScale = InMassScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMassOverrideInKg
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MassInKg                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMass                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassOverrideInKg"));

	struct
	{
		struct FName                   BoneName;
		float                          MassInKg;
		bool                           bOverrideMass;
	} params;

	params.BoneName = BoneName;
	params.MassInKg = MassInKg;
	params.bOverrideMass = bOverrideMass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetLockedAxis
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EDOFMode>          LockedAxis                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLockedAxis"));

	struct
	{
		TEnumAsByte<EDOFMode>          LockedAxis;
	} params;

	params.LockedAxis = LockedAxis;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetLinearDamping
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetLinearDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLinearDamping"));

	struct
	{
		float                          InDamping;
	} params;

	params.InDamping = InDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetGenerateOverlapEvents(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetGenerateOverlapEvents"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetEnableGravity
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bGravityEnabled                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetEnableGravity"));

	struct
	{
		bool                           bGravityEnabled;
	} params;

	params.bGravityEnabled = bGravityEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCustomDepthStencilValue(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue"));

	struct
	{
		int                            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCullDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewCullDistance                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCullDistance"));

	struct
	{
		float                          NewCullDistance;
	} params;

	params.NewCullDistance = NewCullDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetConstraintMode
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EDOFMode>          ConstraintMode                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetConstraintMode"));

	struct
	{
		TEnumAsByte<EDOFMode>          ConstraintMode;
	} params;

	params.ConstraintMode = ConstraintMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel"));

	struct
	{
		TEnumAsByte<ECollisionChannel> Channel;
		TEnumAsByte<ECollisionResponse> NewResponse;
	} params;

	params.Channel = Channel;
	params.NewResponse = NewResponse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels"));

	struct
	{
		TEnumAsByte<ECollisionResponse> NewResponse;
	} params;

	params.NewResponse = NewResponse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionProfileName
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InCollisionProfileName         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionProfileName(const struct FName& InCollisionProfileName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionProfileName"));

	struct
	{
		struct FName                   InCollisionProfileName;
	} params;

	params.InCollisionProfileName = InCollisionProfileName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionObjectType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionObjectType"));

	struct
	{
		TEnumAsByte<ECollisionChannel> Channel;
	} params;

	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionEnabled> NewType                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionEnabled"));

	struct
	{
		TEnumAsByte<ECollisionEnabled> NewType;
	} params;

	params.NewType = NewType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCenterOfMass
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CenterOfMassOffset             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCenterOfMass"));

	struct
	{
		struct FVector                 CenterOfMassOffset;
		struct FName                   BoneName;
	} params;

	params.CenterOfMassOffset = CenterOfMassOffset;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCastShadow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewCastShadow                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCastShadow(bool NewCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCastShadow"));

	struct
	{
		bool                           NewCastShadow;
	} params;

	params.NewCastShadow = NewCastShadow;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAngularDamping
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAngularDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAngularDamping"));

	struct
	{
		float                          InDamping;
	} params;

	params.InDamping = InDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity"));

	struct
	{
		struct FVector                 NewVel;
		bool                           bAddToCurrent;
	} params;

	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAllMassScale
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAllMassScale(float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllMassScale"));

	struct
	{
		float                          InMassScale;
	} params;

	params.InMassScale = InMassScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 InputVector                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia"));

	struct
	{
		struct FVector                 InputVector;
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.InputVector = InputVector;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.PutRigidBodyToSleep"));

	struct
	{
		struct FName                   BoneName;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.K2_LineTraceComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_LineTraceComponent"));

	struct
	{
		struct FVector                 TraceStart;
		struct FVector                 TraceEnd;
		bool                           bTraceComplex;
		bool                           bShowTrace;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
		struct FName                   BoneName;
		bool                           ReturnValue;
	} params;

	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;

	UObject::ProcessEvent(fn, &params);

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*     OtherComp                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsOverlappingComponent(class UPrimitiveComponent* OtherComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingComponent"));

	struct
	{
		class UPrimitiveComponent*     OtherComp;
		bool                           ReturnValue;
	} params;

	params.OtherComp = OtherComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingActor"));

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;

	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsGravityEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsGravityEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsGravityEnabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldIgnore                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving"));

	struct
	{
		class AActor*                  Actor;
		bool                           bShouldIgnore;
	} params;

	params.Actor = Actor;
	params.bShouldIgnore = bShouldIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FWalkableSlopeOverride  ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride"));

	struct
	{
		struct FWalkableSlopeOverride  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint"));

	struct
	{
		struct FVector                 Point;
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.Point = Point;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetOverlappingComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UPrimitiveComponent*> InOverlappingComponents        (Parm, OutParm, ZeroConstructor)

void UPrimitiveComponent::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingComponents"));

	struct
	{
		TArray<class UPrimitiveComponent*> InOverlappingComponents;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (InOverlappingComponents != nullptr)
		*InOverlappingComponents = params.InOverlappingComponents;
}


// Function Engine.PrimitiveComponent.GetOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingActors"));

	struct
	{
		TArray<class AActor*>          OverlappingActors;
		class UClass*                  ClassFilter;
	} params;

	params.ClassFilter = ClassFilter;

	UObject::ProcessEvent(fn, &params);

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.PrimitiveComponent.GetOverlapInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FOverlapInfo>    ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<struct FOverlapInfo> UPrimitiveComponent::GetOverlapInfos()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlapInfos"));

	struct
	{
		TArray<struct FOverlapInfo>    ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetNumMaterials
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimitiveComponent::GetNumMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetNumMaterials"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMaterial"));

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      ReturnValue;
	} params;

	params.ElementIndex = ElementIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMassScale
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetMassScale(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMassScale"));

	struct
	{
		struct FName                   BoneName;
		float                          ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetMass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMass"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetLinearDamping
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetLinearDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetLinearDamping"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetInertiaTensor
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetInertiaTensor(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetInertiaTensor"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionResponse> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ECollisionResponse> UPrimitiveComponent::GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel"));

	struct
	{
		TEnumAsByte<ECollisionChannel> Channel;
		TEnumAsByte<ECollisionResponse> ReturnValue;
	} params;

	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionProfileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UPrimitiveComponent::GetCollisionProfileName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionProfileName"));

	struct
	{
		struct FName                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionObjectType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ECollisionChannel> UPrimitiveComponent::GetCollisionObjectType()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionObjectType"));

	struct
	{
		TEnumAsByte<ECollisionChannel> ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetClosestPointOnCollision
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 OutPointOnBody                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetClosestPointOnCollision"));

	struct
	{
		struct FVector                 Point;
		struct FVector                 OutPointOnBody;
		struct FName                   BoneName;
		float                          ReturnValue;
	} params;

	params.Point = Point;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	if (OutPointOnBody != nullptr)
		*OutPointOnBody = params.OutPointOnBody;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCenterOfMass
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetCenterOfMass(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCenterOfMass"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetAngularDamping
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetAngularDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetAngularDamping"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance"));

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      SourceMaterial;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.ElementIndex = ElementIndex;
	params.SourceMaterial = SourceMaterial;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial"));

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      Parent;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.ElementIndex = ElementIndex;
	params.Parent = Parent;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic"));

	struct
	{
		int                            ElementIndex;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.ElementIndex = ElementIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors"));

	struct
	{
		TArray<class AActor*>          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InSlack                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::ClearMoveIgnoreActors(int InSlack)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors"));

	struct
	{
		int                            InSlack;
	} params;

	params.InSlack = InSlack;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.CanCharacterStepUp
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::CanCharacterStepUp(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CanCharacterStepUp"));

	struct
	{
		class APawn*                   Pawn;
		bool                           ReturnValue;
	} params;

	params.Pawn = Pawn;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.AddTorque
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Torque                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddTorque"));

	struct
	{
		struct FVector                 Torque;
		struct FName                   BoneName;
		bool                           bAccelChange;
	} params;

	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialImpulse"));

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          Strength;
		TEnumAsByte<ERadialImpulseFalloff> Falloff;
		bool                           bVelChange;
	} params;

	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddRadialForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialForce"));

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          Strength;
		TEnumAsByte<ERadialImpulseFalloff> Falloff;
		bool                           bAccelChange;
	} params;

	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddImpulseAtLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulseAtLocation"));

	struct
	{
		struct FVector                 Impulse;
		struct FVector                 Location;
		struct FName                   BoneName;
	} params;

	params.Impulse = Impulse;
	params.Location = Location;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulse"));

	struct
	{
		struct FVector                 Impulse;
		struct FName                   BoneName;
		bool                           bVelChange;
	} params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddForceAtLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForceAtLocation"));

	struct
	{
		struct FVector                 Force;
		struct FVector                 Location;
		struct FName                   BoneName;
	} params;

	params.Force = Force;
	params.Location = Location;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForce"));

	struct
	{
		struct FVector                 Force;
		struct FName                   BoneName;
		bool                           bAccelChange;
	} params;

	params.Force = Force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddAngularImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddAngularImpulse"));

	struct
	{
		struct FVector                 Impulse;
		struct FName                   BoneName;
		bool                           bVelChange;
	} params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_SpectatorClass
// (Native, Public)

void AGameState::OnRep_SpectatorClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_SpectatorClass"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_ReplicatedWorldTimeSeconds
// (Native, Protected)

void AGameState::OnRep_ReplicatedWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_ReplicatedWorldTimeSeconds"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_MatchState
// (Native, Public)

void AGameState::OnRep_MatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_MatchState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_GameModeClass
// (Native, Public)

void AGameState::OnRep_GameModeClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_GameModeClass"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_ElapsedTime
// (Native, Public)

void AGameState::OnRep_ElapsedTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_ElapsedTime"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.GetServerWorldTimeSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameState::GetServerWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.GetServerWorldTimeSeconds"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SSSwapControllers
// (Exec, Native, Public)

void UGameViewportClient::SSSwapControllers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SSSwapControllers"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameViewportClient.ShowTitleSafeArea
// (Exec, Native, Public)

void UGameViewportClient::ShowTitleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.ShowTitleSafeArea"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameViewportClient.SetConsoleTarget
// (Exec, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SetConsoleTarget"));

	struct
	{
		int                            PlayerIndex;
	} params;

	params.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// class UCameraShake*            ShakeInstance                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopCameraShake(class UCameraShake* ShakeInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraShake"));

	struct
	{
		class UCameraShake*            ShakeInstance;
	} params;

	params.ShakeInstance = ShakeInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopCameraFade
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::StopCameraFade()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraFade"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopCameraAnimInst
// (Native, Public, BlueprintCallable)
// Parameters:
// class UCameraAnimInst*         AnimInst                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraAnimInst"));

	struct
	{
		class UCameraAnimInst*         AnimInst;
		bool                           bImmediate;
	} params;

	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllInstancesOfCameraShake(class UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake"));

	struct
	{
		class UClass*                  Shake;
	} params;

	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
// (Native, Public, BlueprintCallable)
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim"));

	struct
	{
		class UCameraAnim*             Anim;
		bool                           bImmediate;
	} params;

	params.Anim = Anim;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllCameraShakes
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::StopAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraShakes"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllCameraAnims
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraAnims"));

	struct
	{
		bool                           bImmediate;
	} params;

	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StartCameraFade
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          FromAlpha                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ToAlpha                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldFadeAudio               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHoldWhenFinished              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartCameraFade"));

	struct
	{
		float                          FromAlpha;
		float                          ToAlpha;
		float                          Duration;
		struct FLinearColor            Color;
		bool                           bShouldFadeAudio;
		bool                           bHoldWhenFinished;
	} params;

	params.FromAlpha = FromAlpha;
	params.ToAlpha = ToAlpha;
	params.Duration = Duration;
	params.Color = Color;
	params.bShouldFadeAudio = bShouldFadeAudio;
	params.bHoldWhenFinished = bHoldWhenFinished;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.SetManualCameraFade
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          InFadeAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInFadeAudio                   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.SetManualCameraFade"));

	struct
	{
		float                          InFadeAmount;
		struct FLinearColor            Color;
		bool                           bInFadeAudio;
	} params;

	params.InFadeAmount = InFadeAmount;
	params.Color = Color;
	params.bInFadeAudio = bInFadeAudio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.RemoveCameraModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// class UCameraModifier*         ModifierToRemove               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::RemoveCameraModifier(class UCameraModifier* ModifierToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraModifier"));

	struct
	{
		class UCameraModifier*         ModifierToRemove;
		bool                           ReturnValue;
	} params;

	params.ModifierToRemove = ModifierToRemove;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// class AEmitterCameraLensEffectBase* Emitter                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraLensEffect"));

	struct
	{
		class AEmitterCameraLensEffectBase* Emitter;
	} params;

	params.Emitter = Emitter;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.PlayCameraShake
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// class UCameraShake*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraShake* APlayerCameraManager::PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PlayCameraShake"));

	struct
	{
		class UClass*                  ShakeClass;
		float                          Scale;
		TEnumAsByte<ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
		class UCameraShake*            ReturnValue;
	} params;

	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.PlayCameraAnim
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             BlendInCurve                   (Parm, ZeroConstructor, IsPlainOldData)
// class UCameraAnimInst*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot, class UCurveFloat* BlendInCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PlayCameraAnim"));

	struct
	{
		class UCameraAnim*             Anim;
		float                          Rate;
		float                          Scale;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLoop;
		bool                           bRandomStartTime;
		float                          Duration;
		TEnumAsByte<ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
		class UCurveFloat*             BlendInCurve;
		class UCameraAnimInst*         ReturnValue;
	} params;

	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;
	params.BlendInCurve = BlendInCurve;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.IsScreenFullyOccluded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::IsScreenFullyOccluded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.IsScreenFullyOccluded"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.IsFadeInProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::IsFadeInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.IsFadeInProgress"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetOwningPlayerController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* APlayerCameraManager::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetOwningPlayerController"));

	struct
	{
		class APlayerController*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetFOVAngle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerCameraManager::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetFOVAngle"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APlayerCameraManager::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APlayerCameraManager::GetCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.FindCameraModifierByClass
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class UCameraModifier*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraModifier* APlayerCameraManager::FindCameraModifierByClass(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.FindCameraModifierByClass"));

	struct
	{
		class UClass*                  ModifierClass;
		class UCameraModifier*         ReturnValue;
	} params;

	params.ModifierClass = ModifierClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.ClearCameraLensEffects
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.ClearCameraLensEffects"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
// (BlueprintCosmetic, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CameraTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewCameraLocation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewCameraRotation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NewCameraFOV                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.BlueprintUpdateCamera"));

	struct
	{
		class AActor*                  CameraTarget;
		struct FVector                 NewCameraLocation;
		struct FRotator                NewCameraRotation;
		float                          NewCameraFOV;
		bool                           ReturnValue;
	} params;

	params.CameraTarget = CameraTarget;

	UObject::ProcessEvent(fn, &params);

	if (NewCameraLocation != nullptr)
		*NewCameraLocation = params.NewCameraLocation;
	if (NewCameraRotation != nullptr)
		*NewCameraRotation = params.NewCameraRotation;
	if (NewCameraFOV != nullptr)
		*NewCameraFOV = params.NewCameraFOV;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.BlendOutAllInstancesOfCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::BlendOutAllInstancesOfCameraShake(class UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.BlendOutAllInstancesOfCameraShake"));

	struct
	{
		class UClass*                  Shake;
	} params;

	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.AddNewCameraModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class UCameraModifier*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraModifier* APlayerCameraManager::AddNewCameraModifier(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddNewCameraModifier"));

	struct
	{
		class UClass*                  ModifierClass;
		class UCameraModifier*         ReturnValue;
	} params;

	params.ModifierClass = ModifierClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.AddCameraLensEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)
// class AEmitterCameraLensEffectBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddCameraLensEffect"));

	struct
	{
		class UClass*                  LensEffectEmitterClass;
		class AEmitterCameraLensEffectBase* ReturnValue;
	} params;

	params.LensEffectEmitterClass = LensEffectEmitterClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerState.OnRep_UniqueId
// (Native, Public)

void APlayerState::OnRep_UniqueId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_UniqueId"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerState.OnRep_PlayerName
// (Native, Public)

void APlayerState::OnRep_PlayerName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_PlayerName"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.UnPossess
// (Native, Public, BlueprintCallable)

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.UnPossess"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.StopMovement
// (Native, Public, BlueprintCallable)

void AController::StopMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.StopMovement"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.SetInitialLocationAndRotation
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetInitialLocationAndRotation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.SetControlRotation
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetControlRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetControlRotation"));

	struct
	{
		struct FRotator                NewRotation;
	} params;

	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.ReceiveInstigatedAnyDamage
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ReceiveInstigatedAnyDamage"));

	struct
	{
		float                          Damage;
		class UDamageType*             DamageType;
		class AActor*                  DamagedActor;
		class AActor*                  DamageCauser;
	} params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.Possess
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                   InPawn                         (Parm, ZeroConstructor, IsPlainOldData)

void AController::Possess(class APawn* InPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.Possess"));

	struct
	{
		class APawn*                   InPawn;
	} params;

	params.InPawn = InPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.OnRep_PlayerState
// (Native, Public)

void AController::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_PlayerState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.OnRep_Pawn
// (Native, Public)

void AController::OnRep_Pawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_Pawn"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.LineOfSightTo
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ViewPoint                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlternateChecks               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.LineOfSightTo"));

	struct
	{
		class AActor*                  Other;
		struct FVector                 ViewPoint;
		bool                           bAlternateChecks;
		bool                           ReturnValue;
	} params;

	params.Other = Other;
	params.ViewPoint = ViewPoint;
	params.bAlternateChecks = bAlternateChecks;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.K2_GetPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AController::K2_GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.K2_GetPawn"));

	struct
	{
		class APawn*                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalPlayerController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalPlayerController"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalController"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetViewTarget"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetDesiredRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AController::GetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetDesiredRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetControlRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AController::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetControlRotation"));

	struct
	{
		struct FRotator                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.ClientSetRotation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetCamera                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetRotation"));

	struct
	{
		struct FRotator                NewRotation;
		bool                           bResetCamera;
	} params;

	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.ClientSetLocation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetLocation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.CastToPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AController::CastToPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.CastToPlayerController"));

	struct
	{
		class APlayerController*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustReleased
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustReleased"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustPressed"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.ToggleSpeaking
// (Exec, Native, Public)
// Parameters:
// bool                           bInSpeaking                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ToggleSpeaking(bool bInSpeaking)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ToggleSpeaking"));

	struct
	{
		bool                           bInSpeaking;
	} params;

	params.bInSpeaking = bInSpeaking;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SwitchLevel
// (Exec, Native, Public)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void APlayerController::SwitchLevel(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SwitchLevel"));

	struct
	{
		class FString                  URL;
	} params;

	params.URL = URL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.StopHapticEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::StopHapticEffect(TEnumAsByte<EControllerHand> Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StopHapticEffect"));

	struct
	{
		TEnumAsByte<EControllerHand>   Hand;
	} params;

	params.Hand = Hand;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.StartFire
// (Exec, Native, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StartFire"));

	struct
	{
		unsigned char                  FireModeNum;
	} params;

	params.FireModeNum = FireModeNum;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetVirtualJoystickVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetVirtualJoystickVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetVirtualJoystickVisibility"));

	struct
	{
		bool                           bVisible;
	} params;

	params.bVisible = bVisible;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetViewTargetWithBlend
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewViewTarget                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetViewTargetWithBlend"));

	struct
	{
		class AActor*                  NewViewTarget;
		float                          BlendTime;
		TEnumAsByte<EViewTargetBlendFunction> BlendFunc;
		float                          BlendExp;
		bool                           bLockOutgoing;
	} params;

	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetName
// (Exec, Native, Public)
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void APlayerController::SetName(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetName"));

	struct
	{
		class FString                  S;
	} params;

	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetIgnoreMoveInput
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewMoveInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetIgnoreMoveInput"));

	struct
	{
		bool                           bNewMoveInput;
	} params;

	params.bNewMoveInput = bNewMoveInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetIgnoreLookInput
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLookInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetIgnoreLookInput"));

	struct
	{
		bool                           bNewLookInput;
	} params;

	params.bNewLookInput = bNewLookInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetHapticsByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Frequency                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Amplitude                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<EControllerHand> Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetHapticsByValue"));

	struct
	{
		float                          Frequency;
		float                          Amplitude;
		TEnumAsByte<EControllerHand>   Hand;
	} params;

	params.Frequency = Frequency;
	params.Amplitude = Amplitude;
	params.Hand = Hand;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetCinematicMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetCinematicMode"));

	struct
	{
		bool                           bInCinematicMode;
		bool                           bHidePlayer;
		bool                           bAffectsHUD;
		bool                           bAffectsMovement;
		bool                           bAffectsTurning;
	} params;

	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetAudioListenerOverride
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetAudioListenerOverride"));

	struct
	{
		class USceneComponent*         AttachToComponent;
		struct FVector                 Location;
		struct FRotator                Rotation;
	} params;

	params.AttachToComponent = AttachToComponent;
	params.Location = Location;
	params.Rotation = Rotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewSelf
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FViewTargetTransitionParams TransitionParams               (Parm)

void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewSelf"));

	struct
	{
		struct FViewTargetTransitionParams TransitionParams;
	} params;

	params.TransitionParams = TransitionParams;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewPrevPlayer
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewPrevPlayer"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewNextPlayer
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewNextPlayer"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerVerifyViewTarget"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerUpdateCamera
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FVector_NetQuantize     CamLoc                         (Parm)
// int                            CamPitchAndYaw                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUpdateCamera"));

	struct
	{
		struct FVector_NetQuantize     CamLoc;
		int                            CamPitchAndYaw;
	} params;

	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerUnmutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUnmutePlayer"));

	struct
	{
		struct FUniqueNetIdRepl        PlayerId;
	} params;

	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerToggleAILogging
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerToggleAILogging"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerShortTimeout
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerShortTimeout"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerSetSpectatorWaiting
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorWaiting"));

	struct
	{
		bool                           bWaiting;
	} params;

	params.bWaiting = bWaiting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// (Net, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRot                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorLocation"));

	struct
	{
		struct FVector                 NewLoc;
		struct FRotator                NewRot;
	} params;

	params.NewLoc = NewLoc;
	params.NewRot = NewRot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerRestartPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerRestartPlayer"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerPause
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerPause"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// (Final, Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FName                   WorldPackageName               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerNotifyLoadedWorld"));

	struct
	{
		struct FName                   WorldPackageName;
	} params;

	params.WorldPackageName = WorldPackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerMutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerMutePlayer"));

	struct
	{
		struct FUniqueNetIdRepl        PlayerId;
	} params;

	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCheckClientPossessionReliable
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerCheckClientPossessionReliable()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossessionReliable"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCheckClientPossession
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerCheckClientPossession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossession"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerChangeName
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void APlayerController::ServerChangeName(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerChangeName"));

	struct
	{
		class FString                  S;
	} params;

	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCamera
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCamera"));

	struct
	{
		struct FName                   NewMode;
	} params;

	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class APawn*                   P                              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerAcknowledgePossession"));

	struct
	{
		class APawn*                   P;
	} params;

	params.P = P;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SendToConsole
// (Exec, Native, Public)
// Parameters:
// class FString                  Command                        (Parm, ZeroConstructor)

void APlayerController::SendToConsole(const class FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SendToConsole"));

	struct
	{
		class FString                  Command;
	} params;

	params.Command = Command;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.RestartLevel
// (Exec, Native, Public)

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.RestartLevel"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreMoveInput
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreMoveInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreMoveInput"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreLookInput
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreLookInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreLookInput"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreInputFlags
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreInputFlags()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreInputFlags"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ProjectWorldLocationToScreen
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ProjectWorldLocationToScreen"));

	struct
	{
		struct FVector                 WorldLocation;
		struct FVector2D               ScreenLocation;
		bool                           ReturnValue;
	} params;

	params.WorldLocation = WorldLocation;

	UObject::ProcessEvent(fn, &params);

	if (ScreenLocation != nullptr)
		*ScreenLocation = params.ScreenLocation;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayHapticEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHapticFeedbackEffect*   HapticEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::PlayHapticEffect(class UHapticFeedbackEffect* HapticEffect, TEnumAsByte<EControllerHand> Hand, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayHapticEffect"));

	struct
	{
		class UHapticFeedbackEffect*   HapticEffect;
		TEnumAsByte<EControllerHand>   Hand;
		float                          Scale;
	} params;

	params.HapticEffect = HapticEffect;
	params.Hand = Hand;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.PlayDynamicForceFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftLarge              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftSmall              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightLarge             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightSmall             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDynamicForceFeedbackAction> Action                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayDynamicForceFeedback"));

	struct
	{
		float                          Intensity;
		float                          Duration;
		bool                           bAffectsLeftLarge;
		bool                           bAffectsLeftSmall;
		bool                           bAffectsRightLarge;
		bool                           bAffectsRightSmall;
		TEnumAsByte<EDynamicForceFeedbackAction> Action;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.Intensity = Intensity;
	params.Duration = Duration;
	params.bAffectsLeftLarge = bAffectsLeftLarge;
	params.bAffectsLeftSmall = bAffectsLeftSmall;
	params.bAffectsRightLarge = bAffectsRightLarge;
	params.bAffectsRightSmall = bAffectsRightSmall;
	params.Action = Action;
	params.LatentInfo = LatentInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.Pause
// (Exec, Native, Public)

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Pause"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.OnServerStartedVisualLogger
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIsLogging                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::OnServerStartedVisualLogger(bool bIsLogging)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.OnServerStartedVisualLogger"));

	struct
	{
		bool                           bIsLogging;
	} params;

	params.bIsLogging = bIsLogging;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.LocalTravel
// (Exec, Native, Public)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void APlayerController::LocalTravel(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.LocalTravel"));

	struct
	{
		class FString                  URL;
	} params;

	params.URL = URL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.IsSeamlessTravelInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsSeamlessTravelInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsSeamlessTravelInProgress"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPossessingServerAcknowledgedPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsPossessingServerAcknowledgedPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsPossessingServerAcknowledgedPawn"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsMoveInputIgnored"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsLookInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsLookInputIgnored"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsInputKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsInputKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsInputKeyDown"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetViewportSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            SizeX                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetViewportSize(int* SizeX, int* SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetViewportSize"));

	struct
	{
		int                            SizeX;
		int                            SizeY;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;
}


// Function Engine.PlayerController.GetSpectatorPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASpectatorPawn*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASpectatorPawn* APlayerController::GetSpectatorPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetSpectatorPawn"));

	struct
	{
		class ASpectatorPawn*          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetMousePosition
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetMousePosition(float* LocationX, float* LocationY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetMousePosition"));

	struct
	{
		float                          LocationX;
		float                          LocationY;
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputVectorKeyState
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APlayerController::GetInputVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputVectorKeyState"));

	struct
	{
		struct FKey                    Key;
		struct FVector                 ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputTouchState
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputTouchState"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
		float                          LocationX;
		float                          LocationY;
		bool                           bIsCurrentlyPressed;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.PlayerController.GetInputMouseDelta
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMouseDelta"));

	struct
	{
		float                          DeltaX;
		float                          DeltaY;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.PlayerController.GetInputMotionState
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Tilt                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RotationRate                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Gravity                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Acceleration                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMotionState"));

	struct
	{
		struct FVector                 Tilt;
		struct FVector                 RotationRate;
		struct FVector                 Gravity;
		struct FVector                 Acceleration;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (Tilt != nullptr)
		*Tilt = params.Tilt;
	if (RotationRate != nullptr)
		*RotationRate = params.RotationRate;
	if (Gravity != nullptr)
		*Gravity = params.Gravity;
	if (Acceleration != nullptr)
		*Acceleration = params.Acceleration;
}


// Function Engine.PlayerController.GetInputKeyTimeDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputKeyTimeDown"));

	struct
	{
		struct FKey                    Key;
		float                          ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputAnalogStickState
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogStickState"));

	struct
	{
		TEnumAsByte<EControllerAnalogStick> WhichStick;
		float                          StickX;
		float                          StickY;
	} params;

	params.WhichStick = WhichStick;

	UObject::ProcessEvent(fn, &params);

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.PlayerController.GetInputAnalogKeyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogKeyState"));

	struct
	{
		struct FKey                    Key;
		float                          ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHUD
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHUD*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AHUD* APlayerController::GetHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHUD"));

	struct
	{
		class AHUD*                    ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerForObjects"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.FingerIndex = FingerIndex;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerByChannel"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFinger
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFinger"));

	struct
	{
		TEnumAsByte<ETouchIndex>       FingerIndex;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorForObjects"));

	struct
	{
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorByChannel"));

	struct
	{
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursor
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursor"));

	struct
	{
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		struct FHitResult              HitResult;
		bool                           ReturnValue;
	} params;

	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFocalLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APlayerController::GetFocalLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetFocalLocation"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.FOV
// (Exec, Native, Public)
// Parameters:
// float                          NewFOV                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::FOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.FOV"));

	struct
	{
		float                          NewFOV;
	} params;

	params.NewFOV = NewFOV;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.EnableCheats
// (Exec, Native, Public)

void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.EnableCheats"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.DeprojectScreenPositionToWorld
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectScreenPositionToWorld"));

	struct
	{
		float                          ScreenX;
		float                          ScreenY;
		struct FVector                 WorldLocation;
		struct FVector                 WorldDirection;
		bool                           ReturnValue;
	} params;

	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	UObject::ProcessEvent(fn, &params);

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DeprojectMousePositionToWorld
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectMousePositionToWorld"));

	struct
	{
		struct FVector                 WorldLocation;
		struct FVector                 WorldDirection;
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ConsoleKey
// (Exec, Native, Public)
// Parameters:
// struct FKey                    Key                            (Parm)

void APlayerController::ConsoleKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ConsoleKey"));

	struct
	{
		struct FKey                    Key;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientWasKicked
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FText                   KickReason                     (ConstParm, Parm, ReferenceParm)

void APlayerController::ClientWasKicked(const struct FText& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientWasKicked"));

	struct
	{
		struct FText                   KickReason;
	} params;

	params.KickReason = KickReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientVoiceHandshakeComplete"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatusBatched
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                  PackageBasePath                (Parm, ZeroConstructor)
// TArray<struct FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo (ConstParm, Parm, ZeroConstructor, ReferenceParm)

void APlayerController::ClientUpdateLevelStreamingStatusBatched(const class FString& PackageBasePath, TArray<struct FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateLevelStreamingStatusBatched"));

	struct
	{
		class FString                  PackageBasePath;
		TArray<struct FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo;
	} params;

	params.PackageBasePath = PackageBasePath;
	params.LevelStreamingStatusUpdateInfo = LevelStreamingStatusUpdateInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeLoaded             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeVisible            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBlockOnLoad          (Parm, ZeroConstructor, IsPlainOldData)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus"));

	struct
	{
		struct FName                   PackageName;
		bool                           bNewShouldBeLoaded;
		bool                           bNewShouldBeVisible;
		bool                           bNewShouldBlockOnLoad;
		int                            LODIndex;
	} params;

	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	params.LODIndex = LODIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUnmutePlayer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUnmutePlayer"));

	struct
	{
		struct FUniqueNetIdRepl        PlayerId;
	} params;

	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTravelInternal
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTravelInternal(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravelInternal"));

	struct
	{
		class FString                  URL;
		TEnumAsByte<ETravelType>       TravelType;
		bool                           bSeamless;
		struct FGuid                   MapPackageGuid;
	} params;

	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTravel
// (Final, Native, Public, HasDefaults)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTravel(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravel"));

	struct
	{
		class FString                  URL;
		TEnumAsByte<ETravelType>       TravelType;
		bool                           bSeamless;
		struct FGuid                   MapPackageGuid;
	} params;

	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTeamMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APlayerState*            SenderPlayerState              (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  S                              (Parm, ZeroConstructor)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTeamMessage"));

	struct
	{
		class APlayerState*            SenderPlayerState;
		class FString                  S;
		struct FName                   Type;
		float                          MsgLifeTime;
	} params;

	params.SenderPlayerState = SenderPlayerState;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopForceFeedback
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopForceFeedback"));

	struct
	{
		class UForceFeedbackEffect*    ForceFeedbackEffect;
		struct FName                   Tag;
	} params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopCameraShake
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraShake(class UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraShake"));

	struct
	{
		class UClass*                  Shake;
	} params;

	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopCameraAnim
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UCameraAnim*             AnimToStop                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraAnim"));

	struct
	{
		class UCameraAnim*             AnimToStop;
	} params;

	params.AnimToStop = AnimToStop;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStartOnlineSession
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientStartOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStartOnlineSession"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSpawnCameraLensEffect"));

	struct
	{
		class UClass*                  LensEffectEmitterClass;
	} params;

	params.LensEffectEmitterClass = LensEffectEmitterClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetViewTarget
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FViewTargetTransitionParams TransitionParams               (Parm)

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetViewTarget"));

	struct
	{
		class AActor*                  A;
		struct FViewTargetTransitionParams TransitionParams;
	} params;

	params.A = A;
	params.TransitionParams = TransitionParams;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetSpectatorWaiting
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetSpectatorWaiting"));

	struct
	{
		bool                           bWaiting;
	} params;

	params.bWaiting = bWaiting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetHUD
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UClass*                  NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetHUD(class UClass* NewHUDClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetHUD"));

	struct
	{
		class UClass*                  NewHUDClass;
	} params;

	params.NewHUDClass = NewHUDClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident"));

	struct
	{
		class UMaterialInterface*      Material;
		float                          ForceDuration;
		int                            CinematicTextureGroups;
	} params;

	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCinematicMode
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCinematicMode"));

	struct
	{
		bool                           bInCinematicMode;
		bool                           bAffectsMovement;
		bool                           bAffectsTurning;
		bool                           bAffectsHUD;
	} params;

	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCameraMode
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FName                   NewCamMode                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraMode"));

	struct
	{
		struct FName                   NewCamMode;
	} params;

	params.NewCamMode = NewCamMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCameraFade
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// bool                           bEnableFading                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  FadeColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               FadeAlpha                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFadeAudio                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraFade"));

	struct
	{
		bool                           bEnableFading;
		struct FColor                  FadeColor;
		struct FVector2D               FadeAlpha;
		float                          FadeTime;
		bool                           bFadeAudio;
	} params;

	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSeamlessTravelComplete
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientSeamlessTravelComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSeamlessTravelComplete"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReturnToMainMenu
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                  ReturnReason                   (Parm, ZeroConstructor)

void APlayerController::ClientReturnToMainMenu(const class FString& ReturnReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReturnToMainMenu"));

	struct
	{
		class FString                  ReturnReason;
	} params;

	params.ReturnReason = ReturnReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRetryClientRestart
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRetryClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRetryClientRestart"));

	struct
	{
		class APawn*                   NewPawn;
	} params;

	params.NewPawn = NewPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRestart
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRestart"));

	struct
	{
		class APawn*                   NewPawn;
	} params;

	params.NewPawn = NewPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReset
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReset"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRepObjRef
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRepObjRef(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRepObjRef"));

	struct
	{
		class UObject*                 Object;
	} params;

	params.Object = Object;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReceiveLocalizedMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                  Message                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Switch                         (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerState*            RelatedPlayerState_2           (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerState*            RelatedPlayerState_3           (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 OptionalObject                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReceiveLocalizedMessage"));

	struct
	{
		class UClass*                  Message;
		int                            Switch;
		class APlayerState*            RelatedPlayerState_2;
		class APlayerState*            RelatedPlayerState_3;
		class UObject*                 OptionalObject;
	} params;

	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPlayerState_2 = RelatedPlayerState_2;
	params.RelatedPlayerState_3 = RelatedPlayerState_3;
	params.OptionalObject = OptionalObject;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPrestreamTextures
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                  ForcedActor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableStreaming               (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrestreamTextures"));

	struct
	{
		class AActor*                  ForcedActor;
		float                          ForceDuration;
		bool                           bEnableStreaming;
		int                            CinematicTextureGroups;
	} params;

	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPrepareMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFirst                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLast                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrepareMapChange"));

	struct
	{
		struct FName                   LevelName;
		bool                           bFirst;
		bool                           bLast;
	} params;

	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlaySoundAtLocation
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySoundAtLocation"));

	struct
	{
		class USoundBase*              Sound;
		struct FVector                 Location;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
	} params;

	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlaySound
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySound"));

	struct
	{
		class USoundBase*              Sound;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
	} params;

	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayForceFeedback
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayForceFeedback"));

	struct
	{
		class UForceFeedbackEffect*    ForceFeedbackEffect;
		bool                           bLooping;
		struct FName                   Tag;
	} params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.bLooping = bLooping;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayCameraShake
// (Net, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayCameraShake"));

	struct
	{
		class UClass*                  Shake;
		float                          Scale;
		TEnumAsByte<ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
	} params;

	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayCameraAnim
// (Net, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UCameraAnim*             AnimToPlay                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> Space                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CustomPlaySpace                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayCameraAnim"));

	struct
	{
		class UCameraAnim*             AnimToPlay;
		float                          Scale;
		float                          Rate;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLoop;
		bool                           bRandomStartTime;
		TEnumAsByte<ECameraAnimPlaySpace> Space;
		struct FRotator                CustomPlaySpace;
	} params;

	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientMutePlayer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMutePlayer"));

	struct
	{
		struct FUniqueNetIdRepl        PlayerId;
	} params;

	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientMessage(const class FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMessage"));

	struct
	{
		class FString                  S;
		struct FName                   Type;
		float                          MsgLifeTime;
	} params;

	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreMoveInput"));

	struct
	{
		bool                           bIgnore;
	} params;

	params.bIgnore = bIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreLookInput"));

	struct
	{
		bool                           bIgnore;
	} params;

	params.bIgnore = bIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientGotoState
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FName                   NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGotoState(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGotoState"));

	struct
	{
		struct FName                   NewState;
	} params;

	params.NewState = NewState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientGameEnded
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                  EndGameFocus                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsWinner                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGameEnded"));

	struct
	{
		class AActor*                  EndGameFocus;
		bool                           bIsWinner;
	} params;

	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientForceGarbageCollection"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// (Final, Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientFlushLevelStreaming"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientEndOnlineSession
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientEndOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEndOnlineSession"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientEnableNetworkVoice
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientEnableNetworkVoice(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEnableNetworkVoice"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCommitMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCommitMapChange"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientClearCameraLensEffects
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void APlayerController::ClientClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientClearCameraLensEffects"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCapBandwidth
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int                            Cap                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCapBandwidth"));

	struct
	{
		int                            Cap;
	} params;

	params.Cap = Cap;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCancelPendingMapChange"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientBlendOutCameraShake
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientBlendOutCameraShake(class UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientBlendOutCameraShake"));

	struct
	{
		class UClass*                  Shake;
	} params;

	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// (Final, Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                 InLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideLocation              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientAddTextureStreamingLoc"));

	struct
	{
		struct FVector                 InLoc;
		float                          Duration;
		bool                           bOverrideLocation;
	} params;

	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClearAudioListenerOverride
// (Final, Native, Public, BlueprintCallable)

void APlayerController::ClearAudioListenerOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClearAudioListenerOverride"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.Camera
// (Exec, Native, Public)
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Camera"));

	struct
	{
		struct FName                   NewMode;
	} params;

	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddYawInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddYawInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddRollInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddRollInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddPitchInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddPitchInput"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ActivateTouchInterface
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTouchInterface*         NewTouchInterface              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ActivateTouchInterface(class UTouchInterface* NewTouchInterface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ActivateTouchInterface"));

	struct
	{
		class UTouchInterface*         NewTouchInterface;
	} params;

	params.NewTouchInterface = NewTouchInterface;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.WorldSettings.OnRep_WorldGravityZ
// (Native, Public)

void AWorldSettings::OnRep_WorldGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WorldSettings.OnRep_WorldGravityZ"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PostProcessComponent.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void UPostProcessComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessComponent.AddOrUpdateBlendable"));

	struct
	{
		TScriptInterface<class UBlendableInterface> InBlendableObject;
		float                          InWeight;
	} params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.ToggleDisplay
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::ToggleDisplay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ToggleDisplay"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// (Exec, Native, Public)

void ADebugCameraController::ShowDebugSelectedInfo()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ShowDebugSelectedInfo"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.IncreaseFOV
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::IncreaseFOV()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.IncreaseFOV"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.IncreaseCameraSpeed
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::IncreaseCameraSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.IncreaseCameraSpeed"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.DecreaseFOV
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::DecreaseFOV()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.DecreaseFOV"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.DecreaseCameraSpeed
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::DecreaseCameraSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.DecreaseCameraSpeed"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowHUD
// (Exec, Native, Public)

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowHUD"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebugToggleSubCategory
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   Category                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebugToggleSubCategory(const struct FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugToggleSubCategory"));

	struct
	{
		struct FName                   Category;
	} params;

	params.Category = Category;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebugForReticleTargetToggle
// (Final, Exec, Native, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebugForReticleTargetToggle(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugForReticleTargetToggle"));

	struct
	{
		class UClass*                  DesiredClass;
	} params;

	params.DesiredClass = DesiredClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebug
// (Exec, Native, Public)
// Parameters:
// struct FName                   DebugType                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebug"));

	struct
	{
		struct FName                   DebugType;
	} params;

	params.DebugType = DebugType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.RemoveDebugText
// (Final, Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLeaveDurationText             (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveDebugText"));

	struct
	{
		class AActor*                  SrcActor;
		bool                           bLeaveDurationText;
	} params;

	params.SrcActor = SrcActor;
	params.bLeaveDurationText = bLeaveDurationText;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.RemoveAllDebugStrings
// (Final, Net, NetReliable, Native, Event, Public, NetClient)

void AHUD::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveAllDebugStrings"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxRelease
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxRelease(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxRelease"));

	struct
	{
		struct FName                   BoxName;
	} params;

	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxEndCursorOver
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxEndCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxEndCursorOver"));

	struct
	{
		struct FName                   BoxName;
	} params;

	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxClick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxClick(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxClick"));

	struct
	{
		struct FName                   BoxName;
	} params;

	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxBeginCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxBeginCursorOver"));

	struct
	{
		struct FName                   BoxName;
	} params;

	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveDrawHUD
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// int                            SizeX                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveDrawHUD(int SizeX, int SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveDrawHUD"));

	struct
	{
		int                            SizeX;
		int                            SizeY;
	} params;

	params.SizeX = SizeX;
	params.SizeY = SizeY;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.Project
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AHUD::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Project"));

	struct
	{
		struct FVector                 Location;
		struct FVector                 ReturnValue;
	} params;

	params.Location = Location;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetTextSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                  Text                           (Parm, ZeroConstructor)
// float                          OutWidth                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHeight                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetTextSize(const class FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetTextSize"));

	struct
	{
		class FString                  Text;
		float                          OutWidth;
		float                          OutHeight;
		class UFont*                   Font;
		float                          Scale;
	} params;

	params.Text = Text;
	params.Font = Font;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);

	if (OutWidth != nullptr)
		*OutWidth = params.OutWidth;
	if (OutHeight != nullptr)
		*OutHeight = params.OutHeight;
}


// Function Engine.HUD.GetOwningPlayerController
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AHUD::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPlayerController"));

	struct
	{
		class APlayerController*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetOwningPawn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AHUD::GetOwningPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPawn"));

	struct
	{
		class APawn*                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetActorsInSelectionRectangle
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               FirstPoint                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector2D               SecondPoint                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           bIncludeNonCollidingComponents (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bActorMustBeFullyEnclosed      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetActorsInSelectionRectangle"));

	struct
	{
		class UClass*                  ClassFilter;
		struct FVector2D               FirstPoint;
		struct FVector2D               SecondPoint;
		TArray<class AActor*>          OutActors;
		bool                           bIncludeNonCollidingComponents;
		bool                           bActorMustBeFullyEnclosed;
	} params;

	params.ClassFilter = ClassFilter;
	params.FirstPoint = FirstPoint;
	params.SecondPoint = SecondPoint;
	params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	UObject::ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.HUD.DrawTextureSimple
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTextureSimple"));

	struct
	{
		class UTexture*                Texture;
		float                          ScreenX;
		float                          ScreenY;
		float                          Scale;
		bool                           bScalePosition;
	} params;

	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureU                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureV                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureUWidth                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureVHeight                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TintColor                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTexture"));

	struct
	{
		class UTexture*                Texture;
		float                          ScreenX;
		float                          ScreenY;
		float                          ScreenW;
		float                          ScreenH;
		float                          TextureU;
		float                          TextureV;
		float                          TextureUWidth;
		float                          TextureVHeight;
		struct FLinearColor            TintColor;
		TEnumAsByte<EBlendMode>        BlendMode;
		float                          Scale;
		bool                           bScalePosition;
		float                          Rotation;
		struct FVector2D               RotPivot;
	} params;

	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.TextureU = TextureU;
	params.TextureV = TextureV;
	params.TextureUWidth = TextureUWidth;
	params.TextureVHeight = TextureVHeight;
	params.TintColor = TintColor;
	params.BlendMode = BlendMode;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                  Text                           (Parm, ZeroConstructor)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawText"));

	struct
	{
		class FString                  Text;
		struct FLinearColor            TextColor;
		float                          ScreenX;
		float                          ScreenY;
		class UFont*                   Font;
		float                          Scale;
		bool                           bScalePosition;
	} params;

	params.Text = Text;
	params.TextColor = TextColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Font = Font;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawRect
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            RectColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawRect"));

	struct
	{
		struct FLinearColor            RectColor;
		float                          ScreenX;
		float                          ScreenY;
		float                          ScreenW;
		float                          ScreenH;
	} params;

	params.RectColor = RectColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterialTriangle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V0_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V1_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V2_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V0_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V1_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               V2_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            V0_Color                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            V1_Color                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            V2_Color                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialTriangle"));

	struct
	{
		class UMaterialInterface*      Material;
		struct FVector2D               V0_Pos;
		struct FVector2D               V1_Pos;
		struct FVector2D               V2_Pos;
		struct FVector2D               V0_UV;
		struct FVector2D               V1_UV;
		struct FVector2D               V2_UV;
		struct FLinearColor            V0_Color;
		struct FLinearColor            V1_Color;
		struct FLinearColor            V2_Color;
	} params;

	params.Material = Material;
	params.V0_Pos = V0_Pos;
	params.V1_Pos = V1_Pos;
	params.V2_Pos = V2_Pos;
	params.V0_UV = V0_UV;
	params.V1_UV = V1_UV;
	params.V2_UV = V2_UV;
	params.V0_Color = V0_Color;
	params.V1_Color = V1_Color;
	params.V2_Color = V2_Color;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterialSimple
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialSimple"));

	struct
	{
		class UMaterialInterface*      Material;
		float                          ScreenX;
		float                          ScreenY;
		float                          ScreenW;
		float                          ScreenH;
		float                          Scale;
		bool                           bScalePosition;
	} params;

	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterial
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialU                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialV                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialUWidth                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialVHeight                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterial"));

	struct
	{
		class UMaterialInterface*      Material;
		float                          ScreenX;
		float                          ScreenY;
		float                          ScreenW;
		float                          ScreenH;
		float                          MaterialU;
		float                          MaterialV;
		float                          MaterialUWidth;
		float                          MaterialVHeight;
		float                          Scale;
		bool                           bScalePosition;
		float                          Rotation;
		struct FVector2D               RotPivot;
	} params;

	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.MaterialU = MaterialU;
	params.MaterialV = MaterialV;
	params.MaterialUWidth = MaterialUWidth;
	params.MaterialVHeight = MaterialVHeight;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawLine
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          StartScreenX                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartScreenY                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenX                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenY                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawLine"));

	struct
	{
		float                          StartScreenX;
		float                          StartScreenY;
		float                          EndScreenX;
		float                          EndScreenY;
		struct FLinearColor            LineColor;
	} params;

	params.StartScreenX = StartScreenX;
	params.StartScreenY = StartScreenY;
	params.EndScreenX = EndScreenX;
	params.EndScreenY = EndScreenY;
	params.LineColor = LineColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.Deproject
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Deproject"));

	struct
	{
		float                          ScreenX;
		float                          ScreenY;
		struct FVector                 WorldPosition;
		struct FVector                 WorldDirection;
	} params;

	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	UObject::ProcessEvent(fn, &params);

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.HUD.AddHitBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               Position                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConsumesInput                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddHitBox"));

	struct
	{
		struct FVector2D               Position;
		struct FVector2D               Size;
		struct FName                   InName;
		bool                           bConsumesInput;
		int                            Priority;
	} params;

	params.Position = Position;
	params.Size = Size;
	params.InName = InName;
	params.bConsumesInput = bConsumesInput;
	params.Priority = Priority;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.AddDebugText
// (Final, Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class FString                  DebugText                      (Parm, ZeroConstructor)
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DesiredOffset                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipOverwriteCheck            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsoluteLocation              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bKeepAttachedToActor           (Parm, ZeroConstructor, IsPlainOldData)
// class UFont*                   InFont                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FontScale                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawShadow                    (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddDebugText"));

	struct
	{
		class FString                  DebugText;
		class AActor*                  SrcActor;
		float                          Duration;
		struct FVector                 Offset;
		struct FVector                 DesiredOffset;
		struct FColor                  TextColor;
		bool                           bSkipOverwriteCheck;
		bool                           bAbsoluteLocation;
		bool                           bKeepAttachedToActor;
		class UFont*                   InFont;
		float                          FontScale;
		bool                           bDrawShadow;
	} params;

	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.FontScale = FontScale;
	params.bDrawShadow = bDrawShadow;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InputComponent.WasControllerKeyJustReleased
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustReleased"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.WasControllerKeyJustPressed
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustPressed"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.IsControllerKeyDown
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::IsControllerKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.IsControllerKeyDown"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetTouchState
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetTouchState"));

	struct
	{
		int                            FingerIndex;
		float                          LocationX;
		float                          LocationY;
		bool                           bIsCurrentlyPressed;
	} params;

	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.InputComponent.GetControllerVectorKeyState
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UInputComponent::GetControllerVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerVectorKeyState"));

	struct
	{
		struct FKey                    Key;
		struct FVector                 ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerMouseDelta
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerMouseDelta"));

	struct
	{
		float                          DeltaX;
		float                          DeltaY;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.InputComponent.GetControllerKeyTimeDown
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerKeyTimeDown"));

	struct
	{
		struct FKey                    Key;
		float                          ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerAnalogStickState
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogStickState"));

	struct
	{
		TEnumAsByte<EControllerAnalogStick> WhichStick;
		float                          StickX;
		float                          StickY;
	} params;

	params.WhichStick = WhichStick;

	UObject::ProcessEvent(fn, &params);

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.InputComponent.GetControllerAnalogKeyState
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogKeyState"));

	struct
	{
		struct FKey                    Key;
		float                          ReturnValue;
	} params;

	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelScriptActor.WorldOriginLocationChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FIntVector              OldOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              NewOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.WorldOriginLocationChanged"));

	struct
	{
		struct FIntVector              OldOriginLocation;
		struct FIntVector              NewOriginLocation;
	} params;

	params.OldOriginLocation = OldOriginLocation;
	params.NewOriginLocation = NewOriginLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.SetCinematicMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bCinematicMode                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.SetCinematicMode"));

	struct
	{
		bool                           bCinematicMode;
		bool                           bHidePlayer;
		bool                           bAffectsHUD;
		bool                           bAffectsMovement;
		bool                           bAffectsTurning;
	} params;

	params.bCinematicMode = bCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.RemoteEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALevelScriptActor::RemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.RemoteEvent"));

	struct
	{
		struct FName                   EventName;
		bool                           ReturnValue;
	} params;

	params.EventName = EventName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelScriptActor.MatchStarted
// (Event, Public, BlueprintEvent)

void ALevelScriptActor::MatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.MatchStarted"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.LevelReset
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)

void ALevelScriptActor::LevelReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.LevelReset"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.InitialNetRelevantActorsCreated
// (Event, Public, BlueprintEvent)

void ALevelScriptActor::InitialNetRelevantActorsCreated()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.InitialNetRelevantActorsCreated"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MeshComponent.ResetDefaultMaterials
// (Final, Native, Public, BlueprintCallable)

void UMeshComponent::ResetDefaultMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.ResetDefaultMaterials"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MeshComponent.GetMaterials
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UMaterialInterface*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UMaterialInterface*> UMeshComponent::GetMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.GetMaterials"));

	struct
	{
		TArray<class UMaterialInterface*> ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetStaticMesh"));

	struct
	{
		class UStaticMesh*             NewMesh;
		bool                           ReturnValue;
	} params;

	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetForcedLodModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewForcedLodModel              (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::SetForcedLodModel(int NewForcedLodModel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetForcedLodModel"));

	struct
	{
		int                            NewForcedLodModel;
	} params;

	params.NewForcedLodModel = NewForcedLodModel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.SetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::SetCustomDepthMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetCustomDepthMaterial"));

	struct
	{
		class UMaterialInterface*      Material;
	} params;

	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.OnRep_StaticMesh
// (Final, Native, Public)
// Parameters:
// class UStaticMesh*             OldStaticMesh                  (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::OnRep_StaticMesh(class UStaticMesh* OldStaticMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.OnRep_StaticMesh"));

	struct
	{
		class UStaticMesh*             OldStaticMesh;
	} params;

	params.OldStaticMesh = OldStaticMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.GetLocalBounds
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::GetLocalBounds(struct FVector* Min, struct FVector* Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.GetLocalBounds"));

	struct
	{
		struct FVector                 Min;
		struct FVector                 Max;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (Min != nullptr)
		*Min = params.Min;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Engine.StaticMeshComponent.GetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UStaticMeshComponent::GetCustomDepthMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.GetCustomDepthMaterial"));

	struct
	{
		class UMaterialInterface*      ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetPhysicalMaterial"));

	struct
	{
		class UPhysicalMaterial*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetBaseMaterial
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterial* UMaterialInterface::GetBaseMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetBaseMaterial"));

	struct
	{
		class UMaterial*               ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.IsDisabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.IsDisabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.GetViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UCameraModifier::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.GetViewTarget"));

	struct
	{
		class AActor*                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.EnableModifier
// (Native, Public, BlueprintCallable)

void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.EnableModifier"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraModifier.DisableModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UCameraModifier::DisableModifier(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.DisableModifier"));

	struct
	{
		bool                           bImmediate;
	} params;

	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraModifier.BlueprintModifyPostProcess
// (BlueprintCosmetic, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          PostProcessBlendWeight         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FPostProcessSettings    PostProcessSettings            (Parm, OutParm)

void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyPostProcess"));

	struct
	{
		float                          DeltaTime;
		float                          PostProcessBlendWeight;
		struct FPostProcessSettings    PostProcessSettings;
	} params;

	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	if (PostProcessBlendWeight != nullptr)
		*PostProcessBlendWeight = params.PostProcessBlendWeight;
	if (PostProcessSettings != nullptr)
		*PostProcessSettings = params.PostProcessSettings;
}


// Function Engine.CameraModifier.BlueprintModifyCamera
// (BlueprintCosmetic, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          FOV                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewViewLocation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewViewRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NewFOV                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCameraModifier::BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyCamera"));

	struct
	{
		float                          DeltaTime;
		struct FVector                 ViewLocation;
		struct FRotator                ViewRotation;
		float                          FOV;
		struct FVector                 NewViewLocation;
		struct FRotator                NewViewRotation;
		float                          NewFOV;
	} params;

	params.DeltaTime = DeltaTime;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;
	params.FOV = FOV;

	UObject::ProcessEvent(fn, &params);

	if (NewViewLocation != nullptr)
		*NewViewLocation = params.NewViewLocation;
	if (NewViewRotation != nullptr)
		*NewViewRotation = params.NewViewRotation;
	if (NewFOV != nullptr)
		*NewFOV = params.NewFOV;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetVectorParameter"));

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetTrailSourceData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTrailSourceData"));

	struct
	{
		struct FName                   InFirstSocketName;
		struct FName                   InSecondSocketName;
		TEnumAsByte<ETrailWidthMode>   InWidthMode;
		float                          InWidth;
	} params;

	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetTemplate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTemplate"));

	struct
	{
		class UParticleSystem*         NewTemplate;
	} params;

	params.NewTemplate = NewTemplate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetMaterialParameter"));

	struct
	{
		struct FName                   ParameterName;
		class UMaterialInterface*      Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetFloatParameter"));

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetEnableDistanceFading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetEnableDistanceFading(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetEnableDistanceFading"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetEmitterEnable
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   EmitterName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewEnableState                (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetEmitterEnable"));

	struct
	{
		struct FName                   EmitterName;
		bool                           bNewEnableState;
	} params;

	params.EmitterName = EmitterName;
	params.bNewEnableState = bNewEnableState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetCustomLocalSpaceWorldSpace
// (Final, Native, Public, BlueprintCallable)

void UParticleSystemComponent::SetCustomLocalSpaceWorldSpace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetCustomLocalSpaceWorldSpace"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetCustomLocalSpaceComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UParticleSystemComponent::SetCustomLocalSpaceComponent(class USceneComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetCustomLocalSpaceComponent"));

	struct
	{
		class USceneComponent*         InComponent;
	} params;

	params.InComponent = InComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetColorParameter"));

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetTangent"));

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTangentPoint;
		int                            TargetIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewTargetStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetStrength"));

	struct
	{
		int                            EmitterIndex;
		float                          NewTargetStrength;
		int                            TargetIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTargetPoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetPoint"));

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTargetPoint;
		int                            TargetIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceTangent"));

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTangentPoint;
		int                            SourceIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewSourceStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceStrength"));

	struct
	{
		int                            EmitterIndex;
		float                          NewSourceStrength;
		int                            SourceIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewSourcePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourcePoint"));

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewSourcePoint;
		int                            SourceIndex;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewEndPoint                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamEndPoint"));

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewEndPoint;
	} params;

	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetActorParameter"));

	struct
	{
		struct FName                   ParameterName;
		class AActor*                  Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.GetNumActiveParticles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UParticleSystemComponent::GetNumActiveParticles()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNumActiveParticles"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetNamedMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNamedMaterial"));

	struct
	{
		struct FName                   InName;
		class UMaterialInterface*      ReturnValue;
	} params;

	params.InName = InName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GenerateParticleEvent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   InEventName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          InEmitterTime                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InDirection                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InVelocity                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GenerateParticleEvent"));

	struct
	{
		struct FName                   InEventName;
		float                          InEmitterTime;
		struct FVector                 InLocation;
		struct FVector                 InDirection;
		struct FVector                 InVelocity;
	} params;

	params.InEventName = InEventName;
	params.InEmitterTime = InEmitterTime;
	params.InLocation = InLocation;
	params.InDirection = InDirection;
	params.InVelocity = InVelocity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.EndTrails
// (Final, Native, Public, BlueprintCallable)

void UParticleSystemComponent::EndTrails()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.EndTrails"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance"));

	struct
	{
		struct FName                   InName;
		class UMaterialInterface*      SourceMaterial;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.InName = InName;
	params.SourceMaterial = SourceMaterial;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.BeginTrails
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.BeginTrails"));

	struct
	{
		struct FName                   InFirstSocketName;
		struct FName                   InSecondSocketName;
		TEnumAsByte<ETrailWidthMode>   InWidthMode;
		float                          InWidth;
	} params;

	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.AddKillSphere
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector4                KillSphere                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UParticleSystemComponent::AddKillSphere(const struct FVector4& KillSphere)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.AddKillSphere"));

	struct
	{
		struct FVector4                KillSphere;
	} params;

	params.KillSphere = KillSphere;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.AddEmitterPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector4                Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector4                InheritedVelocity              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector4                Orientation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::AddEmitterPoint(const struct FVector4& Position, const struct FVector4& InheritedVelocity, const struct FVector4& Orientation, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.AddEmitterPoint"));

	struct
	{
		struct FVector4                Position;
		struct FVector4                InheritedVelocity;
		struct FVector4                Orientation;
		struct FVector                 Scale;
	} params;

	params.Position = Position;
	params.InheritedVelocity = InheritedVelocity;
	params.Orientation = Orientation;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 InLocation;
	} params;

	params.PointIndex = PointIndex;
	params.InLocation = InLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor"));

	struct
	{
		struct FLinearColor            SegmentColor;
	} params;

	params.SegmentColor = SegmentColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InTangent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetTangentAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 InTangent;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.PointIndex = PointIndex;
	params.InTangent = InTangent;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplineWorldPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineWorldPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineWorldPoints"));

	struct
	{
		TArray<struct FVector>         Points;
	} params;

	params.Points = Points;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplinePointType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePointType"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplinePointType>  Type;
	} params;

	params.PointIndex = PointIndex;
	params.Type = Type;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplinePoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePoints"));

	struct
	{
		TArray<struct FVector>         Points;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.Points = Points;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplineLocalPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineLocalPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineLocalPoints"));

	struct
	{
		TArray<struct FVector>         Points;
	} params;

	params.Points = Points;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSelectedSplineSegmentColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSelectedSplineSegmentColor"));

	struct
	{
		struct FLinearColor            SegmentColor;
	} params;

	params.SegmentColor = SegmentColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetLocationAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetLocationAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 InLocation;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.PointIndex = PointIndex;
	params.InLocation = InLocation;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetDefaultUpVector
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 UpVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetDefaultUpVector"));

	struct
	{
		struct FVector                 UpVector;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.UpVector = UpVector;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetClosedLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInClosedLoop                  (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetClosedLoop(bool bInClosedLoop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetClosedLoop"));

	struct
	{
		bool                           bInClosedLoop;
	} params;

	params.bInClosedLoop = bInClosedLoop;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.IsClosedLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineComponent::IsClosedLoop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.IsClosedLoop"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtTime"));

	struct
	{
		float                          Time;
		bool                           bUseConstantVelocity;
		struct FRotator                ReturnValue;
	} params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		struct FRotator                ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtTime"));

	struct
	{
		float                          Time;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtTime"));

	struct
	{
		float                          Time;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USplineComponent::GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		bool                           bUseScale;
		struct FTransform              ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USplineComponent::GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseScale;
		struct FTransform              ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseScale;
		struct FTransform              ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplinePointType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESplinePointType> USplineComponent::GetSplinePointType(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplinePointType"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplinePointType>  ReturnValue;
	} params;

	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplineLength"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtTime"));

	struct
	{
		float                          Time;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetScaleAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FRotator                ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FRotator                ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FRotator                ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		float                          ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtSplinePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		float                          ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		float                          ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FQuat USplineComponent::GetQuaternionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FQuat                   ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FQuat USplineComponent::GetQuaternionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FQuat                   ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FQuat USplineComponent::GetQuaternionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FQuat                   ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetNumberOfSplinePoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USplineComponent::GetNumberOfSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetNumberOfSplinePoints"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Tangent                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 Location;
		struct FVector                 Tangent;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	if (Location != nullptr)
		*Location = params.Location;
	if (Tangent != nullptr)
		*Tangent = params.Tangent;
}


// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocalLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocalTangent                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		struct FVector                 LocalLocation;
		struct FVector                 LocalTangent;
	} params;

	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocalLocation != nullptr)
		*LocalLocation = params.LocalLocation;
	if (LocalTangent != nullptr)
		*LocalTangent = params.LocalTangent;
}


// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		float                          ReturnValue;
	} params;

	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		float                          ReturnValue;
	} params;

	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtTime"));

	struct
	{
		float                          Time;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		bool                           bUseConstantVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtSplinePoint"));

	struct
	{
		int                            PointIndex;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline"));

	struct
	{
		float                          Distance;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDefaultUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDefaultUpVector"));

	struct
	{
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
		struct FVector                 ReturnValue;
	} params;

	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.ClearSplinePoints
// (Final, Native, Public, BlueprintCallable)

void USplineComponent::ClearSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.ClearSplinePoints"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplineWorldPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineWorldPoint(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineWorldPoint"));

	struct
	{
		struct FVector                 Position;
	} params;

	params.Position = Position;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplinePoint"));

	struct
	{
		struct FVector                 Position;
		TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace;
	} params;

	params.Position = Position;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplineLocalPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineLocalPoint(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineLocalPoint"));

	struct
	{
		struct FVector                 Position;
	} params;

	params.Position = Position;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHalfHeight                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleSize"));

	struct
	{
		float                          InRadius;
		float                          InHalfHeight;
		bool                           bUpdateOverlaps;
	} params;

	params.InRadius = InRadius;
	params.InHalfHeight = InHalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleRadius"));

	struct
	{
		float                          Radius;
		bool                           bUpdateOverlaps;
	} params;

	params.Radius = Radius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleHalfHeight"));

	struct
	{
		float                          HalfHeight;
		bool                           bUpdateOverlaps;
	} params;

	params.HalfHeight = HalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize"));

	struct
	{
		float                          OutRadius;
		float                          OutHalfHeight;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetShapeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetShapeScale"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleSize"));

	struct
	{
		float                          OutRadius;
		float                          OutHalfHeight;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleRadius"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              NewInstanceTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform"));

	struct
	{
		int                            InstanceIndex;
		struct FTransform              NewInstanceTransform;
		bool                           bWorldSpace;
		bool                           bMarkRenderStateDirty;
		bool                           ReturnValue;
	} params;

	params.InstanceIndex = InstanceIndex;
	params.NewInstanceTransform = NewInstanceTransform;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.SetCullDistances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            StartCullDistance              (Parm, ZeroConstructor, IsPlainOldData)
// int                            EndCullDistance                (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.SetCullDistances"));

	struct
	{
		int                            StartCullDistance;
		int                            EndCullDistance;
	} params;

	params.StartCullDistance = StartCullDistance;
	params.EndCullDistance = EndCullDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.RemoveInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.RemoveInstance"));

	struct
	{
		int                            InstanceIndex;
		bool                           ReturnValue;
	} params;

	params.InstanceIndex = InstanceIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              OutInstanceTransform           (Parm, OutParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform"));

	struct
	{
		int                            InstanceIndex;
		struct FTransform              OutInstanceTransform;
		bool                           bWorldSpace;
		bool                           ReturnValue;
	} params;

	params.InstanceIndex = InstanceIndex;
	params.bWorldSpace = bWorldSpace;

	UObject::ProcessEvent(fn, &params);

	if (OutInstanceTransform != nullptr)
		*OutInstanceTransform = params.OutInstanceTransform;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSphereInWorldSpace            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere"));

	struct
	{
		struct FVector                 Center;
		float                          Radius;
		bool                           bSphereInWorldSpace;
		TArray<int>                    ReturnValue;
	} params;

	params.Center = Center;
	params.Radius = Radius;
	params.bSphereInWorldSpace = bSphereInWorldSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::GetInstanceCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceCount"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.EnableGPUVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::EnableGPUVisibility(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.EnableGPUVisibility"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.ClearInstances
// (Native, Public, BlueprintCallable)

void UInstancedStaticMeshComponent::ClearInstances()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.ClearInstances"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const struct FTransform& WorldTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace"));

	struct
	{
		struct FTransform              WorldTransform;
		int                            ReturnValue;
	} params;

	params.WorldTransform = WorldTransform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstances
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FTransform>      InstanceTransforms             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UInstancedStaticMeshComponent::AddInstances(TArray<struct FTransform> InstanceTransforms)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstances"));

	struct
	{
		TArray<struct FTransform>      InstanceTransforms;
	} params;

	params.InstanceTransforms = InstanceTransforms;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.AddInstance
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              InstanceTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstance(const struct FTransform& InstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstance"));

	struct
	{
		struct FTransform              InstanceTransform;
		int                            ReturnValue;
	} params;

	params.InstanceTransform = InstanceTransform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    InstancesToRemove              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(TArray<int> InstancesToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances"));

	struct
	{
		TArray<int>                    InstancesToRemove;
		bool                           ReturnValue;
	} params;

	params.InstancesToRemove = InstancesToRemove;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BlueprintAsyncActionBase.Activate
// (Native, Public, BlueprintCallable)

void UBlueprintAsyncActionBase::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintAsyncActionBase.Activate"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.Stop
// (Final, Native, Public, BlueprintCallable)

void AAmbientSound::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Stop"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Play"));

	struct
	{
		float                          StartTime;
	} params;

	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeOut"));

	struct
	{
		float                          FadeOutDuration;
		float                          FadeVolumeLevel;
	} params;

	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeIn"));

	struct
	{
		float                          FadeInDuration;
		float                          FadeVolumeLevel;
	} params;

	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.AdjustVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.AdjustVolume"));

	struct
	{
		float                          AdjustVolumeDuration;
		float                          AdjustVolumeLevel;
	} params;

	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.ValidateVertexBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateVertexBuffer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateVertexBuffer"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.ValidateParticlesVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateParticlesVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateParticlesVelocity"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.ValidateIndexBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateIndexBuffer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateIndexBuffer"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.SetWireframe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bWireframe                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetWireframe(bool bWireframe)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetWireframe"));

	struct
	{
		bool                           bWireframe;
	} params;

	params.bWireframe = bWireframe;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetWaterColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            WaterColour                    (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetWaterColour(const struct FLinearColor& WaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetWaterColour"));

	struct
	{
		struct FLinearColor            WaterColour;
	} params;

	params.WaterColour = WaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetSpecularBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpecularBrightness             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetSpecularBrightness(float SpecularBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetSpecularBrightness"));

	struct
	{
		float                          SpecularBrightness;
	} params;

	params.SpecularBrightness = SpecularBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetShallowWaterColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            ShallowWaterColour             (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetShallowWaterColour"));

	struct
	{
		struct FLinearColor            ShallowWaterColour;
	} params;

	params.ShallowWaterColour = ShallowWaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetReflectionBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReflectionBrightness           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetReflectionBrightness(float ReflectionBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetReflectionBrightness"));

	struct
	{
		float                          ReflectionBrightness;
	} params;

	params.ReflectionBrightness = ReflectionBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetLightFunctionMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetLightFunctionMaterial"));

	struct
	{
		class UMaterialInterface*      Material;
	} params;

	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFresnelPower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FresnelPower                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFresnelPower(float FresnelPower)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFresnelPower"));

	struct
	{
		float                          FresnelPower;
	} params;

	params.FresnelPower = FresnelPower;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamHighlightColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            FoamHighlightColour            (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamHighlightColour"));

	struct
	{
		struct FLinearColor            FoamHighlightColour;
	} params;

	params.FoamHighlightColour = FoamHighlightColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            FoamColour                     (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamColour(const struct FLinearColor& FoamColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamColour"));

	struct
	{
		struct FLinearColor            FoamColour;
	} params;

	params.FoamColour = FoamColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FoamBrightness                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamBrightness(float FoamBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamBrightness"));

	struct
	{
		float                          FoamBrightness;
	} params;

	params.FoamBrightness = FoamBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetCausticsDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Depth                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetCausticsDepth(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetCausticsDepth"));

	struct
	{
		float                          Depth;
	} params;

	params.Depth = Depth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetBackLitColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            BackLitColour                  (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetBackLitColour(const struct FLinearColor& BackLitColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetBackLitColour"));

	struct
	{
		struct FLinearColor            BackLitColour;
	} params;

	params.BackLitColour = BackLitColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetAmbientColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            AmbientColour                  (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetAmbientColour(const struct FLinearColor& AmbientColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetAmbientColour"));

	struct
	{
		struct FLinearColor            AmbientColour;
	} params;

	params.AmbientColour = AmbientColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.HasLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::HasLightFunctionMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.HasLightFunctionMaterial"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.GetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFFTWaterComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UFFTWaterComponent* AFFTWater::GetComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.GetComponent"));

	struct
	{
		class UFFTWaterComponent*      ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavModifierVolume.SetAreaClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  NewAreaClass                   (Parm, ZeroConstructor, IsPlainOldData)

void ANavModifierVolume::SetAreaClass(class UClass* NewAreaClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavModifierVolume.SetAreaClass"));

	struct
	{
		class UClass*                  NewAreaClass;
	} params;

	params.NewAreaClass = NewAreaClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PostProcessVolume.AddOrUpdateBlendable
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessVolume::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessVolume.AddOrUpdateBlendable"));

	struct
	{
		TScriptInterface<class UBlendableInterface> InBlendableObject;
		float                          InWeight;
	} params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraActor.GetAutoActivatePlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ACameraActor::GetAutoActivatePlayerIndex()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraActor.GetAutoActivatePlayerIndex"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraShake.ReceiveStopShake
// (Event, Public, BlueprintEvent)

void UCameraShake::ReceiveStopShake()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceiveStopShake"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraShake.ReceivePlayShake
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void UCameraShake::ReceivePlayShake(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceivePlayShake"));

	struct
	{
		float                          Scale;
	} params;

	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraShake.ReceiveIsFinished
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCameraShake::ReceiveIsFinished()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceiveIsFinished"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraShake.BlueprintUpdateCameraShake
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FMinimalViewInfo        POV                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FMinimalViewInfo        ModifiedPOV                    (Parm, OutParm)

void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.BlueprintUpdateCameraShake"));

	struct
	{
		float                          DeltaTime;
		float                          Alpha;
		struct FMinimalViewInfo        POV;
		struct FMinimalViewInfo        ModifiedPOV;
	} params;

	params.DeltaTime = DeltaTime;
	params.Alpha = Alpha;
	params.POV = POV;

	UObject::ProcessEvent(fn, &params);

	if (ModifiedPOV != nullptr)
		*ModifiedPOV = params.ModifiedPOV;
}


// Function Engine.CurveBase.GetValueRange
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetValueRange(float* MinValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetValueRange"));

	struct
	{
		float                          MinValue;
		float                          MaxValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (MinValue != nullptr)
		*MinValue = params.MinValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.CurveBase.GetTimeRange
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MinTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetTimeRange"));

	struct
	{
		float                          MinTime;
		float                          MaxTime;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (MinTime != nullptr)
		*MinTime = params.MinTime;
	if (MaxTime != nullptr)
		*MaxTime = params.MaxTime;
}


// Function Engine.CurveFloat.GetFloatValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCurveFloat::GetFloatValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveFloat.GetFloatValue"));

	struct
	{
		float                          InTime;
		float                          ReturnValue;
	} params;

	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalActor.SetDecalMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void ADecalActor::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.SetDecalMaterial"));

	struct
	{
		class UMaterialInterface*      NewDecalMaterial;
	} params;

	params.NewDecalMaterial = NewDecalMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalActor.GetDecalMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* ADecalActor::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.GetDecalMaterial"));

	struct
	{
		class UMaterialInterface*      ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalActor.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.CreateDynamicMaterialInstance"));

	struct
	{
		class UMaterialInstanceDynamic* ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.ToggleActive
// (Final, Native, Public, BlueprintCallable)

void AEmitter::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.ToggleActive"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetVectorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetVectorParameter"));

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetTemplate
// (Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetTemplate"));

	struct
	{
		class UParticleSystem*         NewTemplate;
	} params;

	params.NewTemplate = NewTemplate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetMaterialParameter"));

	struct
	{
		struct FName                   ParameterName;
		class UMaterialInterface*      Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetFloatParameter"));

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetColorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetColorParameter"));

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetActorParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetActorParameter"));

	struct
	{
		struct FName                   ParameterName;
		class AActor*                  Param;
	} params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.OnRep_bCurrentlyActive
// (Native, Public)

void AEmitter::OnRep_bCurrentlyActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnRep_bCurrentlyActive"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.OnParticleSystemFinished
// (Native, Public)
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnParticleSystemFinished"));

	struct
	{
		class UParticleSystemComponent* FinishedComponent;
	} params;

	params.FinishedComponent = FinishedComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AEmitter::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.IsActive"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.GetEmitterName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AEmitter::GetEmitterName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.GetEmitterName"));

	struct
	{
		struct FName                   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.Deactivate
// (Final, Native, Public, BlueprintCallable)

void AEmitter::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Deactivate"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.Activate
// (Final, Native, Public, BlueprintCallable)

void AEmitter::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Activate"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFog.OnRep_bEnabled
// (Native, Public)

void AExponentialHeightFog::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFog.OnRep_bEnabled"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLight.OnRep_bEnabled
// (Native, Public)

void ASkyLight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLight.OnRep_bEnabled"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.WindDirectionalSource.GetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWindDirectionalSourceComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWindDirectionalSourceComponent* AWindDirectionalSource::GetComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSource.GetComponent"));

	struct
	{
		class UWindDirectionalSourceComponent* ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LightComponentBase.SetCastShadows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponentBase::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastShadows"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponentBase.GetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor ULightComponentBase::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.GetLightColor"));

	struct
	{
		struct FLinearColor            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LightComponent.SetTemperature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewTemperature                 (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetTemperature(float NewTemperature)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetTemperature"));

	struct
	{
		float                          NewTemperature;
	} params;

	params.NewTemperature = NewTemperature;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionScale"));

	struct
	{
		struct FVector                 NewLightFunctionScale;
	} params;

	params.NewLightFunctionScale = NewLightFunctionScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionMaterial"));

	struct
	{
		class UMaterialInterface*      NewLightFunctionMaterial;
	} params;

	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionFadeDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionFadeDistance"));

	struct
	{
		float                          NewLightFunctionFadeDistance;
	} params;

	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionDisabledBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionDisabledBrightness"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSRGB                          (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightColor"));

	struct
	{
		struct FLinearColor            NewLightColor;
		bool                           bSRGB;
	} params;

	params.NewLightColor = NewLightColor;
	params.bSRGB = bSRGB;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIndirectLightingIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIndirectLightingIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIESTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureLightProfile*    NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIESTexture(class UTextureLightProfile* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIESTexture"));

	struct
	{
		class UTextureLightProfile*    NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetEnableLightShaftBloom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetEnableLightShaftBloom(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetEnableLightShaftBloom"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomTint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomTint(const struct FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomTint"));

	struct
	{
		struct FColor                  NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomThreshold(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomThreshold"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomScale"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetAffectTranslucentLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectTranslucentLighting"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectDynamicIndirectLighting"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.GetNumberOfShadowCastersInFirstCascade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ULightComponent::GetNumberOfShadowCastersInFirstCascade()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.GetNumberOfShadowCastersInFirstCascade"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.ToggleEnabled
// (Final, Native, Public, BlueprintCallable)

void ALight::ToggleEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.ToggleEnabled"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionScale"));

	struct
	{
		struct FVector                 NewLightFunctionScale;
	} params;

	params.NewLightFunctionScale = NewLightFunctionScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionMaterial"));

	struct
	{
		class UMaterialInterface*      NewLightFunctionMaterial;
	} params;

	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionFadeDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionFadeDistance"));

	struct
	{
		float                          NewLightFunctionFadeDistance;
	} params;

	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightColor"));

	struct
	{
		struct FLinearColor            NewLightColor;
	} params;

	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetEnabled                    (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetEnabled"));

	struct
	{
		bool                           bSetEnabled;
	} params;

	params.bSetEnabled = bSetEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetCastShadows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetCastShadows"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetBrightness"));

	struct
	{
		float                          NewBrightness;
	} params;

	params.NewBrightness = NewBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetAffectTranslucentLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetAffectTranslucentLighting"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.OnRep_bEnabled
// (Native, Public)

void ALight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.OnRep_bEnabled"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALight::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.IsEnabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.GetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor ALight::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetLightColor"));

	struct
	{
		struct FLinearColor            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.GetBrightness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ALight::GetBrightness()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetBrightness"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PointLight.SetRadius
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetRadius"));

	struct
	{
		float                          NewRadius;
	} params;

	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLight.SetLightFalloffExponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetLightFalloffExponent"));

	struct
	{
		float                          NewLightFalloffExponent;
	} params;

	params.NewLightFalloffExponent = NewLightFalloffExponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLight.SetOuterConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetOuterConeAngle"));

	struct
	{
		float                          NewOuterConeAngle;
	} params;

	params.NewOuterConeAngle = NewOuterConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLight.SetInnerConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetInnerConeAngle"));

	struct
	{
		float                          NewInnerConeAngle;
	} params;

	params.NewInnerConeAngle = NewInnerConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Stop
// (Native, Public, BlueprintCallable)

void AMatineeActor::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Stop"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.SetPosition
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bJump                          (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetPosition"));

	struct
	{
		float                          NewPosition;
		bool                           bJump;
	} params;

	params.NewPosition = NewPosition;
	params.bJump = bJump;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.SetLoopingState
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetLoopingState(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetLoopingState"));

	struct
	{
		bool                           bNewLooping;
	} params;

	params.bNewLooping = bNewLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Reverse
// (Native, Public, BlueprintCallable)

void AMatineeActor::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Reverse"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.PlayInstantly
// (Final, Native, Public, BlueprintCallable)

void AMatineeActor::PlayInstantly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.PlayInstantly"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void AMatineeActor::Play(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Play"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Pause
// (Native, Public, BlueprintCallable)

void AMatineeActor::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Pause"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.ChangePlaybackDirection
// (Native, Public, BlueprintCallable)

void AMatineeActor::ChangePlaybackDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.ChangePlaybackDirection"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.SetSmartLinkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::SetSmartLinkEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.SetSmartLinkEnabled"));

	struct
	{
		bool                           bEnabled;
	} params;

	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.ResumePathFollowing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Agent                          (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::ResumePathFollowing(class AActor* Agent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.ResumePathFollowing"));

	struct
	{
		class AActor*                  Agent;
	} params;

	params.Agent = Agent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.ReceiveSmartLinkReached
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  Agent                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Destination                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ANavLinkProxy::ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.ReceiveSmartLinkReached"));

	struct
	{
		class AActor*                  Agent;
		struct FVector                 Destination;
	} params;

	params.Agent = Agent;
	params.Destination = Destination;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.IsSmartLinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::IsSmartLinkEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.IsSmartLinkEnabled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavLinkProxy.HasMovingAgents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::HasMovingAgents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.HasMovingAgents"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetNumLODs
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UParticleSystem::GetNumLODs()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystem.GetNumLODs"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.ContainsEmitterType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  TypeData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystem::ContainsEmitterType(class UClass* TypeData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystem.ContainsEmitterType"));

	struct
	{
		class UClass*                  TypeData;
		bool                           ReturnValue;
	} params;

	params.TypeData = TypeData;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.IsSectionUsingCloth
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InSectionIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckCorrespondingSections    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMesh::IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.IsSectionUsingCloth"));

	struct
	{
		int                            InSectionIndex;
		bool                           bCheckCorrespondingSections;
		bool                           ReturnValue;
	} params;

	params.InSectionIndex = InSectionIndex;
	params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetNumLODsBP
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkeletalMesh::GetNumLODsBP()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetNumLODsBP"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.FindSocket
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USkeletalMeshSocket* USkeletalMesh::FindSocket(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.FindSocket"));

	struct
	{
		struct FName                   InSocketName;
		class USkeletalMeshSocket*     ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DefaultPawn.TurnAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::TurnAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.TurnAtRate"));

	struct
	{
		float                          Rate;
	} params;

	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.Turn
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::Turn(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.Turn"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveUp_World
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveUp_World(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveUp_World"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveRight
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveRight(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveRight"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveForward
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveForward(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveForward"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.LookUpAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUpAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.LookUpAtRate"));

	struct
	{
		float                          Rate;
	} params;

	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.LookUp
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUp(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.LookUp"));

	struct
	{
		float                          Val;
	} params;

	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.ToggleForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::ToggleForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.ToggleForce"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.FireImpulse
// (Native, Public, BlueprintCallable)

void ARadialForceActor::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.FireImpulse"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.EnableForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::EnableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.EnableForce"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.DisableForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::DisableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.DisableForce"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCapture2D.OnInterpToggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCapture2D::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCapture2D.OnInterpToggle"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureCube.OnInterpToggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCaptureCube::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureCube.OnInterpToggle"));

	struct
	{
		bool                           bEnable;
	} params;

	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.UnHideBoneByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.UnHideBoneByName"));

	struct
	{
		struct FName                   BoneName;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformToBoneSpace"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InPosition;
		struct FRotator                InRotation;
		struct FVector                 OutPosition;
		struct FRotator                OutRotation;
	} params;

	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	UObject::ProcessEvent(fn, &params);

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InPosition;
		struct FRotator                InRotation;
		struct FVector                 OutPosition;
		struct FRotator                OutRotation;
	} params;

	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	UObject::ProcessEvent(fn, &params);

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetSkeletalMesh"));

	struct
	{
		class USkeletalMesh*           NewMesh;
	} params;

	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceReInit                   (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetPhysicsAsset"));

	struct
	{
		class UPhysicsAsset*           NewPhysicsAsset;
		bool                           bForceReInit;
	} params;

	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkinnedMeshComponent*   NewMasterBoneComponent         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USkinnedMeshComponent::SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent"));

	struct
	{
		class USkinnedMeshComponent*   NewMasterBoneComponent;
	} params;

	params.NewMasterBoneComponent = NewMasterBoneComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetCustomDepthMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetCustomDepthMaterial"));

	struct
	{
		class UMaterialInterface*      Material;
	} params;

	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.OnRep_SkeletalMesh
// (Final, Native, Public)
// Parameters:
// class USkeletalMesh*           OldMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::OnRep_SkeletalMesh(class USkeletalMesh* OldMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.OnRep_SkeletalMesh"));

	struct
	{
		class USkeletalMesh*           OldMesh;
	} params;

	params.OldMesh = OldMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkinnedMeshComponent::IsBoneHiddenByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName"));

	struct
	{
		struct FName                   BoneName;
		bool                           ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.HideBoneByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.HideBoneByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EPhysBodyOp>       PhysBodyOption;
	} params;

	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.GetSocketBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetSocketBoneName"));

	struct
	{
		struct FName                   InSocketName;
		struct FName                   ReturnValue;
	} params;

	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetParentBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetParentBone"));

	struct
	{
		struct FName                   BoneName;
		struct FName                   ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* USkinnedMeshComponent::GetCustomDepthMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetCustomDepthMaterial"));

	struct
	{
		class UMaterialInterface*      ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneName"));

	struct
	{
		int                            BoneIndex;
		struct FName                   ReturnValue;
	} params;

	params.BoneIndex = BoneIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkinnedMeshComponent::GetBoneIndex(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneIndex"));

	struct
	{
		struct FName                   BoneName;
		int                            ReturnValue;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.BoneIsChildOf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParentBoneName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkinnedMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.BoneIsChildOf"));

	struct
	{
		struct FName                   BoneName;
		struct FName                   ParentBoneName;
		bool                           ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearZLimit"));

	struct
	{
		TEnumAsByte<ELinearConstraintMotion> ConstraintType;
		float                          LimitSize;
	} params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearYLimit"));

	struct
	{
		TEnumAsByte<ELinearConstraintMotion> ConstraintType;
		float                          LimitSize;
	} params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearXLimit"));

	struct
	{
		TEnumAsByte<ELinearConstraintMotion> ConstraintType;
		float                          LimitSize;
	} params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget"));

	struct
	{
		struct FVector                 InVelTarget;
	} params;

	params.InVelTarget = InVelTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive"));

	struct
	{
		bool                           bEnableDriveX;
		bool                           bEnableDriveY;
		bool                           bEnableDriveZ;
	} params;

	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget"));

	struct
	{
		struct FVector                 InPosTarget;
	} params;

	params.InPosTarget = InPosTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive"));

	struct
	{
		bool                           bEnableDriveX;
		bool                           bEnableDriveY;
		bool                           bEnableDriveZ;
	} params;

	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams"));

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
	} params;

	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetDisableCollision
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisableCollision              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetDisableCollision"));

	struct
	{
		bool                           bDisableCollision;
	} params;

	params.bDisableCollision = bDisableCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RefPosition                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition"));

	struct
	{
		TEnumAsByte<EConstraintFrame>  Frame;
		struct FVector                 RefPosition;
	} params;

	params.Frame = Frame;
	params.RefPosition = RefPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PriAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 SecAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation"));

	struct
	{
		TEnumAsByte<EConstraintFrame>  Frame;
		struct FVector                 PriAxis;
		struct FVector                 SecAxis;
	} params;

	params.Frame = Frame;
	params.PriAxis = PriAxis;
	params.SecAxis = SecAxis;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              RefFrame                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame"));

	struct
	{
		TEnumAsByte<EConstraintFrame>  Frame;
		struct FTransform              RefFrame;
	} params;

	params.Frame = Frame;
	params.RefFrame = RefFrame;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component1                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName1                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     Component2                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName2                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents"));

	struct
	{
		class UPrimitiveComponent*     Component1;
		struct FName                   BoneName1;
		class UPrimitiveComponent*     Component2;
		struct FName                   BoneName2;
	} params;

	params.Component1 = Component1;
	params.BoneName1 = BoneName1;
	params.Component2 = Component2;
	params.BoneName2 = BoneName2;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget"));

	struct
	{
		struct FVector                 InVelTarget;
	} params;

	params.InVelTarget = InVelTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive"));

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
	} params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          TwistLimitAngle                (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit"));

	struct
	{
		TEnumAsByte<EAngularConstraintMotion> ConstraintType;
		float                          TwistLimitAngle;
	} params;

	params.ConstraintType = ConstraintType;
	params.TwistLimitAngle = TwistLimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing2LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit"));

	struct
	{
		TEnumAsByte<EAngularConstraintMotion> MotionType;
		float                          Swing2LimitAngle;
	} params;

	params.MotionType = MotionType;
	params.Swing2LimitAngle = Swing2LimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing1LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit"));

	struct
	{
		TEnumAsByte<EAngularConstraintMotion> MotionType;
		float                          Swing1LimitAngle;
	} params;

	params.MotionType = MotionType;
	params.Swing1LimitAngle = Swing1LimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationTarget(const struct FRotator& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget"));

	struct
	{
		struct FRotator                InPosTarget;
	} params;

	params.InPosTarget = InPosTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive"));

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
	} params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams"));

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
	} params;

	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.GetCurrentTwist
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentTwist()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentTwist"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentSwing2()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentSwing1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetConstraintForce
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 OutLinearForce                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutAngularForce                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetConstraintForce"));

	struct
	{
		struct FVector                 OutLinearForce;
		struct FVector                 OutAngularForce;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OutLinearForce != nullptr)
		*OutLinearForce = params.OutLinearForce;
	if (OutAngularForce != nullptr)
		*OutAngularForce = params.OutAngularForce;
}


// Function Engine.PhysicsConstraintComponent.BreakConstraint
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UPhysicsConstraintComponent::BreakConstraint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.BreakConstraint"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Interface_Animatable.GetAnimInstance
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimInstance* UInterface_Animatable::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Interface_Animatable.GetAnimInstance"));

	struct
	{
		class UAnimInstance*           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRestoreSimulationSpace        (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent"));

	struct
	{
		bool                           bRestoreSimulationSpace;
	} params;

	params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Stop"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPos                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPosition"));

	struct
	{
		float                          InPos;
		bool                           bFireNotifies;
	} params;

	params.InPos = InPos;
	params.bFireNotifies = bFireNotifies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPlayRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPlayRate"));

	struct
	{
		float                          Rate;
	} params;

	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight"));

	struct
	{
		float                          PhysicsBlendWeight;
	} params;

	params.PhysicsBlendWeight = PhysicsBlendWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetMorphTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemoveZeroWeight              (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetMorphTarget"));

	struct
	{
		struct FName                   MorphTargetName;
		float                          Value;
		bool                           bRemoveZeroWeight;
	} params;

	params.MorphTargetName = MorphTargetName;
	params.Value = Value;
	params.bRemoveZeroWeight = bRemoveZeroWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewBlendPhysics               (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending"));

	struct
	{
		bool                           bNewBlendPhysics;
	} params;

	params.bNewBlendPhysics = bNewBlendPhysics;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale"));

	struct
	{
		float                          Scale;
	} params;

	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimInstanceClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  NewClass                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimInstanceClass(class UClass* NewClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimInstanceClass"));

	struct
	{
		class UClass*                  NewClass;
	} params;

	params.NewClass = NewClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAnimationMode>    InAnimationMode                (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimationMode"));

	struct
	{
		TEnumAsByte<EAnimationMode>    InAnimationMode;
	} params;

	params.InAnimationMode = InAnimationMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimation(class UAnimationAsset* NewAnimToPlay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimation"));

	struct
	{
		class UAnimationAsset*         NewAnimToPlay;
	} params;

	params.NewAnimToPlay = NewAnimToPlay;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive"));

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive"));

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams"));

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics"));

	struct
	{
		bool                           bNewSimulate;
	} params;

	params.bNewSimulate = bNewSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight"));

	struct
	{
		float                          PhysicsBlendWeight;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics"));

	struct
	{
		struct FName                   InBoneName;
		bool                           bNewSimulate;
	} params;

	params.InBoneName = InBoneName;
	params.bNewSimulate = bNewSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight"));

	struct
	{
		struct FName                   InBoneName;
		float                          PhysicsBlendWeight;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.InBoneName = InBoneName;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ResetClothTeleportMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.PlayAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.PlayAnimation"));

	struct
	{
		class UAnimationAsset*         NewAnimToPlay;
		bool                           bLooping;
	} params;

	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::Play(bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Play"));

	struct
	{
		bool                           bLooping;
	} params;

	params.bLooping = bLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.IsPlaying"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPosition"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPlayRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPlayRate"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetMorphTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetMorphTarget"));

	struct
	{
		struct FName                   MorphTargetName;
		float                          ReturnValue;
	} params;

	params.MorphTargetName = MorphTargetName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetClothMaxDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimInstance
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimInstance* USkeletalMeshComponent::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimInstance"));

	struct
	{
		class UAnimInstance*           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EAnimationMode>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EAnimationMode> USkeletalMeshComponent::GetAnimationMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimationMode"));

	struct
	{
		TEnumAsByte<EAnimationMode>    ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ForceClothNextUpdateTeleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ClearMorphTargets
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ClearMorphTargets"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::BindClothToMasterPoseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AddPhysicsBlendWeight          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight"));

	struct
	{
		struct FName                   InBoneName;
		float                          AddPhysicsBlendWeight;
		bool                           bSkipCustomPhysicsType;
	} params;

	params.InBoneName = InBoneName;
	params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMaterial1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMaterial0()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UApplicationLifecycleComponent::ApplicationLifetimeDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AggregatorInterface.UnregisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UAggregatorInterface::UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AggregatorInterface.UnregisterAggregatable"));

	struct
	{
		TScriptInterface<class UAggregatableInterface> InAggregatable;
	} params;

	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AggregatorInterface.RegisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UAggregatorInterface::RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AggregatorInterface.RegisterAggregatable"));

	struct
	{
		TScriptInterface<class UAggregatableInterface> InAggregatable;
	} params;

	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ComponentAggregatorComponent.UnregisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UComponentAggregatorComponent::UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ComponentAggregatorComponent.UnregisterAggregatable"));

	struct
	{
		TScriptInterface<class UAggregatableInterface> InAggregatable;
	} params;

	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ComponentAggregatorComponent.RegisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UComponentAggregatorComponent::RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ComponentAggregatorComponent.RegisterAggregatable"));

	struct
	{
		TScriptInterface<class UAggregatableInterface> InAggregatable;
	} params;

	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InterpToMovementComponent.StopSimulating
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UInterpToMovementComponent::StopSimulating(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InterpToMovementComponent.StopSimulating"));

	struct
	{
		struct FHitResult              HitResult;
	} params;

	params.HitResult = HitResult;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		float                          Time;
	} params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		float                          Time;
	} params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		float                          Time;
	} params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		float                          Time;
	} params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		float                          Time;
	} params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.UnregisterNavigationInvoker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Invoker                        (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::UnregisterNavigationInvoker(class AActor* Invoker)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.UnregisterNavigationInvoker"));

	struct
	{
		class AActor*                  Invoker;
	} params;

	params.Invoker = Invoker;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SimpleMoveToLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Goal                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UNavigationSystem::SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SimpleMoveToLocation"));

	struct
	{
		class AController*             Controller;
		struct FVector                 Goal;
	} params;

	params.Controller = Controller;
	params.Goal = Goal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SimpleMoveToActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Goal                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SimpleMoveToActor(class AController* Controller, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SimpleMoveToActor"));

	struct
	{
		class AController*             Controller;
		class AActor*                  Goal;
	} params;

	params.Controller = Controller;
	params.Goal = Goal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaxNumberOfJobs                (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount"));

	struct
	{
		int                            MaxNumberOfJobs;
	} params;

	params.MaxNumberOfJobs = MaxNumberOfJobs;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SetGeometryGatheringMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ENavDataGatheringModeConfig> NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SetGeometryGatheringMode(TEnumAsByte<ENavDataGatheringModeConfig> NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SetGeometryGatheringMode"));

	struct
	{
		TEnumAsByte<ENavDataGatheringModeConfig> NewMode;
	} params;

	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount
// (Final, Native, Public, BlueprintCallable)

void UNavigationSystem::ResetMaxSimultaneousTileGenerationJobsCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.RegisterNavigationInvoker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Invoker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TileGenerationRadius           (Parm, ZeroConstructor, IsPlainOldData)
// float                          TileRemovalRadius              (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.RegisterNavigationInvoker"));

	struct
	{
		class AActor*                  Invoker;
		float                          TileGenerationRadius;
		float                          TileRemovalRadius;
	} params;

	params.Invoker = Invoker;
	params.TileGenerationRadius = TileGenerationRadius;
	params.TileRemovalRadius = TileRemovalRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.ProjectPointToNavigation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 QueryExtent                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.ProjectPointToNavigation"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 Point;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		struct FVector                 QueryExtent;
		struct FVector                 ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Point = Point;
	params.NavData = NavData;
	params.FilterClass = FilterClass;
	params.QueryExtent = QueryExtent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.OnNavigationBoundsUpdated
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ANavMeshBoundsVolume*    NavVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.OnNavigationBoundsUpdated"));

	struct
	{
		class ANavMeshBoundsVolume*    NavVolume;
	} params;

	params.NavVolume = NavVolume;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.NavigationRaycast
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RayStart                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 RayEnd                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Querier                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.NavigationRaycast"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 RayStart;
		struct FVector                 RayEnd;
		struct FVector                 HitLocation;
		class UClass*                  FilterClass;
		class AController*             Querier;
		bool                           ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.RayStart = RayStart;
	params.RayEnd = RayEnd;
	params.FilterClass = FilterClass;
	params.Querier = Querier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.IsNavigationBeingBuilt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::IsNavigationBeingBuilt(class UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.IsNavigationBeingBuilt"));

	struct
	{
		class UObject*                 WorldContext;
		bool                           ReturnValue;
	} params;

	params.WorldContext = WorldContext;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomReachablePointInRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomReachablePointInRadius"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 Origin;
		float                          Radius;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		struct FVector                 ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPointInRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPointInRadius"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 Origin;
		float                          Radius;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		struct FVector                 ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPointInNavigableRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPointInNavigableRadius"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 Origin;
		float                          Radius;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		struct FVector                 ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPoint"));

	struct
	{
		class UObject*                 WorldContext;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		struct FVector                 ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathLength
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathLength                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetPathLength"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 PathStart;
		struct FVector                 PathEnd;
		float                          PathLength;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		TEnumAsByte<ENavigationQueryResult> ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (PathLength != nullptr)
		*PathLength = params.PathLength;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathCost
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathCost                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetPathCost"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 PathStart;
		struct FVector                 PathEnd;
		float                          PathCost;
		class ANavigationData*         NavData;
		class UClass*                  FilterClass;
		TEnumAsByte<ENavigationQueryResult> ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (PathCost != nullptr)
		*PathCost = params.PathCost;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetNavigationSystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class UNavigationSystem*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNavigationSystem* UNavigationSystem::GetNavigationSystem(class UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetNavigationSystem"));

	struct
	{
		class UObject*                 WorldContext;
		class UNavigationSystem*       ReturnValue;
	} params;

	params.WorldContext = WorldContext;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetMainNavData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ANavigationData*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANavigationData* UNavigationSystem::GetMainNavData()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetMainNavData"));

	struct
	{
		class ANavigationData*         ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToLocationSynchronously
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UNavigationPath*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNavigationPath* UNavigationSystem::FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.FindPathToLocationSynchronously"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 PathStart;
		struct FVector                 PathEnd;
		class AActor*                  PathfindingContext;
		class UClass*                  FilterClass;
		class UNavigationPath*         ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToActorSynchronously
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  GoalActor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TetherDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UNavigationPath*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNavigationPath* UNavigationSystem::FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.FindPathToActorSynchronously"));

	struct
	{
		class UObject*                 WorldContext;
		struct FVector                 PathStart;
		class AActor*                  GoalActor;
		float                          TetherDistance;
		class AActor*                  PathfindingContext;
		class UClass*                  FilterClass;
		class UNavigationPath*         ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.GoalActor = GoalActor;
	params.TetherDistance = TetherDistance;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.DoesMainNavDataHaveValidNavMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::DoesMainNavDataHaveValidNavMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.DoesMainNavDataHaveValidNavMesh"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimSequenceBase.GetPlayLength
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimSequenceBase::GetPlayLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSequenceBase.GetPlayLength"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ProjectileMovementComponent.StopSimulating
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::StopSimulating(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.StopSimulating"));

	struct
	{
		struct FHitResult              HitResult;
	} params;

	params.HitResult = HitResult;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)

void UProjectileMovementComponent::SetVelocityInLocalSpace(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace"));

	struct
	{
		struct FVector                 NewVelocity;
	} params;

	params.NewVelocity = NewVelocity;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
	} params;

	params.ImpactResult = ImpactResult;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms, HasDefaults)
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature"));

	struct
	{
		struct FHitResult              ImpactResult;
		struct FVector                 ImpactVelocity;
	} params;

	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ProjectileMovementComponent.LimitVelocity
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UProjectileMovementComponent::LimitVelocity(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.LimitVelocity"));

	struct
	{
		struct FVector                 NewVelocity;
		struct FVector                 ReturnValue;
	} params;

	params.NewVelocity = NewVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavRelevantComponent.SetNavigationRelevancy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRelevant                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavRelevantComponent::SetNavigationRelevancy(bool bRelevant)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavRelevantComponent.SetNavigationRelevancy"));

	struct
	{
		bool                           bRelevant;
	} params;

	params.bRelevant = bRelevant;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PawnNoiseEmitterComponent.MakeNoise
// (BlueprintAuthorityOnly, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPawnNoiseEmitterComponent::MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnNoiseEmitterComponent.MakeNoise"));

	struct
	{
		class AActor*                  NoiseMaker;
		float                          Loudness;
		struct FVector                 NoiseLocation;
	} params;

	params.NoiseMaker = NoiseMaker;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetRotation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetRotation"));

	struct
	{
		struct FRotator                NewRotation;
	} params;

	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation"));

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
	} params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocation"));

	struct
	{
		struct FVector                 NewLocation;
	} params;

	params.NewLocation = NewLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetLinearStiffness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLinearStiffness             (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearStiffness"));

	struct
	{
		float                          NewLinearStiffness;
	} params;

	params.NewLinearStiffness = NewLinearStiffness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetLinearDamping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLinearDamping               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearDamping"));

	struct
	{
		float                          NewLinearDamping;
	} params;

	params.NewLinearDamping = NewLinearDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInterpolationSpeed          (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed"));

	struct
	{
		float                          NewInterpolationSpeed;
	} params;

	params.NewInterpolationSpeed = NewInterpolationSpeed;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetAngularStiffness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAngularStiffness            (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularStiffness"));

	struct
	{
		float                          NewAngularStiffness;
	} params;

	params.NewAngularStiffness = NewAngularStiffness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetAngularDamping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAngularDamping              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularDamping"));

	struct
	{
		float                          NewAngularDamping;
	} params;

	params.NewAngularDamping = NewAngularDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.ReleaseComponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UPhysicsHandleComponent::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.ReleaseComponent"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.GrabComponent
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 GrabLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConstrainRotation             (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GrabComponent"));

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FName                   InBoneName;
		struct FVector                 GrabLocation;
		bool                           bConstrainRotation;
	} params;

	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 TargetLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TargetRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation"));

	struct
	{
		struct FVector                 TargetLocation;
		struct FRotator                TargetRotation;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (TargetLocation != nullptr)
		*TargetLocation = params.TargetLocation;
	if (TargetRotation != nullptr)
		*TargetRotation = params.TargetRotation;
}


// Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::SupportsConvertibleLaptops()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlatformEventsComponent.IsInTabletMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::IsInTabletMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInTabletMode"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformEventsComponent.IsInLaptopMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::IsInLaptopMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInLaptopMode"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AtmosphericFogComponent.StartPrecompute
// (Final, Native, Public, BlueprintCallable)

void UAtmosphericFogComponent::StartPrecompute()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.StartPrecompute"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetSunMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewSunMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetSunMultiplier"));

	struct
	{
		float                          NewSunMultiplier;
	} params;

	params.NewSunMultiplier = NewSunMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetStartDistance
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewStartDistance               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetStartDistance"));

	struct
	{
		float                          NewStartDistance;
	} params;

	params.NewStartDistance = NewStartDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          DensityHeight                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxScatteringOrder             (Parm, ZeroConstructor, IsPlainOldData)
// int                            InscatterAltitudeSampleNum     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetPrecomputeParams"));

	struct
	{
		float                          DensityHeight;
		int                            MaxScatteringOrder;
		int                            InscatterAltitudeSampleNum;
	} params;

	params.DensityHeight = DensityHeight;
	params.MaxScatteringOrder = MaxScatteringOrder;
	params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetFogMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewFogMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetFogMultiplier"));

	struct
	{
		float                          NewFogMultiplier;
	} params;

	params.NewFogMultiplier = NewFogMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDistanceScale
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDistanceScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceScale"));

	struct
	{
		float                          NewDistanceScale;
	} params;

	params.NewDistanceScale = NewDistanceScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDistanceOffset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDistanceOffset              (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceOffset"));

	struct
	{
		float                          NewDistanceOffset;
	} params;

	params.NewDistanceOffset = NewDistanceOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDensityOffset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDensityOffset               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityOffset"));

	struct
	{
		float                          NewDensityOffset;
	} params;

	params.NewDensityOffset = NewDensityOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDensityMultiplier           (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityMultiplier"));

	struct
	{
		float                          NewDensityMultiplier;
	} params;

	params.NewDensityMultiplier = NewDensityMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultLightColor"));

	struct
	{
		struct FLinearColor            NewLightColor;
	} params;

	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultBrightness"));

	struct
	{
		float                          NewBrightness;
	} params;

	params.NewBrightness = NewBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetAltitudeScale
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAltitudeScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetAltitudeScale"));

	struct
	{
		float                          NewAltitudeScale;
	} params;

	params.NewAltitudeScale = NewAltitudeScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.DisableSunDisk
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewSunDisk                     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableSunDisk"));

	struct
	{
		bool                           NewSunDisk;
	} params;

	params.NewSunDisk = NewSunDisk;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.DisableGroundScattering
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewGroundScattering            (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableGroundScattering"));

	struct
	{
		bool                           NewGroundScattering;
	} params;

	params.NewGroundScattering = NewGroundScattering;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Stop"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetWaveParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class USoundWave*              InWave                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetWaveParameter"));

	struct
	{
		struct FName                   InName;
		class USoundWave*              InWave;
	} params;

	params.InName = InName;
	params.InWave = InWave;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetVolumeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewVolumeMultiplier            (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetVolumeMultiplier"));

	struct
	{
		float                          NewVolumeMultiplier;
	} params;

	params.NewVolumeMultiplier = NewVolumeMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetUISound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInUISound                     (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetUISound(bool bInUISound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetUISound"));

	struct
	{
		bool                           bInUISound;
	} params;

	params.bInUISound = bInUISound;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*              NewSound                       (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetSound(class USoundBase* NewSound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSound"));

	struct
	{
		class USoundBase*              NewSound;
	} params;

	params.NewSound = NewSound;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetPitchMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPitchMultiplier             (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetPitchMultiplier"));

	struct
	{
		float                          NewPitchMultiplier;
	} params;

	params.NewPitchMultiplier = NewPitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetIntParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetIntParameter(const struct FName& InName, int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetIntParameter"));

	struct
	{
		struct FName                   InName;
		int                            InInt;
	} params;

	params.InName = InName;
	params.InInt = InInt;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetFloatParameter"));

	struct
	{
		struct FName                   InName;
		float                          InFloat;
	} params;

	params.InName = InName;
	params.InFloat = InFloat;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetBoolParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetBoolParameter(const struct FName& InName, bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetBoolParameter"));

	struct
	{
		struct FName                   InName;
		bool                           InBool;
	} params;

	params.InName = InName;
	params.InBool = InBool;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Play"));

	struct
	{
		float                          StartTime;
	} params;

	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.IsPlaying"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AudioComponent.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeOut"));

	struct
	{
		float                          FadeOutDuration;
		float                          FadeVolumeLevel;
	} params;

	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeIn"));

	struct
	{
		float                          FadeInDuration;
		float                          FadeVolumeLevel;
		float                          StartTime;
	} params;

	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAttenuationSettings    OutAttenuationSettings         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAudioComponent::BP_GetAttenuationSettingsToApply(struct FAttenuationSettings* OutAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply"));

	struct
	{
		struct FAttenuationSettings    OutAttenuationSettings;
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (OutAttenuationSettings != nullptr)
		*OutAttenuationSettings = params.OutAttenuationSettings;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.AdjustVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustVolume"));

	struct
	{
		float                          AdjustVolumeDuration;
		float                          AdjustVolumeLevel;
	} params;

	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.AdjustAttenuation
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAttenuationSettings    InAttenuationSettings          (ConstParm, Parm, OutParm, ReferenceParm)

void UAudioComponent::AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustAttenuation"));

	struct
	{
		struct FAttenuationSettings    InAttenuationSettings;
	} params;

	params.InAttenuationSettings = InAttenuationSettings;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ChildActorComponent.SetChildActorClass
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData)

void UChildActorComponent::SetChildActorClass(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ChildActorComponent.SetChildActorClass"));

	struct
	{
		class UClass*                  InClass;
	} params;

	params.InClass = InClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetSortOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetSortOrder(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetSortOrder"));

	struct
	{
		int                            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetLifeSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          LifeSpan                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetLifeSpan(float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetLifeSpan"));

	struct
	{
		float                          LifeSpan;
	} params;

	params.LifeSpan = LifeSpan;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetDecalMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetDecalMaterial"));

	struct
	{
		class UMaterialInterface*      NewDecalMaterial;
	} params;

	params.NewDecalMaterial = NewDecalMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.GetDecalMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetDecalMaterial"));

	struct
	{
		class UMaterialInterface*      ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetDecalDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UDecalComponent::GetDecalDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetDecalDynamicMaterialInstance"));

	struct
	{
		class UMaterialInstanceDynamic* ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalComponent.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UDecalComponent::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.CreateDynamicMaterialInstance"));

	struct
	{
		class UMaterialInstanceDynamic* ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ExponentialHeightFogComponent.SetStartDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetStartDistance"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringStartScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetInscatteringStartScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringStartScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringFarScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetInscatteringFarScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringFarScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor"));

	struct
	{
		struct FLinearColor            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogDensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogDensity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogDensity"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFarInscatteringColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFarInscatteringColour(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFarInscatteringColour"));

	struct
	{
		struct FLinearColor            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetExponentialFogFarDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetExponentialFogFarDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetExponentialFogFarDistance"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringFarScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringFarScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringFarScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor"));

	struct
	{
		struct FLinearColor            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FogVolumeComponent.UpdateFog
// (Final, Native, Public, BlueprintCallable)

void UFogVolumeComponent::UpdateFog()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FogVolumeComponent.UpdateFog"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetTint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewTint                        (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetTint(const struct FLinearColor& NewTint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetTint"));

	struct
	{
		struct FLinearColor            NewTint;
	} params;

	params.NewTint = NewTint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetRadius"));

	struct
	{
		float                          NewRadius;
	} params;

	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetGroupingPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAmbientLightClusteringPolicy> Policy                         (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetGroupingPolicy(TEnumAsByte<EAmbientLightClusteringPolicy> Policy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetGroupingPolicy"));

	struct
	{
		TEnumAsByte<EAmbientLightClusteringPolicy> Policy;
	} params;

	params.Policy = Policy;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetAmbientIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetAmbientIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetAmbientIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetShadowLastTransitionSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetShadowLastTransitionSize(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowLastTransitionSize"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetNormalOffsetBiasScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetNormalOffsetBiasScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetNormalOffsetBiasScale"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetLightShaftOverrideDirection(const struct FVector& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection"));

	struct
	{
		struct FVector                 NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetFarCascadeUpdateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetFarCascadeUpdateRate(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetFarCascadeUpdateRate"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion"));

	struct
	{
		bool                           bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades"));

	struct
	{
		int                            NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCloudsShadowsIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCloudsShadowsIntensity(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCloudsShadowsIntensity"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCloseCascadeUpdateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCloseCascadeUpdateRate(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCloseCascadeUpdateRate"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetSourceRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetSourceRadius(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceRadius"));

	struct
	{
		float                          bNewValue;
	} params;

	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetSourceLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetSourceLength(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceLength"));

	struct
	{
		float                          NewValue;
	} params;

	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetLightFalloffExponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetLightFalloffExponent"));

	struct
	{
		float                          NewLightFalloffExponent;
	} params;

	params.NewLightFalloffExponent = NewLightFalloffExponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetAttenuationRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetAttenuationRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetAttenuationRadius"));

	struct
	{
		float                          NewRadius;
	} params;

	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetOuterConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetOuterConeAngle"));

	struct
	{
		float                          NewOuterConeAngle;
	} params;

	params.NewOuterConeAngle = NewOuterConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetKickBackProportionality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewKickBackRatio               (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetKickBackProportionality(float NewKickBackRatio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetKickBackProportionality"));

	struct
	{
		float                          NewKickBackRatio;
	} params;

	params.NewKickBackRatio = NewKickBackRatio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetInnerConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetInnerConeAngle"));

	struct
	{
		float                          NewInnerConeAngle;
	} params;

	params.NewInnerConeAngle = NewInnerConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetOcclusionTint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                  InTint                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USkyLightComponent::SetOcclusionTint(const struct FColor& InTint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetOcclusionTint"));

	struct
	{
		struct FColor                  InTint;
	} params;

	params.InTint = InTint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetMinOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InMinOcclusion                 (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetMinOcclusion(float InMinOcclusion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetMinOcclusion"));

	struct
	{
		float                          InMinOcclusion;
	} params;

	params.InMinOcclusion = InMinOcclusion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetLightColor"));

	struct
	{
		struct FLinearColor            NewLightColor;
	} params;

	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetIndirectLightingIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIndirectLightingIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetCubemapBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureCube*            SourceCubemap                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureCube*            DestinationCubemap             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InBlendFraction                (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemapBlend"));

	struct
	{
		class UTextureCube*            SourceCubemap;
		class UTextureCube*            DestinationCubemap;
		float                          InBlendFraction;
	} params;

	params.SourceCubemap = SourceCubemap;
	params.DestinationCubemap = DestinationCubemap;
	params.InBlendFraction = InBlendFraction;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetCubemap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureCube*            NewCubemap                     (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetCubemap(class UTextureCube* NewCubemap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemap"));

	struct
	{
		class UTextureCube*            NewCubemap;
	} params;

	params.NewCubemap = NewCubemap;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.RecaptureSky
// (Final, Native, Public, BlueprintCallable)

void USkyLightComponent::RecaptureSky()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.RecaptureSky"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPhysicsSpringComponent::GetSpringRestingPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPhysicsSpringComponent::GetSpringDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringDirection"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsSpringComponent::GetNormalizedCompressionScalar()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ArrowComponent.SetArrowColor_New
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_New(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ArrowComponent.SetArrowColor_New"));

	struct
	{
		struct FLinearColor            NewColor;
	} params;

	params.NewColor = NewColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ArrowComponent.SetArrowColor_DEPRECATED
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                  NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_DEPRECATED(const struct FColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ArrowComponent.SetArrowColor_DEPRECATED"));

	struct
	{
		struct FColor                  NewColor;
	} params;

	params.NewColor = NewColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetWaterPositionOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               PositionOffset                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetWaterPositionOffset(const struct FVector2D& PositionOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetWaterPositionOffset"));

	struct
	{
		struct FVector2D               PositionOffset;
	} params;

	params.PositionOffset = PositionOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetWaterColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            WaterColour                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetWaterColour(const struct FLinearColor& WaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetWaterColour"));

	struct
	{
		struct FLinearColor            WaterColour;
	} params;

	params.WaterColour = WaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetSpecularBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpecularBrightness             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetSpecularBrightness(float SpecularBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetSpecularBrightness"));

	struct
	{
		float                          SpecularBrightness;
	} params;

	params.SpecularBrightness = SpecularBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetShallowWaterColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            ShallowWaterColour             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetShallowWaterColour"));

	struct
	{
		struct FLinearColor            ShallowWaterColour;
	} params;

	params.ShallowWaterColour = ShallowWaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetReflectionBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReflectionBrightness           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetReflectionBrightness(float ReflectionBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetReflectionBrightness"));

	struct
	{
		float                          ReflectionBrightness;
	} params;

	params.ReflectionBrightness = ReflectionBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetMurkyRegion
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FMurkyRegion            MurkyRegion                    (ConstParm, Parm, OutParm, ReferenceParm)

void UFFTWaterComponent::SetMurkyRegion(const struct FMurkyRegion& MurkyRegion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetMurkyRegion"));

	struct
	{
		struct FMurkyRegion            MurkyRegion;
	} params;

	params.MurkyRegion = MurkyRegion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFresnelPower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FresnelPower                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetFresnelPower(float FresnelPower)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFresnelPower"));

	struct
	{
		float                          FresnelPower;
	} params;

	params.FresnelPower = FresnelPower;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamHighlightColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            FoamHighlightColour            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamHighlightColour"));

	struct
	{
		struct FLinearColor            FoamHighlightColour;
	} params;

	params.FoamHighlightColour = FoamHighlightColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            FoamColour                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetFoamColour(const struct FLinearColor& FoamColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamColour"));

	struct
	{
		struct FLinearColor            FoamColour;
	} params;

	params.FoamColour = FoamColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FoamBrightness                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetFoamBrightness(float FoamBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamBrightness"));

	struct
	{
		float                          FoamBrightness;
	} params;

	params.FoamBrightness = FoamBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetCarrierWaveParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Amplitude                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          WaveLength                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          PropagationSpeed               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetCarrierWaveParams(float Amplitude, float WaveLength, float PropagationSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetCarrierWaveParams"));

	struct
	{
		float                          Amplitude;
		float                          WaveLength;
		float                          PropagationSpeed;
	} params;

	params.Amplitude = Amplitude;
	params.WaveLength = WaveLength;
	params.PropagationSpeed = PropagationSpeed;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetBackLitColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            BackLitColour                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetBackLitColour(const struct FLinearColor& BackLitColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetBackLitColour"));

	struct
	{
		struct FLinearColor            BackLitColour;
	} params;

	params.BackLitColour = BackLitColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetAmbientColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            AmbientColour                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetAmbientColour(const struct FLinearColor& AmbientColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetAmbientColour"));

	struct
	{
		struct FLinearColor            AmbientColour;
	} params;

	params.AmbientColour = AmbientColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.GetWaterPositionOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               PositionOffset                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::GetWaterPositionOffset(struct FVector2D* PositionOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.GetWaterPositionOffset"));

	struct
	{
		struct FVector2D               PositionOffset;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (PositionOffset != nullptr)
		*PositionOffset = params.PositionOffset;
}


// Function Engine.FFTWaterExtendedPlaneComponent.SetMurkyRegion
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FMurkyRegion            MurkyRegion                    (ConstParm, Parm, OutParm, ReferenceParm)

void UFFTWaterExtendedPlaneComponent::SetMurkyRegion(const struct FMurkyRegion& MurkyRegion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterExtendedPlaneComponent.SetMurkyRegion"));

	struct
	{
		struct FMurkyRegion            MurkyRegion;
	} params;

	params.MurkyRegion = MurkyRegion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetUV
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetUV"));

	struct
	{
		int                            NewU;
		int                            NewUL;
		int                            NewV;
		int                            NewVL;
	} params;

	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetSpriteAndUV
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSpriteAndUV"));

	struct
	{
		class UTexture2D*              NewSprite;
		int                            NewU;
		int                            NewUL;
		int                            NewV;
		int                            NewVL;
	} params;

	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetSprite
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSprite(class UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSprite"));

	struct
	{
		class UTexture2D*              NewSprite;
	} params;

	params.NewSprite = NewSprite;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialBillboardComponent.AddElement
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             DistanceToOpacityCurve         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSizeIsInScreenSpace           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeX                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeY                      (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             DistanceToSizeCurve            (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialBillboardComponent::AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialBillboardComponent.AddElement"));

	struct
	{
		class UMaterialInterface*      Material;
		class UCurveFloat*             DistanceToOpacityCurve;
		bool                           bSizeIsInScreenSpace;
		float                          BaseSizeX;
		float                          BaseSizeY;
		class UCurveFloat*             DistanceToSizeCurve;
	} params;

	params.Material = Material;
	params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	params.BaseSizeX = BaseSizeX;
	params.BaseSizeY = BaseSizeY;
	params.DistanceToSizeCurve = DistanceToSizeCurve;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMesh.GetNumUVChannels
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            LodLevel                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStaticMesh::GetNumUVChannels(int LodLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumUVChannels"));

	struct
	{
		int                            LodLevel;
		int                            ReturnValue;
	} params;

	params.LodLevel = LodLevel;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetNumLODsBP
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStaticMesh::GetNumLODsBP()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumLODsBP"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetBoundingBox
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FBox UStaticMesh::GetBoundingBox()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetBoundingBox"));

	struct
	{
		struct FBox                    ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MergedCollisionComponent.GetStaticMeshByInstanceBodyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceBodyIndex              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UStaticMesh* UMergedCollisionComponent::GetStaticMeshByInstanceBodyIndex(int InstanceBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MergedCollisionComponent.GetStaticMeshByInstanceBodyIndex"));

	struct
	{
		int                            InstanceBodyIndex;
		class UStaticMesh*             ReturnValue;
	} params;

	params.InstanceBodyIndex = InstanceBodyIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MergedCollisionComponent.GetOwningActorCrc32ByInstanceBodyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceBodyIndex              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMergedCollisionComponent::GetOwningActorCrc32ByInstanceBodyIndex(int InstanceBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MergedCollisionComponent.GetOwningActorCrc32ByInstanceBodyIndex"));

	struct
	{
		int                            InstanceBodyIndex;
		int                            ReturnValue;
	} params;

	params.InstanceBodyIndex = InstanceBodyIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DestructibleComponent.SetDestructibleMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDestructibleMesh*       NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::SetDestructibleMesh(class UDestructibleMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.SetDestructibleMesh"));

	struct
	{
		class UDestructibleMesh*       NewMesh;
	} params;

	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DestructibleComponent.GetDestructibleMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDestructibleMesh*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UDestructibleMesh* UDestructibleComponent::GetDestructibleMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.GetDestructibleMesh"));

	struct
	{
		class UDestructibleMesh*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DestructibleComponent.ApplyRadiusDamage
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HurtOrigin                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFullDamage                    (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.ApplyRadiusDamage"));

	struct
	{
		float                          BaseDamage;
		struct FVector                 HurtOrigin;
		float                          DamageRadius;
		float                          ImpulseStrength;
		bool                           bFullDamage;
	} params;

	params.BaseDamage = BaseDamage;
	params.HurtOrigin = HurtOrigin;
	params.DamageRadius = DamageRadius;
	params.ImpulseStrength = ImpulseStrength;
	params.bFullDamage = bFullDamage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DestructibleComponent.ApplyDamage
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ImpulseDir                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.ApplyDamage"));

	struct
	{
		float                          DamageAmount;
		struct FVector                 HitLocation;
		struct FVector                 ImpulseDir;
		float                          ImpulseStrength;
	} params;

	params.DamageAmount = DamageAmount;
	params.HitLocation = HitLocation;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseStrength = ImpulseStrength;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneTransformByName
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneTransformByName"));

	struct
	{
		struct FName                   BoneName;
		struct FTransform              InTransform;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
	} params;

	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InScale3D                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneScaleByName"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InScale3D;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
	} params;

	params.BoneName = BoneName;
	params.InScale3D = InScale3D;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneRotationByName"));

	struct
	{
		struct FName                   BoneName;
		struct FRotator                InRotation;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
	} params;

	params.BoneName = BoneName;
	params.InRotation = InRotation;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneLocationByName"));

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InLocation;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
	} params;

	params.BoneName = BoneName;
	params.InLocation = InLocation;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.ResetBoneTransformByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::ResetBoneTransformByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.ResetBoneTransformByName"));

	struct
	{
		struct FName                   BoneName;
	} params;

	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.GetBoneTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UPoseableMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneTransformByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		struct FTransform              ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPoseableMeshComponent::GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneScaleByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UPoseableMeshComponent::GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneRotationByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		struct FRotator                ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPoseableMeshComponent::GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneLocationByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		struct FVector                 ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableSkeletalMeshComponent.SwitchPoseMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPoseableAnimMode> NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SwitchPoseMode(TEnumAsByte<EPoseableAnimMode> NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SwitchPoseMode"));

	struct
	{
		TEnumAsByte<EPoseableAnimMode> NewMode;
	} params;

	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByName
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByName"));

	struct
	{
		struct FName                   BoneName;
		struct FTransform              InTransform;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		bool                           bApplyRefPose;
	} params;

	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByIndex
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SetBoneTransformByIndex(int BoneIndex, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByIndex"));

	struct
	{
		int                            BoneIndex;
		struct FTransform              InTransform;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		bool                           bApplyRefPose;
	} params;

	params.BoneIndex = BoneIndex;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.GetBoneTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UPoseableSkeletalMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.GetBoneTransformByName"));

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<EBoneSpaces>       BoneSpace;
		bool                           bApplyRefPose;
		struct FTransform              ReturnValue;
	} params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FlatWaterMeshComponent.UpdateBoundary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  BoundaryActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::UpdateBoundary(class AActor* BoundaryActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.UpdateBoundary"));

	struct
	{
		class AActor*                  BoundaryActor;
	} params;

	params.BoundaryActor = BoundaryActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.SetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::SetTexture(int MaterialIndex, const struct FName& Name, class UTexture* Texture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.SetTexture"));

	struct
	{
		int                            MaterialIndex;
		struct FName                   Name;
		class UTexture*                Texture;
	} params;

	params.MaterialIndex = MaterialIndex;
	params.Name = Name;
	params.Texture = Texture;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.SetScalarValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::SetScalarValue(int MaterialIndex, const struct FName& Name, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.SetScalarValue"));

	struct
	{
		int                            MaterialIndex;
		struct FName                   Name;
		float                          Value;
	} params;

	params.MaterialIndex = MaterialIndex;
	params.Name = Name;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.PlaceDrop
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::PlaceDrop(const struct FVector2D& Position, float Size, float Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.PlaceDrop"));

	struct
	{
		struct FVector2D               Position;
		float                          Size;
		float                          Height;
	} params;

	params.Position = Position;
	params.Size = Size;
	params.Height = Height;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.CreateBoundaryMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  BoundaryActor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZNearDistance                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ZFarDistance                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            TextureSize                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::CreateBoundaryMap(class AActor* BoundaryActor, float ZNearDistance, float ZFarDistance, int TextureSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.CreateBoundaryMap"));

	struct
	{
		class AActor*                  BoundaryActor;
		float                          ZNearDistance;
		float                          ZFarDistance;
		int                            TextureSize;
	} params;

	params.BoundaryActor = BoundaryActor;
	params.ZNearDistance = ZNearDistance;
	params.ZFarDistance = ZFarDistance;
	params.TextureSize = TextureSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedCoverageMeshComponent.SetBaseMeshComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*    BaseMeshComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UInstancedCoverageMeshComponent::SetBaseMeshComponent(class UStaticMeshComponent* BaseMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedCoverageMeshComponent.SetBaseMeshComponent"));

	struct
	{
		class UStaticMeshComponent*    BaseMeshComponent;
	} params;

	params.BaseMeshComponent = BaseMeshComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedCoverageMeshComponent.BaseMeshComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* UInstancedCoverageMeshComponent::BaseMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedCoverageMeshComponent.BaseMeshComponent"));

	struct
	{
		class UStaticMeshComponent*    ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MobileInstancedStaticMeshComponent.AddInstance
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMobileInstancedStaticMeshComponent::AddInstance(const struct FTransform& Transform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MobileInstancedStaticMeshComponent.AddInstance"));

	struct
	{
		struct FTransform              Transform;
		int                            ReturnValue;
	} params;

	params.Transform = Transform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.UpdateMesh
// (Final, Native, Public, BlueprintCallable)

void USplineMeshComponent::UpdateMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.UpdateMesh"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartTangent"));

	struct
	{
		struct FVector                 StartTangent;
		bool                           bUpdateMesh;
	} params;

	params.StartTangent = StartTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               StartScale                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartScale"));

	struct
	{
		struct FVector2D               StartScale;
		bool                           bUpdateMesh;
	} params;

	params.StartScale = StartScale;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartRoll                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartRoll"));

	struct
	{
		float                          StartRoll;
		bool                           bUpdateMesh;
	} params;

	params.StartRoll = StartRoll;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartPosition"));

	struct
	{
		struct FVector                 StartPos;
		bool                           bUpdateMesh;
	} params;

	params.StartPos = StartPos;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               StartOffset                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartOffset"));

	struct
	{
		struct FVector2D               StartOffset;
		bool                           bUpdateMesh;
	} params;

	params.StartOffset = StartOffset;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartAndEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartAndEnd"));

	struct
	{
		struct FVector                 StartPos;
		struct FVector                 StartTangent;
		struct FVector                 EndPos;
		struct FVector                 EndTangent;
		bool                           bUpdateMesh;
	} params;

	params.StartPos = StartPos;
	params.StartTangent = StartTangent;
	params.EndPos = EndPos;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetSplineUpDir
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InSplineUpDir                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetSplineUpDir"));

	struct
	{
		struct FVector                 InSplineUpDir;
		bool                           bUpdateMesh;
	} params;

	params.InSplineUpDir = InSplineUpDir;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetForwardAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ESplineMeshAxis>   InForwardAxis                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetForwardAxis"));

	struct
	{
		TEnumAsByte<ESplineMeshAxis>   InForwardAxis;
		bool                           bUpdateMesh;
	} params;

	params.InForwardAxis = InForwardAxis;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndTangent"));

	struct
	{
		struct FVector                 EndTangent;
		bool                           bUpdateMesh;
	} params;

	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               EndScale                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndScale"));

	struct
	{
		struct FVector2D               EndScale;
		bool                           bUpdateMesh;
	} params;

	params.EndScale = EndScale;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          EndRoll                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndRoll"));

	struct
	{
		float                          EndRoll;
		bool                           bUpdateMesh;
	} params;

	params.EndRoll = EndRoll;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndPosition"));

	struct
	{
		struct FVector                 EndPos;
		bool                           bUpdateMesh;
	} params;

	params.EndPos = EndPos;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               EndOffset                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndOffset"));

	struct
	{
		struct FVector2D               EndOffset;
		bool                           bUpdateMesh;
	} params;

	params.EndOffset = EndOffset;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetBoundaryMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBoundaryMin                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMin"));

	struct
	{
		float                          InBoundaryMin;
		bool                           bUpdateMesh;
	} params;

	params.InBoundaryMin = InBoundaryMin;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetBoundaryMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBoundaryMax                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMax"));

	struct
	{
		float                          InBoundaryMax;
		bool                           bUpdateMesh;
	} params;

	params.InBoundaryMax = InBoundaryMax;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.GetStartTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetStartTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartTangent"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetStartScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartScale"));

	struct
	{
		struct FVector2D               ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetStartRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartRoll"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetStartPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartPosition"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetStartOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartOffset"));

	struct
	{
		struct FVector2D               ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetSplineUpDir
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetSplineUpDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetSplineUpDir"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetForwardAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ESplineMeshAxis>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESplineMeshAxis> USplineMeshComponent::GetForwardAxis()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetForwardAxis"));

	struct
	{
		TEnumAsByte<ESplineMeshAxis>   ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetEndTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndTangent"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetEndScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndScale"));

	struct
	{
		struct FVector2D               ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetEndRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndRoll"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetEndPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndPosition"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetEndOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndOffset"));

	struct
	{
		struct FVector2D               ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetBoundaryMin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMin"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetBoundaryMax()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMax"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BoxComponent.SetBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InBoxExtent                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UBoxComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.SetBoxExtent"));

	struct
	{
		struct FVector                 InBoxExtent;
		bool                           bUpdateOverlaps;
	} params;

	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BoxComponent.GetUnscaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UBoxComponent::GetUnscaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetUnscaledBoxExtent"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BoxComponent.GetScaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UBoxComponent::GetScaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetScaledBoxExtent"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.SetSphereRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSphereRadius                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.SetSphereRadius"));

	struct
	{
		float                          InSphereRadius;
		bool                           bUpdateOverlaps;
	} params;

	params.InSphereRadius = InSphereRadius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SphereComponent.GetUnscaledSphereRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetUnscaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetUnscaledSphereRadius"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetShapeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetShapeScale"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetScaledSphereRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetScaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetScaledSphereRadius"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.SetYScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetYScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetYScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetXScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetXScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetXScale"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetWorldSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetWorldSize(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetWorldSize"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetTextRenderColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextRenderColor(const struct FColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextRenderColor"));

	struct
	{
		struct FColor                  Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetTextMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextMaterial"));

	struct
	{
		class UMaterialInterface*      Material;
	} params;

	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                  Value                          (Parm, ZeroConstructor)

void UTextRenderComponent::SetText(const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetText"));

	struct
	{
		class FString                  Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizSpacingAdjust(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizSpacingAdjust"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EHorizTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizontalAlignment"));

	struct
	{
		TEnumAsByte<EHorizTextAligment> Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFont*                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetFont(class UFont* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetFont"));

	struct
	{
		class UFont*                   Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.K2_SetText
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FText                   Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UTextRenderComponent::K2_SetText(const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.K2_SetText"));

	struct
	{
		struct FText                   Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.GetTextWorldSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTextRenderComponent::GetTextWorldSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextWorldSize"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.GetTextLocalSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTextRenderComponent::GetTextLocalSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextLocalSize"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.VectorFieldComponent.SetIntensity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UVectorFieldComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VectorFieldComponent.SetIntensity"));

	struct
	{
		float                          NewIntensity;
	} params;

	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect"));

	struct
	{
		TEnumAsByte<EObjectTypeQuery>  ObjectType;
	} params;

	params.ObjectType = ObjectType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.FireImpulse
// (Native, Public, BlueprintCallable)

void URadialForceComponent::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.FireImpulse"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.AddObjectTypeToAffect
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.AddObjectTypeToAffect"));

	struct
	{
		TEnumAsByte<EObjectTypeQuery>  ObjectType;
	} params;

	params.ObjectType = ObjectType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.UpdateReflectionCapture
// (Final, Native, Public, BlueprintCallable)

void UReflectionCaptureComponent::UpdateReflectionCapture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.UpdateReflectionCapture"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.UpdateAllReflectionCaptures
// (Final, Native, Public, BlueprintCallable)

void UReflectionCaptureComponent::UpdateAllReflectionCaptures()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.UpdateAllReflectionCaptures"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetTint
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetTint(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetTint"));

	struct
	{
		struct FLinearColor            Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetShadowBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetShadowBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetShadowBrightness"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetLPVOcclusionBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetLPVOcclusionBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetLPVOcclusionBrightness"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetBrightness"));

	struct
	{
		float                          Value;
	} params;

	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent.HideComponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USceneCaptureComponent::HideComponent(class UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideComponent"));

	struct
	{
		class UPrimitiveComponent*     InComponent;
	} params;

	params.InComponent = InComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent.HideActorComponents
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InActor                        (Parm, ZeroConstructor, IsPlainOldData)

void USceneCaptureComponent::HideActorComponents(class AActor* InActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideActorComponents"));

	struct
	{
		class AActor*                  InActor;
	} params;

	params.InActor = InActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent2D.UpdateContent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void USceneCaptureComponent2D::UpdateContent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.UpdateContent"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneCaptureComponent2D::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable"));

	struct
	{
		TScriptInterface<class UBlendableInterface> InBlendableObject;
		float                          InWeight;
	} params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponentCube.UpdateContent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void USceneCaptureComponentCube::UpdateContent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponentCube.UpdateContent"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Stop
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Stop"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetTimelineLengthMode
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETimelineLengthMode> NewLengthMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLengthMode"));

	struct
	{
		TEnumAsByte<ETimelineLengthMode> NewLengthMode;
	} params;

	params.NewLengthMode = NewLengthMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetTimelineLength
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLength                      (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLength(float NewLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLength"));

	struct
	{
		float                          NewLength;
	} params;

	params.NewLength = NewLength;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetPlayRate
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRate                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlayRate(float NewRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlayRate"));

	struct
	{
		float                          NewRate;
	} params;

	params.NewRate = NewRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetPlaybackPosition
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireEvents                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireUpdate                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlaybackPosition"));

	struct
	{
		float                          NewPosition;
		bool                           bFireEvents;
		bool                           bFireUpdate;
	} params;

	params.NewPosition = NewPosition;
	params.bFireEvents = bFireEvents;
	params.bFireUpdate = bFireUpdate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetNewTime
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetNewTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetNewTime"));

	struct
	{
		float                          NewTime;
	} params;

	params.NewTime = NewTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetLooping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetLooping(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetLooping"));

	struct
	{
		bool                           bNewLooping;
	} params;

	params.bNewLooping = bNewLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.ReverseFromEnd
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::ReverseFromEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.ReverseFromEnd"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Reverse
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Reverse"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.PlayFromStart
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::PlayFromStart()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.PlayFromStart"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Play
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Play"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.OnRep_Timeline
// (Final, Native, Public)

void UTimelineComponent::OnRep_Timeline()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.OnRep_Timeline"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.IsReversing
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsReversing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsReversing"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsPlaying
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsPlaying"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsLooping
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsLooping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsLooping"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetTimelineLength
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetTimelineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetTimelineLength"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlayRate
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlayRate"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlaybackPosition
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlaybackPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlaybackPosition"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimSingleNodeInstance.StopAnim
// (Final, Native, Public, BlueprintCallable)

void UAnimSingleNodeInstance::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.StopAnim"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetVertexAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVertexAnimation*        NewVertexAnim                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetVertexAnimation"));

	struct
	{
		class UVertexAnimation*        NewVertexAnim;
		bool                           bIsLooping;
		float                          InPlayRate;
	} params;

	params.NewVertexAnim = NewVertexAnim;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetReverse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReverse                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetReverse(bool bInReverse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetReverse"));

	struct
	{
		bool                           bInReverse;
	} params;

	params.bInReverse = bInReverse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPosition"));

	struct
	{
		float                          InPosition;
		bool                           bFireNotifies;
	} params;

	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlayRate"));

	struct
	{
		float                          InPlayRate;
	} params;

	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsPlaying                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlaying"));

	struct
	{
		bool                           bIsPlaying;
	} params;

	params.bIsPlaying = bIsPlaying;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetLooping(bool bIsLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetLooping"));

	struct
	{
		bool                           bIsLooping;
	} params;

	params.bIsLooping = bIsLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InBlendInput                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UAnimSingleNodeInstance::SetBlendSpaceInput(const struct FVector& InBlendInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput"));

	struct
	{
		struct FVector                 InBlendInput;
	} params;

	params.InBlendInput = InBlendInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         NewAsset                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetAnimationAsset"));

	struct
	{
		class UAnimationAsset*         NewAsset;
		bool                           bIsLooping;
		float                          InPlayRate;
	} params;

	params.NewAsset = NewAsset;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.PlayAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InStartPosition                (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.PlayAnim"));

	struct
	{
		bool                           bIsLooping;
		float                          InPlayRate;
		float                          InStartPosition;
	} params;

	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;
	params.InStartPosition = InStartPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.GetLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimSingleNodeInstance::GetLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.GetLength"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState_Trail.OverridePSTemplate
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystem*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UParticleSystem* UAnimNotifyState_Trail::OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState_Trail.OverridePSTemplate"));

	struct
	{
		class USkeletalMeshComponent*  MeshComp;
		class UAnimSequenceBase*       Animation;
		class UParticleSystem*         ReturnValue;
	} params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.RegisterMovementComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMovementComponent*      MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          AvoidanceWeight                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAvoidanceManager::RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.RegisterMovementComponent"));

	struct
	{
		class UMovementComponent*      MovementComp;
		float                          AvoidanceWeight;
		bool                           ReturnValue;
	} params;

	params.MovementComp = MovementComp;
	params.AvoidanceWeight = AvoidanceWeight;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetObjectCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetObjectCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetObjectCount"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetNewAvoidanceUID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetNewAvoidanceUID()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetNewAvoidanceUID"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FNavAvoidanceData       AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            IgnoreThisUID                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UAvoidanceManager::GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID"));

	struct
	{
		struct FNavAvoidanceData       AvoidanceData;
		float                          DeltaTime;
		int                            IgnoreThisUID;
		struct FVector                 ReturnValue;
	} params;

	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;
	params.IgnoreThisUID = IgnoreThisUID;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMovementComponent*      MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent"));

	struct
	{
		class UMovementComponent*      MovementComp;
		struct FVector                 ReturnValue;
	} params;

	params.MovementComp = MovementComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocity
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FNavAvoidanceData       AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UAvoidanceManager::GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocity"));

	struct
	{
		struct FNavAvoidanceData       AvoidanceData;
		float                          DeltaTime;
		struct FVector                 ReturnValue;
	} params;

	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           OutRowNames                    (Parm, OutParm, ZeroConstructor)

void UDataTableFunctionLibrary::GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowNames"));

	struct
	{
		class UDataTable*              Table;
		TArray<struct FName>           OutRowNames;
	} params;

	params.Table = Table;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRowNames != nullptr)
		*OutRowNames = params.OutRowNames;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTableRowBase           OutRow                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDataTableFunctionLibrary::GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName"));

	struct
	{
		class UDataTable*              Table;
		struct FName                   RowName;
		struct FTableRowBase           OutRow;
		bool                           ReturnValue;
	} params;

	params.Table = Table;
	params.RowName = RowName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRow != nullptr)
		*OutRow = params.OutRow;

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UCurveTable*             CurveTable                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InXY                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEvaluateCurveTableResult> OutResult                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutXY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UDataTableFunctionLibrary::EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow"));

	struct
	{
		class UCurveTable*             CurveTable;
		struct FName                   RowName;
		float                          InXY;
		TEnumAsByte<EEvaluateCurveTableResult> OutResult;
		float                          OutXY;
	} params;

	params.CurveTable = CurveTable;
	params.RowName = RowName;
	params.InXY = InXY;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutResult != nullptr)
		*OutResult = params.OutResult;
	if (OutXY != nullptr)
		*OutXY = params.OutXY;
}


// Function Engine.DeformablesBlueprintFunctionLibrary.ApplyWorldForceToDeformables
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkinnedMeshComponent*   SkinnedMeshComp                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 WorldSpaceForce                (Parm, ZeroConstructor, IsPlainOldData)

void UDeformablesBlueprintFunctionLibrary::ApplyWorldForceToDeformables(class USkinnedMeshComponent* SkinnedMeshComp, const struct FVector& WorldSpaceForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DeformablesBlueprintFunctionLibrary.ApplyWorldForceToDeformables"));

	struct
	{
		class USkinnedMeshComponent*   SkinnedMeshComp;
		struct FVector                 WorldSpaceForce;
	} params;

	params.SkinnedMeshComp = SkinnedMeshComp;
	params.WorldSpaceForce = WorldSpaceForce;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.FeatureConfigBlueprintFunctionLibrary.IsFeatureEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   FeatureName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UFeatureConfigBlueprintFunctionLibrary::IsFeatureEnabled(const struct FName& FeatureName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FeatureConfigBlueprintFunctionLibrary.IsFeatureEnabled"));

	struct
	{
		struct FName                   FeatureName;
		bool                           ReturnValue;
	} params;

	params.FeatureName = FeatureName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.UnloadStreamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UGameplayStatics::UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.UnloadStreamLevel"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   LevelName;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SpawnSoundAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAttached"));

	struct
	{
		class USoundBase*              Sound;
		class USceneComponent*         AttachToComponent;
		struct FName                   AttachPointName;
		struct FVector                 Location;
		struct FRotator                Rotation;
		TEnumAsByte<EAttachLocation>   LocationType;
		bool                           bStopWhenAttachedToDestroyed;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
		class UAudioComponent*         ReturnValue;
	} params;

	params.Sound = Sound;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSoundAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundBase*              Sound;
		struct FVector                 Location;
		struct FRotator                Rotation;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
		class UAudioComponent*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSound2D
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSound2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundBase*              Sound;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class UAudioComponent*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                  ObjectClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UGameplayStatics::SpawnObject(class UClass* ObjectClass, class UObject* Outer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnObject"));

	struct
	{
		class UClass*                  ObjectClass;
		class UObject*                 Outer;
		class UObject*                 ReturnValue;
	} params;

	params.ObjectClass = ObjectClass;
	params.Outer = Outer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAttached"));

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		class USceneComponent*         AttachToComponent;
		struct FName                   AttachPointName;
		struct FVector                 Location;
		struct FRotator                Rotation;
		TEnumAsByte<EAttachLocation>   LocationType;
		bool                           bAutoDestroy;
		class UParticleSystemComponent* ReturnValue;
	} params;

	params.EmitterTemplate = EmitterTemplate;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bAutoDestroy = bAutoDestroy;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UParticleSystem*         EmitterTemplate;
		struct FVector                 Location;
		struct FRotator                Rotation;
		bool                           bAutoDestroy;
		class UParticleSystemComponent* ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.EmitterTemplate = EmitterTemplate;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bAutoDestroy = bAutoDestroy;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAttached
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAttached"));

	struct
	{
		class UDialogueWave*           Dialogue;
		struct FDialogueContext        Context;
		class USceneComponent*         AttachToComponent;
		struct FName                   AttachPointName;
		struct FVector                 Location;
		struct FRotator                Rotation;
		TEnumAsByte<EAttachLocation>   LocationType;
		bool                           bStopWhenAttachedToDestroyed;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
		class UAudioComponent*         ReturnValue;
	} params;

	params.Dialogue = Dialogue;
	params.Context = Context;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAtLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UDialogueWave*           Dialogue;
		struct FDialogueContext        Context;
		struct FVector                 Location;
		struct FRotator                Rotation;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
		class UAudioComponent*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogue2D
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogue2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UDialogueWave*           Dialogue;
		struct FDialogueContext        Context;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class UAudioComponent*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDecalComponent* UGameplayStatics::SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAttached"));

	struct
	{
		class UMaterialInterface*      DecalMaterial;
		struct FVector                 DecalSize;
		class USceneComponent*         AttachToComponent;
		struct FName                   AttachPointName;
		struct FVector                 Location;
		struct FRotator                Rotation;
		TEnumAsByte<EAttachLocation>   LocationType;
		float                          LifeSpan;
		class UDecalComponent*         ReturnValue;
	} params;

	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.LifeSpan = LifeSpan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDecalComponent* UGameplayStatics::SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialInterface*      DecalMaterial;
		struct FVector                 DecalSize;
		struct FVector                 Location;
		struct FRotator                Rotation;
		float                          LifeSpan;
		class UDecalComponent*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LifeSpan = LifeSpan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetWorldOriginLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetWorldOriginLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FIntVector              NewLocation;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.NewLocation = NewLocation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SetGlobalTimeDilation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeDilation                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGlobalTimeDilation"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          TimeDilation;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.TimeDilation = TimeDilation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SetGamePaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPaused                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SetGamePaused(class UObject* WorldContextObject, bool bPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGamePaused"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           bPaused;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.bPaused = bPaused;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetBaseSoundMix
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundMix*               InSoundMix                     (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetBaseSoundMix"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundMix*               InSoundMix;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMix = InSoundMix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SaveGameToSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USaveGame*               SaveGameObject                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SaveGameToSlot"));

	struct
	{
		class USaveGame*               SaveGameObject;
		class FString                  SlotName;
		int                            UserIndex;
		bool                           ReturnValue;
	} params;

	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.RemovePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDestroyPawn                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::RemovePlayer(class APlayerController* Player, bool bDestroyPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.RemovePlayer"));

	struct
	{
		class APlayerController*       Player;
		bool                           bDestroyPawn;
	} params;

	params.Player = Player;
	params.bDestroyPawn = bDestroyPawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PushSoundMixModifier
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PushSoundMixModifier"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundMix*               InSoundMixModifier;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ProjectWorldToScreen
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldPosition                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ProjectWorldToScreen"));

	struct
	{
		class APlayerController*       Player;
		struct FVector                 WorldPosition;
		struct FVector2D               ScreenPosition;
		bool                           ReturnValue;
	} params;

	params.Player = Player;
	params.WorldPosition = WorldPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PopSoundMixModifier
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PopSoundMixModifier"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundMix*               InSoundMixModifier;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayWorldCameraShake
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Epicenter                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InnerRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OuterRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOrientShakeTowardsEpicenter   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayWorldCameraShake"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  Shake;
		struct FVector                 Epicenter;
		float                          InnerRadius;
		float                          OuterRadius;
		float                          Falloff;
		bool                           bOrientShakeTowardsEpicenter;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Shake = Shake;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlaySoundAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySoundAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundBase*              Sound;
		struct FVector                 Location;
		struct FRotator                Rotation;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlaySound2D
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySound2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		class USoundBase*              Sound;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayDialogueAtLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogueAtLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UDialogueWave*           Dialogue;
		struct FDialogueContext        Context;
		struct FVector                 Location;
		struct FRotator                Rotation;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
		class USoundAttenuation*       AttenuationSettings;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayDialogue2D
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogue2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UDialogueWave*           Dialogue;
		struct FDialogueContext        Context;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          StartTime;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ParseOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Options                        (Parm, ZeroConstructor)
// class FString                  Key                            (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UGameplayStatics::ParseOption(const class FString& Options, const class FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ParseOption"));

	struct
	{
		class FString                  Options;
		class FString                  Key;
		class FString                  ReturnValue;
	} params;

	params.Options = Options;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.OpenLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Options                        (Parm, ZeroConstructor)

void UGameplayStatics::OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const class FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.OpenLevel"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   LevelName;
		bool                           bAbsolute;
		class FString                  Options;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.LoadStreamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMakeVisibleAfterLoad          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldBlockOnLoad             (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UGameplayStatics::LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadStreamLevel"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   LevelName;
		bool                           bMakeVisibleAfterLoad;
		bool                           bShouldBlockOnLoad;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.LoadGameFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::LoadGameFromSlot(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadGameFromSlot"));

	struct
	{
		class FString                  SlotName;
		int                            UserIndex;
		class USaveGame*               ReturnValue;
	} params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsGamePaused
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::IsGamePaused(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.IsGamePaused"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.HasOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Options                        (Parm, ZeroConstructor)
// class FString                  InKey                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::HasOption(const class FString& Options, const class FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.HasOption"));

	struct
	{
		class FString                  Options;
		class FString                  InKey;
		bool                           ReturnValue;
	} params;

	params.Options = Options;
	params.InKey = InKey;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GrassOverlappingSphereCount
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             StaticMesh                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CenterPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UGameplayStatics::GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GrassOverlappingSphereCount"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UStaticMesh*             StaticMesh;
		struct FVector                 CenterPosition;
		float                          Radius;
		int                            ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.StaticMesh = StaticMesh;
	params.CenterPosition = CenterPosition;
	params.Radius = Radius;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldOriginLocation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FIntVector UGameplayStatics::GetWorldOriginLocation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldOriginLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FIntVector              ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldDeltaSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetWorldDeltaSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldDeltaSeconds"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetSurfaceType
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<EPhysicalSurface>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPhysicalSurface> UGameplayStatics::GetSurfaceType(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetSurfaceType"));

	struct
	{
		struct FHitResult              Hit;
		TEnumAsByte<EPhysicalSurface>  ReturnValue;
	} params;

	params.Hit = Hit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetStreamingLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ULevelStreaming* UGameplayStatics::GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetStreamingLevel"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   PackageName;
		class ULevelStreaming*         ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetRealTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetRealTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetRealTimeSeconds"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UGameplayStatics::GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerPawn"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            PlayerIndex;
		class APawn*                   ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* UGameplayStatics::GetPlayerController(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerController"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            PlayerIndex;
		class APlayerController*       ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCharacter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACharacter* UGameplayStatics::GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCharacter"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            PlayerIndex;
		class ACharacter*              ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCameraManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerCameraManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerCameraManager* UGameplayStatics::GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCameraManager"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            PlayerIndex;
		class APlayerCameraManager*    ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlatformName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UGameplayStatics::GetPlatformName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlatformName"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetObjectClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UGameplayStatics::GetObjectClass(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetObjectClass"));

	struct
	{
		class UObject*                 Object;
		class UClass*                  ReturnValue;
	} params;

	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetKeyValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Pair                           (Parm, ZeroConstructor)
// class FString                  Key                            (Parm, OutParm, ZeroConstructor)
// class FString                  Value                          (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetKeyValue(const class FString& Pair, class FString* Key, class FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetKeyValue"));

	struct
	{
		class FString                  Pair;
		class FString                  Key;
		class FString                  Value;
	} params;

	params.Pair = Pair;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameplayStatics.GetIntOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Options                        (Parm, ZeroConstructor)
// class FString                  Key                            (Parm, ZeroConstructor)
// int                            DefaultValue                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UGameplayStatics::GetIntOption(const class FString& Options, const class FString& Key, int DefaultValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetIntOption"));

	struct
	{
		class FString                  Options;
		class FString                  Key;
		int                            DefaultValue;
		int                            ReturnValue;
	} params;

	params.Options = Options;
	params.Key = Key;
	params.DefaultValue = DefaultValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGlobalTimeDilation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetGlobalTimeDilation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGlobalTimeDilation"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class AGameState*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameState* UGameplayStatics::GetGameState(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameState"));

	struct
	{
		class UObject*                 WorldContextObject;
		class AGameState*              ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class AGameMode*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameMode* UGameplayStatics::GetGameMode(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameMode"));

	struct
	{
		class UObject*                 WorldContextObject;
		class AGameMode*               ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UGameInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGameInstance* UGameplayStatics::GetGameInstance(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameInstance"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UGameInstance*           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetCurrentLevelName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemovePrefixString            (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UGameplayStatics::GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetCurrentLevelName"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           bRemovePrefixString;
		class FString                  ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.bRemovePrefixString = bRemovePrefixString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAudioTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetAudioTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAudioTimeSeconds"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAllActorsWithInterface
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsWithInterface"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  Interface;
		TArray<class AActor*>          OutActors;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetAllActorsOfClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsOfClass"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  ActorClass;
		TArray<class AActor*>          OutActors;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetActorArrayBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayBounds"));

	struct
	{
		TArray<class AActor*>          Actors;
		bool                           bOnlyCollidingComponents;
		struct FVector                 Center;
		struct FVector                 BoxExtent;
	} params;

	params.Actors = Actors;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Center != nullptr)
		*Center = params.Center;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.GameplayStatics.GetActorArrayAverageLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UGameplayStatics::GetActorArrayAverageLocation(TArray<class AActor*> Actors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayAverageLocation"));

	struct
	{
		TArray<class AActor*>          Actors;
		struct FVector                 ReturnValue;
	} params;

	params.Actors = Actors;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAccurateRealTime
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          PartialSeconds                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAccurateRealTime"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            Seconds;
		float                          PartialSeconds;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (PartialSeconds != nullptr)
		*PartialSeconds = params.PartialSeconds;
}


// Function Engine.GameplayStatics.FlushLevelStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::FlushLevelStreaming(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FlushLevelStreaming"));

	struct
	{
		class UObject*                 WorldContextObject;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.FinishSpawningActor
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FinishSpawningActor"));

	struct
	{
		class AActor*                  Actor;
		struct FTransform              SpawnTransform;
		class AActor*                  ReturnValue;
	} params;

	params.Actor = Actor;
	params.SpawnTransform = SpawnTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.EnableLiveStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::EnableLiveStreaming(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.EnableLiveStreaming"));

	struct
	{
		bool                           Enable;
	} params;

	params.Enable = Enable;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.DoesSaveGameExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DoesSaveGameExist(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DoesSaveGameExist"));

	struct
	{
		class FString                  SlotName;
		int                            UserIndex;
		bool                           ReturnValue;
	} params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeprojectScreenToWorld
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeprojectScreenToWorld"));

	struct
	{
		class APlayerController*       Player;
		struct FVector2D               ScreenPosition;
		struct FVector                 WorldPosition;
		struct FVector                 WorldDirection;
		bool                           ReturnValue;
	} params;

	params.Player = Player;
	params.ScreenPosition = ScreenPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeleteGameInSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DeleteGameInSlot(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeleteGameInSlot"));

	struct
	{
		class FString                  SlotName;
		int                            UserIndex;
		bool                           ReturnValue;
	} params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeactivateReverbEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeactivateReverbEffect"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   TagName;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.TagName = TagName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprint*              SaveGameBlueprint              (Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint"));

	struct
	{
		class UBlueprint*              SaveGameBlueprint;
		class USaveGame*               ReturnValue;
	} params;

	params.SaveGameBlueprint = SaveGameBlueprint;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreateSaveGameObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                  SaveGameClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::CreateSaveGameObject(class UClass* SaveGameClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSaveGameObject"));

	struct
	{
		class UClass*                  SaveGameClass;
		class USaveGame*               ReturnValue;
	} params;

	params.SaveGameClass = SaveGameClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreatePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSpawnPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* UGameplayStatics::CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreatePlayer"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            ControllerId;
		bool                           bSpawnPawn;
		class APlayerController*       ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;
	params.bSpawnPawn = bSpawnPawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ClearSoundMixModifiers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ClearSoundMixModifiers(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ClearSoundMixModifiers"));

	struct
	{
		class UObject*                 WorldContextObject;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.BreakHitResult
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bBlockingHit                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bInitialOverlap                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactNormal                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPhysicalMaterial*       PhysMat                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HitActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   HitBoneName                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            HitItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceStart                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, struct FVector* TraceStart, struct FVector* TraceEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BreakHitResult"));

	struct
	{
		struct FHitResult              Hit;
		bool                           bBlockingHit;
		bool                           bInitialOverlap;
		float                          Time;
		struct FVector                 Location;
		struct FVector                 ImpactPoint;
		struct FVector                 Normal;
		struct FVector                 ImpactNormal;
		class UPhysicalMaterial*       PhysMat;
		class AActor*                  HitActor;
		class UPrimitiveComponent*     HitComponent;
		struct FName                   HitBoneName;
		int                            HitItem;
		struct FVector                 TraceStart;
		struct FVector                 TraceEnd;
	} params;

	params.Hit = Hit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (bBlockingHit != nullptr)
		*bBlockingHit = params.bBlockingHit;
	if (bInitialOverlap != nullptr)
		*bInitialOverlap = params.bInitialOverlap;
	if (Time != nullptr)
		*Time = params.Time;
	if (Location != nullptr)
		*Location = params.Location;
	if (ImpactPoint != nullptr)
		*ImpactPoint = params.ImpactPoint;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (ImpactNormal != nullptr)
		*ImpactNormal = params.ImpactNormal;
	if (PhysMat != nullptr)
		*PhysMat = params.PhysMat;
	if (HitActor != nullptr)
		*HitActor = params.HitActor;
	if (HitComponent != nullptr)
		*HitComponent = params.HitComponent;
	if (HitBoneName != nullptr)
		*HitBoneName = params.HitBoneName;
	if (HitItem != nullptr)
		*HitItem = params.HitItem;
	if (TraceStart != nullptr)
		*TraceStart = params.TraceStart;
	if (TraceEnd != nullptr)
		*TraceEnd = params.TraceEnd;
}


// Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TossVelocity                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LaunchSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          CollisionRadius                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFavorHighArc                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 TossVelocity;
		struct FVector                 StartLocation;
		struct FVector                 EndLocation;
		float                          LaunchSpeed;
		float                          OverrideGravityZ;
		TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption;
		float                          CollisionRadius;
		bool                           bFavorHighArc;
		bool                           bDrawDebug;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.LaunchSpeed = LaunchSpeed;
	params.OverrideGravityZ = OverrideGravityZ;
	params.TraceOption = TraceOption;
	params.CollisionRadius = CollisionRadius;
	params.bFavorHighArc = bFavorHighArc;
	params.bDrawDebug = bDrawDebug;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromClass
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromClass"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  ActorClass;
		struct FTransform              SpawnTransform;
		bool                           bNoCollisionFail;
		class AActor*                  Owner;
		class AActor*                  ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;
	params.Owner = Owner;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UBlueprint*              Blueprint                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UBlueprint*              Blueprint;
		struct FTransform              SpawnTransform;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Blueprint = Blueprint;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  ActorClass;
		struct FTransform              SpawnTransform;
		TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride;
		class AActor*                  Owner;
		class AActor*                  ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.CollisionHandlingOverride = CollisionHandlingOverride;
	params.Owner = Owner;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AreAnyListenersWithinRange
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaximumRange                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.AreAnyListenersWithinRange"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Location;
		float                          MaximumRange;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.MaximumRange = MaximumRange;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinimumDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageInnerRadius              (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageOuterRadius              (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageFalloff                  (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          BaseDamage;
		float                          MinimumDamage;
		struct FVector                 Origin;
		float                          DamageInnerRadius;
		float                          DamageOuterRadius;
		float                          DamageFalloff;
		class UClass*                  DamageTypeClass;
		TArray<class AActor*>          IgnoreActors;
		class AActor*                  DamageCauser;
		class AController*             InstigatedByController;
		TEnumAsByte<ECollisionChannel> DamagePreventionChannel;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.MinimumDamage = MinimumDamage;
	params.Origin = Origin;
	params.DamageInnerRadius = DamageInnerRadius;
	params.DamageOuterRadius = DamageOuterRadius;
	params.DamageFalloff = DamageFalloff;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.DamagePreventionChannel = DamagePreventionChannel;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoFullDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamage"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          BaseDamage;
		struct FVector                 Origin;
		float                          DamageRadius;
		class UClass*                  DamageTypeClass;
		TArray<class AActor*>          IgnoreActors;
		class AActor*                  DamageCauser;
		class AController*             InstigatedByController;
		bool                           bDoFullDamage;
		TEnumAsByte<ECollisionChannel> DamagePreventionChannel;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyPointDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitFromDirection               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyPointDamage"));

	struct
	{
		class AActor*                  DamagedActor;
		float                          BaseDamage;
		struct FVector                 HitFromDirection;
		struct FHitResult              HitInfo;
		class AController*             EventInstigator;
		class AActor*                  DamageCauser;
		class UClass*                  DamageTypeClass;
	} params;

	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.HitFromDirection = HitFromDirection;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ApplyDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyDamage"));

	struct
	{
		class AActor*                  DamagedActor;
		float                          BaseDamage;
		class AController*             EventInstigator;
		class AActor*                  DamageCauser;
		class UClass*                  DamageTypeClass;
	} params;

	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ActivateReverbEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UReverbEffect*           ReverbEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ActivateReverbEffect"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UReverbEffect*           ReverbEffect;
		struct FName                   TagName;
		float                          Priority;
		float                          Volume;
		float                          FadeTime;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.ReverbEffect = ReverbEffect;
	params.TagName = TagName;
	params.Priority = Priority;
	params.Volume = Volume;
	params.FadeTime = FadeTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GPUSortTestLibrary.ValidateGPUTransposeForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class UGPUSortDestData*        TestData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGPUSortTestLibrary::ValidateGPUTransposeForSize(class UObject* WorldContext, class UGPUSortDestData* TestData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.ValidateGPUTransposeForSize"));

	struct
	{
		class UObject*                 WorldContext;
		class UGPUSortDestData*        TestData;
		bool                           ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.TestData = TestData;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.ValidateGPUSortForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class UGPUSortDestData*        TestData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGPUSortTestLibrary::ValidateGPUSortForSize(class UObject* WorldContext, class UGPUSortDestData* TestData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.ValidateGPUSortForSize"));

	struct
	{
		class UObject*                 WorldContext;
		class UGPUSortDestData*        TestData;
		bool                           ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.TestData = TestData;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.TestGPUTransposeForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)
// class UGPUSortDestData*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGPUSortDestData* UGPUSortTestLibrary::TestGPUTransposeForSize(class UObject* WorldContext, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.TestGPUTransposeForSize"));

	struct
	{
		class UObject*                 WorldContext;
		int                            Size;
		class UGPUSortDestData*        ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.TestGPUSortForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)
// class UGPUSortDestData*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGPUSortDestData* UGPUSortTestLibrary::TestGPUSortForSize(class UObject* WorldContext, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.TestGPUSortForSize"));

	struct
	{
		class UObject*                 WorldContext;
		int                            Size;
		class UGPUSortDestData*        ReturnValue;
	} params;

	params.WorldContext = WorldContext;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.SetArrayPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.SetArrayPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		TArray<int>                    Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.FilterArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          FilteredArray                  (Parm, OutParm, ZeroConstructor)

void UKismetArrayLibrary::FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.FilterArray"));

	struct
	{
		TArray<class AActor*>          TargetArray;
		class UClass*                  FilterClass;
		TArray<class AActor*>          FilteredArray;
	} params;

	params.TargetArray = TargetArray;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (FilteredArray != nullptr)
		*FilteredArray = params.FilteredArray;
}


// Function Engine.KismetArrayLibrary.Array_Shuffle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Shuffle(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Shuffle"));

	struct
	{
		TArray<int>                    TargetArray;
	} params;

	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Set
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bSizeToFit                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Set"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            Index;
		int                            Item;
		bool                           bSizeToFit;
	} params;

	params.TargetArray = TargetArray;
	params.Index = Index;
	params.Item = Item;
	params.bSizeToFit = bSizeToFit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Resize
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Resize(TArray<int> TargetArray, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Resize"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            Size;
	} params;

	params.TargetArray = TargetArray;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_RemoveItem
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_RemoveItem(TArray<int> TargetArray, int Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_RemoveItem"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            Item;
		bool                           ReturnValue;
	} params;

	params.TargetArray = TargetArray;
	params.Item = Item;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Remove
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexToRemove                  (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Remove(TArray<int> TargetArray, int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Remove"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            IndexToRemove;
	} params;

	params.TargetArray = TargetArray;
	params.IndexToRemove = IndexToRemove;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Length
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Length(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Length"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            ReturnValue;
	} params;

	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_LastIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_LastIndex(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_LastIndex"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            ReturnValue;
	} params;

	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Insert
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Insert(TArray<int> TargetArray, int NewItem, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Insert"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            NewItem;
		int                            Index;
	} params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Get
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Get(TArray<int> TargetArray, int Index, int* Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Get"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            Index;
		int                            Item;
	} params;

	params.TargetArray = TargetArray;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Item != nullptr)
		*Item = params.Item;
}


// Function Engine.KismetArrayLibrary.Array_Find
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Find(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Find"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            ItemToFind;
		int                            ReturnValue;
	} params;

	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Contains
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_Contains(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Contains"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            ItemToFind;
		bool                           ReturnValue;
	} params;

	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Clear
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Clear(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Clear"));

	struct
	{
		TArray<int>                    TargetArray;
	} params;

	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Append
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int>                    SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Append(TArray<int> TargetArray, TArray<int> SourceArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Append"));

	struct
	{
		TArray<int>                    TargetArray;
		TArray<int>                    SourceArray;
	} params;

	params.TargetArray = TargetArray;
	params.SourceArray = SourceArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_AddUnique
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_AddUnique(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_AddUnique"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            NewItem;
		int                            ReturnValue;
	} params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Add
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Add(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Add"));

	struct
	{
		TArray<int>                    TargetArray;
		int                            NewItem;
		int                            ReturnValue;
	} params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Parse_StringToGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  GuidString                     (Parm, ZeroConstructor)
// struct FGuid                   OutGuid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Success                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetGuidLibrary::Parse_StringToGuid(const class FString& GuidString, struct FGuid* OutGuid, bool* Success)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Parse_StringToGuid"));

	struct
	{
		class FString                  GuidString;
		struct FGuid                   OutGuid;
		bool                           Success;
	} params;

	params.GuidString = GuidString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutGuid != nullptr)
		*OutGuid = params.OutGuid;
	if (Success != nullptr)
		*Success = params.Success;
}


// Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                   A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FGuid                   B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NotEqual_GuidGuid"));

	struct
	{
		struct FGuid                   A;
		struct FGuid                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.NewGuid
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FGuid UKismetGuidLibrary::NewGuid()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NewGuid"));

	struct
	{
		struct FGuid                   ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.IsValid_Guid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                   InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::IsValid_Guid(const struct FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.IsValid_Guid"));

	struct
	{
		struct FGuid                   InGuid;
		bool                           ReturnValue;
	} params;

	params.InGuid = InGuid;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Invalidate_Guid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                   InGuid                         (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetGuidLibrary::Invalidate_Guid(struct FGuid* InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Invalidate_Guid"));

	struct
	{
		struct FGuid                   InGuid;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InGuid != nullptr)
		*InGuid = params.InGuid;
}


// Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                   A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FGuid                   B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid"));

	struct
	{
		struct FGuid                   A;
		struct FGuid                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Conv_GuidToString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                   InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetGuidLibrary::Conv_GuidToString(const struct FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Conv_GuidToString"));

	struct
	{
		struct FGuid                   InGuid;
		class FString                  ReturnValue;
	} params;

	params.InGuid = InGuid;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsTouchEvent(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent"));

	struct
	{
		struct FPointerEvent           Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    MouseButton                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown"));

	struct
	{
		struct FPointerEvent           Input;
		struct FKey                    MouseButton;
		bool                           ReturnValue;
	} params;

	params.Input = Input;
	params.MouseButton = MouseButton;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::PointerEvent_GetWheelDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta"));

	struct
	{
		struct FPointerEvent           Input;
		float                          ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetUserIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex"));

	struct
	{
		struct FPointerEvent           Input;
		int                            ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex"));

	struct
	{
		struct FPointerEvent           Input;
		int                            ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition"));

	struct
	{
		struct FPointerEvent           Input;
		struct FVector2D               ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetPointerIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex"));

	struct
	{
		struct FPointerEvent           Input;
		int                            ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition"));

	struct
	{
		struct FPointerEvent           Input;
		struct FVector2D               ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetGestureDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta"));

	struct
	{
		struct FPointerEvent           Input;
		struct FVector2D               ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::PointerEvent_GetEffectingButton(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton"));

	struct
	{
		struct FPointerEvent           Input;
		struct FKey                    ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetCursorDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta"));

	struct
	{
		struct FPointerEvent           Input;
		struct FVector2D               ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsVectorAxis
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsVectorAxis(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsVectorAxis"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsMouseButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsMouseButton(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsMouseButton"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsModifierKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsModifierKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsModifierKey"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsKeyboardKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsKeyboardKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsKeyboardKey"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsGamepadKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsGamepadKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsGamepadKey"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsFloatAxis
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsFloatAxis(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsFloatAxis"));

	struct
	{
		struct FKey                    Key;
		bool                           ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetDisplayName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetInputLibrary::Key_GetDisplayName(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetDisplayName"));

	struct
	{
		struct FKey                    Key;
		struct FText                   ReturnValue;
	} params;

	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsShiftDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRepeat
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRepeat(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRepeat"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsControlDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsCommandDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsAltDown"));

	struct
	{
		struct FInputEvent             Input;
		bool                           ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FKeyEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::GetUserIndex(const struct FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetUserIndex"));

	struct
	{
		struct FKeyEvent               Input;
		int                            ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FKeyEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::GetKey(const struct FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetKey"));

	struct
	{
		struct FKeyEvent               Input;
		struct FKey                    ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetAnalogValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent       Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::GetAnalogValue(const struct FAnalogInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetAnalogValue"));

	struct
	{
		struct FAnalogInputEvent       Input;
		float                          ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.EqualEqual_KeyKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                    A                              (Parm)
// struct FKey                    B                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.EqualEqual_KeyKey"));

	struct
	{
		struct FKey                    A;
		struct FKey                    B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::ControllerEvent_GetUserIndex(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex"));

	struct
	{
		struct FControllerEvent        Input;
		int                            ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton"));

	struct
	{
		struct FControllerEvent        Input;
		struct FKey                    ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue"));

	struct
	{
		struct FControllerEvent        Input;
		float                          ReturnValue;
	} params;

	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.CalibrateTilt
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetInputLibrary::CalibrateTilt()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.CalibrateTilt"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.SetVectorParameterValue
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ParameterValue                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetMaterialLibrary::SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetVectorParameterValue"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialParameterCollection* Collection;
		struct FName                   ParameterName;
		struct FLinearColor            ParameterValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.SetScalarParameterValue
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ParameterValue                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMaterialLibrary::SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetScalarParameterValue"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialParameterCollection* Collection;
		struct FName                   ParameterName;
		float                          ParameterValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.GetVectorParameterValue
// (Final, RequiredAPI, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMaterialLibrary::GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetVectorParameterValue"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialParameterCollection* Collection;
		struct FName                   ParameterName;
		struct FLinearColor            ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.GetScalarParameterValue
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMaterialLibrary::GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetScalarParameterValue"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialParameterCollection* Collection;
		struct FName                   ParameterName;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UKismetMaterialLibrary::CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UMaterialInterface*      Parent;
		class UMaterialInstanceDynamic* ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Parent = Parent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Xor_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Xor_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Xor_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeSquared
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSizeSquared(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSizeSquared"));

	struct
	{
		struct FVector                 A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2DSquared
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize2DSquared(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2DSquared"));

	struct
	{
		struct FVector2D               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2D"));

	struct
	{
		struct FVector2D               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize"));

	struct
	{
		struct FVector                 A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VLerp(const struct FVector& A, const struct FVector& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VLerp"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		float                          Alpha;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo_Constant"));

	struct
	{
		struct FVector                 Current;
		struct FVector                 Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FVector                 ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo"));

	struct
	{
		struct FVector                 Current;
		struct FVector                 Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FVector                 ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant"));

	struct
	{
		struct FVector2D               Current;
		struct FVector2D               Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FVector2D               ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2DInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo"));

	struct
	{
		struct FVector2D               Current;
		struct FVector2D               Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FVector2D               ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VEase
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VEase"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		float                          Alpha;
		TEnumAsByte<EEasingFunc>       EasingFunc;
		float                          BlendExp;
		int                            Steps;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.UtcNow
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::UtcNow()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.UtcNow"));

	struct
	{
		struct FDateTime               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::TransformLocation(const struct FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformLocation"));

	struct
	{
		struct FTransform              T;
		struct FVector                 Location;
		struct FVector                 ReturnValue;
	} params;

	params.T = T;
	params.Location = Location;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformDirection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::TransformDirection(const struct FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformDirection"));

	struct
	{
		struct FTransform              T;
		struct FVector                 Direction;
		struct FVector                 ReturnValue;
	} params;

	params.T = T;
	params.Direction = Direction;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Today
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Today()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Today"));

	struct
	{
		struct FDateTime               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TLerp
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TLerp"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		float                          Alpha;
		struct FTransform              ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TInterpTo
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              Current                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TInterpTo"));

	struct
	{
		struct FTransform              Current;
		struct FTransform              Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FTransform              ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanZeroValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanZeroValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanZeroValue"));

	struct
	{
		struct FTimespan               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanRatio
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::TimespanRatio(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanRatio"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMinValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMinValue"));

	struct
	{
		struct FTimespan               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMaxValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMaxValue"));

	struct
	{
		struct FTimespan               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanFromString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  TimespanString                 (Parm, ZeroConstructor)
// struct FTimespan               Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::TimespanFromString(const class FString& TimespanString, struct FTimespan* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanFromString"));

	struct
	{
		class FString                  TimespanString;
		struct FTimespan               Result;
		bool                           ReturnValue;
	} params;

	params.TimespanString = TimespanString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TEase
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TEase"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		float                          Alpha;
		TEnumAsByte<EEasingFunc>       EasingFunc;
		float                          BlendExp;
		int                            Steps;
		struct FTransform              ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Tan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Tan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Tan"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Subtract_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Subtract_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorInt"));

	struct
	{
		struct FVector                 A;
		int                            B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Subtract_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorFloat"));

	struct
	{
		struct FVector                 A;
		float                          B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D"));

	struct
	{
		struct FVector2D               A;
		struct FVector2D               B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat"));

	struct
	{
		struct FVector2D               A;
		float                          B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Subtract_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Subtract_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan"));

	struct
	{
		struct FDateTime               A;
		struct FTimespan               B;
		struct FDateTime               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Subtract_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		unsigned char                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Square
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Square(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Square"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sqrt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sqrt(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sqrt"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sin"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SignOfInteger(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfInteger"));

	struct
	{
		int                            A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SignOfFloat(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfFloat"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SetRandomStreamSeed
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewSeed                        (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SetRandomStreamSeed"));

	struct
	{
		struct FRandomStream           Stream;
		int                            NewSeed;
	} params;

	params.NewSeed = NewSeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.SelectVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		bool                           bPickA;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectTransform"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		bool                           bPickA;
		struct FTransform              ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetMathLibrary::SelectString(const class FString& A, const class FString& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectString"));

	struct
	{
		class FString                  A;
		class FString                  B;
		bool                           bPickA;
		class FString                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectRotator"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		bool                           bPickA;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UKismetMathLibrary::SelectObject(class UObject* A, class UObject* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectObject"));

	struct
	{
		class UObject*                 A;
		class UObject*                 B;
		bool                           bSelectA;
		class UObject*                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SelectInt(int A, int B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           bPickA;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           bPickA;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectColor"));

	struct
	{
		struct FLinearColor            A;
		struct FLinearColor            B;
		bool                           bPickA;
		struct FLinearColor            ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UKismetMathLibrary::SelectClass(class UClass* A, class UClass* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectClass"));

	struct
	{
		class UClass*                  A;
		class UClass*                  B;
		bool                           bSelectA;
		class UClass*                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SeedRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::SeedRandomStream(struct FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SeedRandomStream"));

	struct
	{
		struct FRandomStream           Stream;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.Round
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Round(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Round"));

	struct
	{
		float                          A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle"));

	struct
	{
		struct FVector                 Axis;
		float                          Angle;
		struct FRotator                ReturnValue;
	} params;

	params.Axis = Axis;
	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotateAngleAxis
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleDeg                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotateAngleAxis"));

	struct
	{
		struct FVector                 InVect;
		float                          AngleDeg;
		struct FVector                 Axis;
		struct FVector                 ReturnValue;
	} params;

	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.Axis = Axis;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RLerp"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		float                          Alpha;
		bool                           bShortestPath;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo_Constant"));

	struct
	{
		struct FRotator                Current;
		struct FRotator                Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FRotator                ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo"));

	struct
	{
		struct FRotator                Current;
		struct FRotator                Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FRotator                ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RGBToHSV_Vector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            RGB                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HSV                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV_Vector"));

	struct
	{
		struct FLinearColor            RGB;
		struct FLinearColor            HSV;
	} params;

	params.RGB = RGB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (HSV != nullptr)
		*HSV = params.HSV;
}


// Function Engine.KismetMathLibrary.RGBToHSV
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          H                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV"));

	struct
	{
		struct FLinearColor            InColor;
		float                          H;
		float                          S;
		float                          V;
		float                          A;
	} params;

	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (H != nullptr)
		*H = params.H;
	if (S != nullptr)
		*S = params.S;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.ResetRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::ResetRandomStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ResetRandomStream"));

	struct
	{
		struct FRandomStream           Stream;
	} params;

	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMathLibrary.REase
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.REase"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		float                          Alpha;
		bool                           bShortestPath;
		TEnumAsByte<EEasingFunc>       EasingFunc;
		float                          BlendExp;
		int                            Steps;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxYawInDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxPitchInDegrees              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch"));

	struct
	{
		struct FVector                 ConeDir;
		float                          MaxYawInDegrees;
		float                          MaxPitchInDegrees;
		struct FVector                 ReturnValue;
	} params;

	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInCone
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ConeHalfAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInCone"));

	struct
	{
		struct FVector                 ConeDir;
		float                          ConeHalfAngle;
		struct FVector                 ReturnValue;
	} params;

	params.ConeDir = ConeDir;
	params.ConeHalfAngle = ConeHalfAngle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVectorFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream"));

	struct
	{
		struct FRandomStream           Stream;
		struct FVector                 ReturnValue;
	} params;

	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVector"));

	struct
	{
		struct FVector                 ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotatorFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotatorFromStream"));

	struct
	{
		bool                           bRoll;
		struct FRandomStream           Stream;
		struct FRotator                ReturnValue;
	} params;

	params.bRoll = bRoll;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RandomRotator(bool bRoll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotator"));

	struct
	{
		bool                           bRoll;
		struct FRotator                ReturnValue;
	} params;

	params.bRoll = bRoll;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomPointInBoundingBox
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 BoxExtent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomPointInBoundingBox"));

	struct
	{
		struct FVector                 Origin;
		struct FVector                 BoxExtent;
		struct FVector                 ReturnValue;
	} params;

	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream"));

	struct
	{
		int                            Min;
		int                            Max;
		struct FRandomStream           Stream;
		int                            ReturnValue;
	} params;

	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRange(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRange"));

	struct
	{
		int                            Min;
		int                            Max;
		int                            ReturnValue;
	} params;

	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerFromStream(int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerFromStream"));

	struct
	{
		int                            Max;
		struct FRandomStream           Stream;
		int                            ReturnValue;
	} params;

	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomInteger(int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomInteger"));

	struct
	{
		int                            Max;
		int                            ReturnValue;
	} params;

	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream"));

	struct
	{
		float                          Min;
		float                          Max;
		struct FRandomStream           Stream;
		float                          ReturnValue;
	} params;

	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRange(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRange"));

	struct
	{
		float                          Min;
		float                          Max;
		float                          ReturnValue;
	} params;

	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatFromStream"));

	struct
	{
		struct FRandomStream           Stream;
		float                          ReturnValue;
	} params;

	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloat()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloat"));

	struct
	{
		float                          ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBoolFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBoolFromStream"));

	struct
	{
		struct FRandomStream           Stream;
		bool                           ReturnValue;
	} params;

	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBool()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBool"));

	struct
	{
		bool                           ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RadiansToDegrees
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RadiansToDegrees(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RadiansToDegrees"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToVector"));

	struct
	{
		struct FVector                 V;
		struct FVector                 Target;
		struct FVector                 ReturnValue;
	} params;

	params.V = V;
	params.Target = Target;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane"));

	struct
	{
		struct FVector                 V;
		struct FVector                 PlaneNormal;
		struct FVector                 ReturnValue;
	} params;

	params.V = V;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectPointOnToPlane
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneBase                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectPointOnToPlane"));

	struct
	{
		struct FVector                 Point;
		struct FVector                 PlaneBase;
		struct FVector                 PlaneNormal;
		struct FVector                 ReturnValue;
	} params;

	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.PointsAreCoplanar
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.PointsAreCoplanar"));

	struct
	{
		TArray<struct FVector>         Points;
		float                          Tolerance;
		bool                           ReturnValue;
	} params;

	params.Points = Points;
	params.Tolerance = Tolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Percent_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Percent_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Percent_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		unsigned char                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Or_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Or_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Or_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Now
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Now()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Now"));

	struct
	{
		struct FDateTime               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		float                          ErrorTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		float                          ErrorTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ObjectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ObjectObject"));

	struct
	{
		class UObject*                 A;
		class UObject*                 B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_NameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_NameName"));

	struct
	{
		struct FName                   A;
		struct FName                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ClassClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ClassClass"));

	struct
	{
		class UClass*                  A;
		class UClass*                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_BoolBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_BoolBool"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_PreBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Not_PreBool(bool A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Not_PreBool"));

	struct
	{
		bool                           A;
		bool                           ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeToRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMin                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMax                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeToRange"));

	struct
	{
		float                          Value;
		float                          RangeMin;
		float                          RangeMax;
		float                          ReturnValue;
	} params;

	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizedDeltaRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizedDeltaRotator"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::NormalizeAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeAxis"));

	struct
	{
		float                          Angle;
		float                          ReturnValue;
	} params;

	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Normal2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal2D"));

	struct
	{
		struct FVector2D               A;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Normal(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal"));

	struct
	{
		struct FVector                 A;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::NegateVector(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::NegateRotator(const struct FRotator& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateRotator"));

	struct
	{
		struct FRotator                A;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LocationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale3DTolerance               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		float                          LocationTolerance;
		float                          RotationTolerance;
		float                          Scale3DTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.LocationTolerance = LocationTolerance;
	params.RotationTolerance = RotationTolerance;
	params.Scale3DTolerance = Scale3DTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ErrorTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Base                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat"));

	struct
	{
		float                          Base;
		float                          Exp;
		float                          ReturnValue;
	} params;

	params.Base = Base;
	params.Exp = Exp;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyByPi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyByPi(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyByPi"));

	struct
	{
		float                          Value;
		float                          ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Multiply_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Multiply_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorInt"));

	struct
	{
		struct FVector                 A;
		int                            B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Multiply_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorFloat"));

	struct
	{
		struct FVector                 A;
		float                          B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat"));

	struct
	{
		struct FVector2D               A;
		float                          B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_TimespanFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Multiply_TimespanFloat(const struct FTimespan& A, float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_TimespanFloat"));

	struct
	{
		struct FTimespan               A;
		float                          Scalar;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;
	params.Scalar = Scalar;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::Multiply_RotatorInt(const struct FRotator& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorInt"));

	struct
	{
		struct FRotator                A;
		int                            B;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::Multiply_RotatorFloat(const struct FRotator& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorFloat"));

	struct
	{
		struct FRotator                A;
		float                          B;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor"));

	struct
	{
		struct FLinearColor            A;
		struct FLinearColor            B;
		struct FLinearColor            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(const struct FLinearColor& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat"));

	struct
	{
		struct FLinearColor            A;
		float                          B;
		struct FLinearColor            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Multiply_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_IntFloat(int A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntFloat"));

	struct
	{
		int                            A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Multiply_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		unsigned char                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MirrorVectorByNormal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InNormal                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MirrorVectorByNormal"));

	struct
	{
		struct FVector                 InVect;
		struct FVector                 InNormal;
		struct FVector                 ReturnValue;
	} params;

	params.InVect = InVect;
	params.InNormal = InNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MinOfIntArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfIntArray"));

	struct
	{
		TArray<int>                    IntArray;
		int                            IndexOfMinValue;
		int                            MinValue;
	} params;

	params.IntArray = IntArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfFloatArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfFloatArray"));

	struct
	{
		TArray<float>                  FloatArray;
		int                            IndexOfMinValue;
		float                          MinValue;
	} params;

	params.FloatArray = FloatArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfByteArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfByteArray"));

	struct
	{
		TArray<unsigned char>          ByteArray;
		int                            IndexOfMinValue;
		unsigned char                  MinValue;
	} params;

	params.ByteArray = ByteArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinimumAreaRectangle
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         InVerts                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 SampleSurfaceNormal            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 OutRectCenter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRectRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthX                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthY                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinimumAreaRectangle"));

	struct
	{
		class UObject*                 WorldContextObject;
		TArray<struct FVector>         InVerts;
		struct FVector                 SampleSurfaceNormal;
		struct FVector                 OutRectCenter;
		struct FRotator                OutRectRotation;
		float                          OutSideLengthX;
		float                          OutSideLengthY;
		bool                           bDebugDraw;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRectCenter != nullptr)
		*OutRectCenter = params.OutRectCenter;
	if (OutRectRotation != nullptr)
		*OutRectRotation = params.OutRectRotation;
	if (OutSideLengthX != nullptr)
		*OutSideLengthX = params.OutSideLengthX;
	if (OutSideLengthY != nullptr)
		*OutSideLengthY = params.OutSideLengthY;
}


// Function Engine.KismetMathLibrary.Min
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Min(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Min"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MaxOfIntArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfIntArray"));

	struct
	{
		TArray<int>                    IntArray;
		int                            IndexOfMaxValue;
		int                            MaxValue;
	} params;

	params.IntArray = IntArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfFloatArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfFloatArray"));

	struct
	{
		TArray<float>                  FloatArray;
		int                            IndexOfMaxValue;
		float                          MaxValue;
	} params;

	params.FloatArray = FloatArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfByteArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfByteArray"));

	struct
	{
		TArray<unsigned char>          ByteArray;
		int                            IndexOfMaxValue;
		unsigned char                  MaxValue;
	} params;

	params.ByteArray = ByteArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.Max
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Max(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Max"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeUnclamped
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeUnclamped"));

	struct
	{
		float                          Value;
		float                          InRangeA;
		float                          InRangeB;
		float                          OutRangeA;
		float                          OutRangeB;
		float                          ReturnValue;
	} params;

	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeClamped
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeClamped"));

	struct
	{
		float                          Value;
		float                          InRangeA;
		float                          InRangeB;
		float                          OutRangeA;
		float                          OutRangeB;
		float                          ReturnValue;
	} params;

	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector2D"));

	struct
	{
		float                          X;
		float                          Y;
		struct FVector2D               ReturnValue;
	} params;

	params.X = X;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector"));

	struct
	{
		float                          X;
		float                          Y;
		float                          Z;
		struct FVector                 ReturnValue;
	} params;

	params.X = X;
	params.Y = Y;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTransform"));

	struct
	{
		struct FVector                 Location;
		struct FRotator                Rotation;
		struct FVector                 Scale;
		struct FTransform              ReturnValue;
	} params;

	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Days                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Hours                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Minutes                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTimespan"));

	struct
	{
		int                            Days;
		int                            Hours;
		int                            Minutes;
		int                            Seconds;
		int                            Milliseconds;
		struct FTimespan               ReturnValue;
	} params;

	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.Milliseconds = Milliseconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZY(const struct FVector& Z, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZY"));

	struct
	{
		struct FVector                 Z;
		struct FVector                 Y;
		struct FRotator                ReturnValue;
	} params;

	params.Z = Z;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZX(const struct FVector& Z, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZX"));

	struct
	{
		struct FVector                 Z;
		struct FVector                 X;
		struct FRotator                ReturnValue;
	} params;

	params.Z = Z;
	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZ(const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZ"));

	struct
	{
		struct FVector                 Z;
		struct FRotator                ReturnValue;
	} params;

	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYZ"));

	struct
	{
		struct FVector                 Y;
		struct FVector                 Z;
		struct FRotator                ReturnValue;
	} params;

	params.Y = Y;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromYX(const struct FVector& Y, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYX"));

	struct
	{
		struct FVector                 Y;
		struct FVector                 X;
		struct FRotator                ReturnValue;
	} params;

	params.Y = Y;
	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromY(const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromY"));

	struct
	{
		struct FVector                 Y;
		struct FRotator                ReturnValue;
	} params;

	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromXZ(const struct FVector& X, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXZ"));

	struct
	{
		struct FVector                 X;
		struct FVector                 Z;
		struct FRotator                ReturnValue;
	} params;

	params.X = X;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromXY(const struct FVector& X, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXY"));

	struct
	{
		struct FVector                 X;
		struct FVector                 Y;
		struct FRotator                ReturnValue;
	} params;

	params.X = X;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromX(const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromX"));

	struct
	{
		struct FVector                 X;
		struct FRotator                ReturnValue;
	} params;

	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotator(float Roll, float Pitch, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotator"));

	struct
	{
		float                          Roll;
		float                          Pitch;
		float                          Yaw;
		struct FRotator                ReturnValue;
	} params;

	params.Roll = Roll;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotationFromAxes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Right                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotationFromAxes"));

	struct
	{
		struct FVector                 Forward;
		struct FVector                 Right;
		struct FVector                 Up;
		struct FRotator                ReturnValue;
	} params;

	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRandomStream
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InitialSeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FRandomStream UKismetMathLibrary::MakeRandomStream(int InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRandomStream"));

	struct
	{
		int                            InitialSeed;
		struct FRandomStream           ReturnValue;
	} params;

	params.InitialSeed = InitialSeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakePulsatingValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InCurrentTime                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPulsesPerSecond              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPhase                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakePulsatingValue"));

	struct
	{
		float                          InCurrentTime;
		float                          InPulsesPerSecond;
		float                          InPhase;
		float                          ReturnValue;
	} params;

	params.InCurrentTime = InCurrentTime;
	params.InPulsesPerSecond = InPulsesPerSecond;
	params.InPhase = InPhase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Day                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Hour                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Minute                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Second                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Millisecond                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeDateTime"));

	struct
	{
		int                            Year;
		int                            Month;
		int                            Day;
		int                            Hour;
		int                            Minute;
		int                            Second;
		int                            Millisecond;
		struct FDateTime               ReturnValue;
	} params;

	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;
	params.Millisecond = Millisecond;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeColor"));

	struct
	{
		float                          R;
		float                          G;
		float                          B;
		float                          A;
		struct FLinearColor            ReturnValue;
	} params;

	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Loge
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Loge(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Loge"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal"));

	struct
	{
		struct FVector                 LineStart;
		struct FVector                 LineEnd;
		struct FVector                 PlaneOrigin;
		struct FVector                 PlaneNormal;
		float                          T;
		struct FVector                 Intersection;
		bool                           ReturnValue;
	} params;

	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FPlane                  APlane                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection"));

	struct
	{
		struct FVector                 LineStart;
		struct FVector                 LineEnd;
		struct FPlane                  APlane;
		float                          T;
		struct FVector                 Intersection;
		bool                           ReturnValue;
	} params;

	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV"));

	struct
	{
		struct FLinearColor            A;
		struct FLinearColor            B;
		float                          Alpha;
		struct FLinearColor            ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerp"));

	struct
	{
		struct FLinearColor            A;
		struct FLinearColor            B;
		float                          Alpha;
		struct FLinearColor            ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessLess_VectorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessLess_VectorRotator"));

	struct
	{
		struct FVector                 A;
		struct FRotator                B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Lerp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Lerp(float A, float B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Lerp"));

	struct
	{
		float                          A;
		float                          B;
		float                          Alpha;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsPointInBox
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FBox                    Box                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsPointInBox(const struct FVector& Point, const struct FBox& Box)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsPointInBox"));

	struct
	{
		struct FVector                 Point;
		struct FBox                    Box;
		bool                           ReturnValue;
	} params;

	params.Point = Point;
	params.Box = Box;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsMorning
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsMorning(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsMorning"));

	struct
	{
		struct FDateTime               A;
		bool                           ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsLeapYear
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsLeapYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsLeapYear"));

	struct
	{
		int                            Year;
		bool                           ReturnValue;
	} params;

	params.Year = Year;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsAfternoon
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsAfternoon(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsAfternoon"));

	struct
	{
		struct FDateTime               A;
		bool                           ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InvertTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::InvertTransform(const struct FTransform& T)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InvertTransform"));

	struct
	{
		struct FTransform              T;
		struct FTransform              ReturnValue;
	} params;

	params.T = T;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::InverseTransformLocation(const struct FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformLocation"));

	struct
	{
		struct FTransform              T;
		struct FVector                 Location;
		struct FVector                 ReturnValue;
	} params;

	params.T = T;
	params.Location = Location;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformDirection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformDirection"));

	struct
	{
		struct FTransform              T;
		struct FVector                 Direction;
		struct FVector                 ReturnValue;
	} params;

	params.T = T;
	params.Direction = Direction;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseLerp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::InverseLerp(float A, float B, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseLerp"));

	struct
	{
		float                          A;
		float                          B;
		float                          Value;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InRange_FloatFloat"));

	struct
	{
		float                          Value;
		float                          Min;
		float                          Max;
		bool                           InclusiveMin;
		bool                           InclusiveMax;
		bool                           ReturnValue;
	} params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Hypotenuse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Width                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Hypotenuse(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Hypotenuse"));

	struct
	{
		float                          Width;
		float                          Height;
		float                          ReturnValue;
	} params;

	params.Width = Width;
	params.Height = Height;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.HSVToRGB_Vector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            HSV                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RGB                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB_Vector"));

	struct
	{
		struct FLinearColor            HSV;
		struct FLinearColor            RGB;
	} params;

	params.HSV = HSV;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (RGB != nullptr)
		*RGB = params.RGB;
}


// Function Engine.KismetMathLibrary.HSVToRGB
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          H                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB"));

	struct
	{
		float                          H;
		float                          S;
		float                          V;
		float                          A;
		struct FLinearColor            ReturnValue;
	} params;

	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GridSnap_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          GridSize                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GridSnap_Float(float Location, float GridSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GridSnap_Float"));

	struct
	{
		float                          Location;
		float                          GridSize;
		float                          ReturnValue;
	} params;

	params.Location = Location;
	params.GridSize = GridSize;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator"));

	struct
	{
		struct FVector                 A;
		struct FRotator                B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYear
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYear"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYawPitchFromVector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYawPitchFromVector"));

	struct
	{
		struct FVector                 InVec;
		float                          Yaw;
		float                          Pitch;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
}


// Function Engine.KismetMathLibrary.GetYawFromVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetYawFromVector(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYawFromVector"));

	struct
	{
		struct FVector                 InVec;
		float                          ReturnValue;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetVectorArrayAverage
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>         Vectors                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetVectorArrayAverage(TArray<struct FVector> Vectors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetVectorArrayAverage"));

	struct
	{
		TArray<struct FVector>         Vectors;
		struct FVector                 ReturnValue;
	} params;

	params.Vectors = Vectors;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetUpVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetUpVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetUpVector"));

	struct
	{
		struct FRotator                InRot;
		struct FVector                 ReturnValue;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalSeconds"));

	struct
	{
		struct FTimespan               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMinutes"));

	struct
	{
		struct FTimespan               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMilliseconds"));

	struct
	{
		struct FTimespan               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalHours"));

	struct
	{
		struct FTimespan               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalDays"));

	struct
	{
		struct FTimespan               A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTimeOfDay
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::GetTimeOfDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTimeOfDay"));

	struct
	{
		struct FDateTime               A;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSeconds"));

	struct
	{
		struct FTimespan               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSecond
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSecond"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetRightVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetRightVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetRightVector"));

	struct
	{
		struct FRotator                InRot;
		struct FVector                 ReturnValue;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPI
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetPI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetPI"));

	struct
	{
		float                          ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMonth
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMonth(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMonth"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinutes"));

	struct
	{
		struct FTimespan               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinute
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinute(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinute"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinElement
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMinElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinElement"));

	struct
	{
		struct FVector                 A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMilliseconds"));

	struct
	{
		struct FTimespan               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMillisecond
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMillisecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMillisecond"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMaxElement
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMaxElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMaxElement"));

	struct
	{
		struct FVector                 A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHours"));

	struct
	{
		struct FTimespan               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour12
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour12(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour12"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetForwardVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetForwardVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetForwardVector"));

	struct
	{
		struct FRotator                InRot;
		struct FVector                 ReturnValue;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDuration
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::GetDuration(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDuration"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDirectionVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 From                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 To                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetDirectionVector(const struct FVector& From, const struct FVector& To)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDirectionVector"));

	struct
	{
		struct FVector                 From;
		struct FVector                 To;
		struct FVector                 ReturnValue;
	} params;

	params.From = From;
	params.To = To;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDays"));

	struct
	{
		struct FTimespan               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDayOfYear
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDayOfYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDayOfYear"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDay
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDay"));

	struct
	{
		struct FDateTime               A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDate
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::GetDate(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDate"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetAxes
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAxes"));

	struct
	{
		struct FRotator                A;
		struct FVector                 X;
		struct FVector                 Y;
		struct FVector                 Z;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.FTrunc
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FTrunc(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FTrunc"));

	struct
	{
		float                          A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromSeconds(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromSeconds"));

	struct
	{
		float                          Seconds;
		struct FTimespan               ReturnValue;
	} params;

	params.Seconds = Seconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Minutes                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromMinutes(float Minutes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMinutes"));

	struct
	{
		float                          Minutes;
		struct FTimespan               ReturnValue;
	} params;

	params.Minutes = Minutes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMilliseconds"));

	struct
	{
		float                          Milliseconds;
		struct FTimespan               ReturnValue;
	} params;

	params.Milliseconds = Milliseconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Hours                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromHours(float Hours)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromHours"));

	struct
	{
		float                          Hours;
		struct FTimespan               ReturnValue;
	} params;

	params.Hours = Hours;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Days                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromDays(float Days)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromDays"));

	struct
	{
		float                          Days;
		struct FTimespan               ReturnValue;
	} params;

	params.Days = Days;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Fraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Fraction(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Fraction"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMod
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Dividend                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Divisor                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Remainder                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMod"));

	struct
	{
		float                          Dividend;
		float                          Divisor;
		float                          Remainder;
		int                            ReturnValue;
	} params;

	params.Dividend = Dividend;
	params.Divisor = Divisor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Remainder != nullptr)
		*Remainder = params.Remainder;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMin(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMin"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMax
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMax(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMax"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FixedTurn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InCurrent                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDesired                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDeltaRate                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FixedTurn(float InCurrent, float InDesired, float InDeltaRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FixedTurn"));

	struct
	{
		float                          InCurrent;
		float                          InDesired;
		float                          InDeltaRate;
		float                          ReturnValue;
	} params;

	params.InCurrent = InCurrent;
	params.InDesired = InDesired;
	params.InDeltaRate = InDeltaRate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo_Constant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo_Constant"));

	struct
	{
		float                          Current;
		float                          Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		float                          ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo"));

	struct
	{
		float                          Current;
		float                          Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		float                          ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpEaseInOut
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exponent                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpEaseInOut"));

	struct
	{
		float                          A;
		float                          B;
		float                          Alpha;
		float                          Exponent;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindLookAtRotation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::FindLookAtRotation(const struct FVector& Start, const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindLookAtRotation"));

	struct
	{
		struct FVector                 Start;
		struct FVector                 Target;
		struct FRotator                ReturnValue;
	} params;

	params.Start = Start;
	params.Target = Target;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FFloor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FFloor(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FFloor"));

	struct
	{
		float                          A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FClamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FClamp(float Value, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FClamp"));

	struct
	{
		float                          Value;
		float                          Min;
		float                          Max;
		float                          ReturnValue;
	} params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FCeil
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FCeil(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FCeil"));

	struct
	{
		float                          A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Exp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Exp(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Exp"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		float                          ErrorTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TransformTransform"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		float                          ErrorTolerance;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject"));

	struct
	{
		class UObject*                 A;
		class UObject*                 B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_NameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_NameName"));

	struct
	{
		struct FName                   A;
		struct FName                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime"));

	struct
	{
		struct FDateTime               A;
		struct FDateTime               B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ClassClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ClassClass"));

	struct
	{
		class UClass*                  A;
		class UClass*                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_BoolBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_BoolBool"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Ease
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Ease"));

	struct
	{
		float                          A;
		float                          B;
		float                          Alpha;
		TEnumAsByte<EEasingFunc>       EasingFunc;
		float                          BlendExp;
		int                            Steps;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DotProduct2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DotProduct2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DotProduct2D"));

	struct
	{
		struct FVector2D               A;
		struct FVector2D               B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Dot_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Dot_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Dot_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Divide_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Divide_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorInt"));

	struct
	{
		struct FVector                 A;
		int                            B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Divide_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorFloat"));

	struct
	{
		struct FVector                 A;
		float                          B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Divide_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Vector2DFloat"));

	struct
	{
		struct FVector2D               A;
		float                          B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Divide_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Divide_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Divide_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		unsigned char                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegTan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegTan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegTan"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegSin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegSin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegSin"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegreesToRadians
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegreesToRadians(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegreesToRadians"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegCos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegCos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegCos"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAtan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan2"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAtan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAsin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAsin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAsin"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAcos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAcos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAcos"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInYear
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInYear"));

	struct
	{
		int                            Year;
		int                            ReturnValue;
	} params;

	params.Year = Year;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInMonth
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInMonth(int Year, int Month)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInMonth"));

	struct
	{
		int                            Year;
		int                            Month;
		int                            ReturnValue;
	} params;

	params.Year = Year;
	params.Month = Month;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMinValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::DateTimeMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMinValue"));

	struct
	{
		struct FDateTime               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMaxValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::DateTimeMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMaxValue"));

	struct
	{
		struct FDateTime               ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  DateTimeString                 (Parm, ZeroConstructor)
// struct FDateTime               Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::DateTimeFromString(const class FString& DateTimeString, struct FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromString"));

	struct
	{
		class FString                  DateTimeString;
		struct FDateTime               Result;
		bool                           ReturnValue;
	} params;

	params.DateTimeString = DateTimeString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromIsoString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  IsoString                      (Parm, ZeroConstructor)
// struct FDateTime               Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::DateTimeFromIsoString(const class FString& IsoString, struct FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromIsoString"));

	struct
	{
		class FString                  IsoString;
		struct FDateTime               Result;
		bool                           ReturnValue;
	} params;

	params.IsoString = IsoString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CrossProduct2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CrossProduct2D"));

	struct
	{
		struct FVector2D               A;
		struct FVector2D               B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cross_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Cross_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cross_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CreateVectorFromYawPitch"));

	struct
	{
		float                          Yaw;
		float                          Pitch;
		float                          Length;
		struct FVector                 ReturnValue;
	} params;

	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Length = Length;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Cos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cos"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ConvertTransformToRelative
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ParentTransform                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ConvertTransformToRelative"));

	struct
	{
		struct FTransform              Transform;
		struct FTransform              ParentTransform;
		struct FTransform              ReturnValue;
	} params;

	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Conv_VectorToVector2D(const struct FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToVector2D"));

	struct
	{
		struct FVector                 InVector;
		struct FVector2D               ReturnValue;
	} params;

	params.InVector = InVector;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::Conv_VectorToTransform(const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToTransform"));

	struct
	{
		struct FVector                 InLocation;
		struct FTransform              ReturnValue;
	} params;

	params.InLocation = InLocation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::Conv_VectorToRotator(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToRotator"));

	struct
	{
		struct FVector                 InVec;
		struct FRotator                ReturnValue;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor"));

	struct
	{
		struct FVector                 InVec;
		struct FLinearColor            ReturnValue;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector2DToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector2DToVector"));

	struct
	{
		struct FVector2D               InVector2D;
		float                          Z;
		struct FVector                 ReturnValue;
	} params;

	params.InVector2D = InVector2D;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_RotatorToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_RotatorToVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_RotatorToVector"));

	struct
	{
		struct FRotator                InRot;
		struct FVector                 ReturnValue;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_LinearColorToVector(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToVector"));

	struct
	{
		struct FLinearColor            InLinearColor;
		struct FVector                 ReturnValue;
	} params;

	params.InLinearColor = InLinearColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UKismetMathLibrary::Conv_LinearColorToColor(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToColor"));

	struct
	{
		struct FLinearColor            InLinearColor;
		struct FColor                  ReturnValue;
	} params;

	params.InLinearColor = InLinearColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_IntToFloat(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToFloat"));

	struct
	{
		int                            InInt;
		float                          ReturnValue;
	} params;

	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_IntToByte(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToByte"));

	struct
	{
		int                            InInt;
		unsigned char                  ReturnValue;
	} params;

	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Conv_IntToBool(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToBool"));

	struct
	{
		int                            InInt;
		bool                           ReturnValue;
	} params;

	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToVector"));

	struct
	{
		float                          InFloat;
		struct FVector                 ReturnValue;
	} params;

	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor"));

	struct
	{
		float                          InFloat;
		struct FLinearColor            ReturnValue;
	} params;

	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                  InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(const struct FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor"));

	struct
	{
		struct FColor                  InColor;
		struct FLinearColor            ReturnValue;
	} params;

	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToInt"));

	struct
	{
		unsigned char                  InByte;
		int                            ReturnValue;
	} params;

	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToFloat"));

	struct
	{
		unsigned char                  InByte;
		float                          ReturnValue;
	} params;

	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_BoolToInt(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToInt"));

	struct
	{
		bool                           InBool;
		int                            ReturnValue;
	} params;

	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_BoolToFloat(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToFloat"));

	struct
	{
		bool                           InBool;
		float                          ReturnValue;
	} params;

	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_BoolToByte(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToByte"));

	struct
	{
		bool                           InBool;
		unsigned char                  ReturnValue;
	} params;

	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeTransforms
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UKismetMathLibrary::ComposeTransforms(const struct FTransform& A, const struct FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeTransforms"));

	struct
	{
		struct FTransform              A;
		struct FTransform              B;
		struct FTransform              ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeRotators
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::ComposeRotators(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeRotators"));

	struct
	{
		struct FRotator                A;
		struct FRotator                B;
		struct FRotator                ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClassIsChildOf
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  TestClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ParentClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClassIsChildOf"));

	struct
	{
		class UClass*                  TestClass;
		class UClass*                  ParentClass;
		bool                           ReturnValue;
	} params;

	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampVectorSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ClampVectorSize(const struct FVector& A, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampVectorSize"));

	struct
	{
		struct FVector                 A;
		float                          Min;
		float                          Max;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::ClampAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAxis"));

	struct
	{
		float                          Angle;
		float                          ReturnValue;
	} params;

	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAngle"));

	struct
	{
		float                          AngleDegrees;
		float                          MinAngleDegrees;
		float                          MaxAngleDegrees;
		float                          ReturnValue;
	} params;

	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Clamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Clamp(int Value, int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Clamp"));

	struct
	{
		int                            Value;
		int                            Min;
		int                            Max;
		int                            ReturnValue;
	} params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            Current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CInterpTo"));

	struct
	{
		struct FLinearColor            Current;
		struct FLinearColor            Target;
		float                          DeltaTime;
		float                          InterpSpeed;
		struct FLinearColor            ReturnValue;
	} params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BreakVector2D
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector2D(const struct FVector2D& InVec, float* X, float* Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector2D"));

	struct
	{
		struct FVector2D               InVec;
		float                          X;
		float                          Y;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.KismetMathLibrary.BreakVector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector"));

	struct
	{
		struct FVector                 InVec;
		float                          X;
		float                          Y;
		float                          Z;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTransform"));

	struct
	{
		struct FTransform              InTransform;
		struct FVector                 Location;
		struct FRotator                Rotation;
		struct FVector                 Scale;
	} params;

	params.InTransform = InTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
	if (Scale != nullptr)
		*Scale = params.Scale;
}


// Function Engine.KismetMathLibrary.BreakTimespan
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               InTimespan                     (Parm, ZeroConstructor)
// int                            Days                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Hours                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Minutes                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Milliseconds                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTimespan"));

	struct
	{
		struct FTimespan               InTimespan;
		int                            Days;
		int                            Hours;
		int                            Minutes;
		int                            Seconds;
		int                            Milliseconds;
	} params;

	params.InTimespan = InTimespan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (Milliseconds != nullptr)
		*Milliseconds = params.Milliseconds;
}


// Function Engine.KismetMathLibrary.BreakRotIntoAxes
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotIntoAxes"));

	struct
	{
		struct FRotator                InRot;
		struct FVector                 X;
		struct FVector                 Y;
		struct FVector                 Z;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakRotator
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotator"));

	struct
	{
		struct FRotator                InRot;
		float                          Roll;
		float                          Pitch;
		float                          Yaw;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Roll != nullptr)
		*Roll = params.Roll;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
}


// Function Engine.KismetMathLibrary.BreakRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRandomStream           InRandomStream                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            InitialSeed                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRandomStream"));

	struct
	{
		struct FRandomStream           InRandomStream;
		int                            InitialSeed;
	} params;

	params.InRandomStream = InRandomStream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InitialSeed != nullptr)
		*InitialSeed = params.InitialSeed;
}


// Function Engine.KismetMathLibrary.BreakDateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               InDateTime                     (Parm, ZeroConstructor)
// int                            Year                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Day                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Hour                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Minute                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Second                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Millisecond                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakDateTime"));

	struct
	{
		struct FDateTime               InDateTime;
		int                            Year;
		int                            Month;
		int                            Day;
		int                            Hour;
		int                            Minute;
		int                            Second;
		int                            Millisecond;
	} params;

	params.InDateTime = InDateTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Year != nullptr)
		*Year = params.Year;
	if (Month != nullptr)
		*Month = params.Month;
	if (Day != nullptr)
		*Day = params.Day;
	if (Hour != nullptr)
		*Hour = params.Hour;
	if (Minute != nullptr)
		*Minute = params.Minute;
	if (Second != nullptr)
		*Second = params.Second;
	if (Millisecond != nullptr)
		*Millisecond = params.Millisecond;
}


// Function Engine.KismetMathLibrary.BreakColor
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          R                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakColor"));

	struct
	{
		struct FLinearColor            InColor;
		float                          R;
		float                          G;
		float                          B;
		float                          A;
	} params;

	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (R != nullptr)
		*R = params.R;
	if (G != nullptr)
		*G = params.G;
	if (B != nullptr)
		*B = params.B;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.BooleanXOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanXOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanXOR"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanOR"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanNOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNOR"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNAND
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanNAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNAND"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanAND
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanAND"));

	struct
	{
		bool                           A;
		bool                           B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Atan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan2"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Atan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Asin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Asin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Asin"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.And_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::And_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.And_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Add_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorVector"));

	struct
	{
		struct FVector                 A;
		struct FVector                 B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Add_VectorInt(const struct FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorInt"));

	struct
	{
		struct FVector                 A;
		int                            B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Add_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorFloat"));

	struct
	{
		struct FVector                 A;
		float                          B;
		struct FVector                 ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DVector2D"));

	struct
	{
		struct FVector2D               A;
		struct FVector2D               B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Add_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DFloat"));

	struct
	{
		struct FVector2D               A;
		float                          B;
		struct FVector2D               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_TimespanTimespan"));

	struct
	{
		struct FTimespan               A;
		struct FTimespan               B;
		struct FTimespan               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Add_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_IntInt"));

	struct
	{
		int                            A;
		int                            B;
		int                            ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Add_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_FloatFloat"));

	struct
	{
		float                          A;
		float                          B;
		float                          ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DateTimeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_DateTimeTimespan"));

	struct
	{
		struct FDateTime               A;
		struct FTimespan               B;
		struct FDateTime               ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Add_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_ByteByte"));

	struct
	{
		unsigned char                  A;
		unsigned char                  B;
		unsigned char                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Acos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Acos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Acos"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Abs_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs_Int"));

	struct
	{
		int                            A;
		int                            ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Abs(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs"));

	struct
	{
		float                          A;
		float                          ReturnValue;
	} params;

	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.MarkBit
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::MarkBit(int Index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.MarkBit"));

	struct
	{
		int                            Data;
		int                            Index;
	} params;

	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasUnmarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit"));

	struct
	{
		int                            Data;
		int                            NumBits;
		bool                           ReturnValue;
	} params;

	params.Data = Data;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.HasMarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasMarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasMarkedBit"));

	struct
	{
		int                            Data;
		int                            NumBits;
		bool                           ReturnValue;
	} params;

	params.Data = Data;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetValidIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetNodeHelperLibrary::GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetValidIndex"));

	struct
	{
		class UEnum*                   Enum;
		unsigned char                  EnumeratorIndex;
		unsigned char                  ReturnValue;
	} params;

	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandom                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit"));

	struct
	{
		int                            Data;
		int                            StartIdx;
		int                            NumBits;
		bool                           bRandom;
		int                            ReturnValue;
	} params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;
	params.bRandom = bRandom;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit"));

	struct
	{
		int                            Data;
		int                            StartIdx;
		int                            NumBits;
		int                            ReturnValue;
	} params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit"));

	struct
	{
		int                            Data;
		int                            StartIdx;
		int                            NumBits;
		int                            ReturnValue;
	} params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName"));

	struct
	{
		class UEnum*                   Enum;
		unsigned char                  EnumeratorValue;
		class FString                  ReturnValue;
	} params;

	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetNodeHelperLibrary::GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorName"));

	struct
	{
		class UEnum*                   Enum;
		unsigned char                  EnumeratorValue;
		struct FName                   ReturnValue;
	} params;

	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.ClearBit
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearBit(int Index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearBit"));

	struct
	{
		int                            Data;
		int                            Index;
	} params;

	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.ClearAllBits
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearAllBits(int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearAllBits"));

	struct
	{
		int                            Data;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.BitIsMarked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::BitIsMarked(int Data, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.BitIsMarked"));

	struct
	{
		int                            Data;
		int                            Index;
		bool                           ReturnValue;
	} params;

	params.Data = Data;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.TrimTrailing
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::TrimTrailing(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TrimTrailing"));

	struct
	{
		class FString                  SourceString;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Trim
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Trim(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Trim"));

	struct
	{
		class FString                  SourceString;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToUpper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::ToUpper(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToUpper"));

	struct
	{
		class FString                  SourceString;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToLower
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::ToLower(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToLower"));

	struct
	{
		class FString                  SourceString;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.TimeSecondsToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InSeconds                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::TimeSecondsToString(float InSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TimeSecondsToString"));

	struct
	{
		float                          InSeconds;
		class FString                  ReturnValue;
	} params;

	params.InSeconds = InSeconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.StartsWith
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InPrefix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::StartsWith(const class FString& SourceString, const class FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.StartsWith"));

	struct
	{
		class FString                  SourceString;
		class FString                  InPrefix;
		TEnumAsByte<ESearchCase>       SearchCase;
		bool                           ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.InPrefix = InPrefix;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Split
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InStr                          (Parm, ZeroConstructor)
// class FString                  LeftS                          (Parm, OutParm, ZeroConstructor)
// class FString                  RightS                         (Parm, OutParm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESearchDir>        SearchDir                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::Split(const class FString& SourceString, const class FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, class FString* LeftS, class FString* RightS)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Split"));

	struct
	{
		class FString                  SourceString;
		class FString                  InStr;
		class FString                  LeftS;
		class FString                  RightS;
		TEnumAsByte<ESearchCase>       SearchCase;
		TEnumAsByte<ESearchDir>        SearchDir;
		bool                           ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.InStr = InStr;
	params.SearchCase = SearchCase;
	params.SearchDir = SearchDir;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (LeftS != nullptr)
		*LeftS = params.LeftS;
	if (RightS != nullptr)
		*RightS = params.RightS;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightPad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::RightPad(const class FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightPad"));

	struct
	{
		class FString                  SourceString;
		int                            ChCount;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.ChCount = ChCount;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightChop
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::RightChop(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightChop"));

	struct
	{
		class FString                  SourceString;
		int                            Count;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Right
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Right(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Right"));

	struct
	{
		class FString                  SourceString;
		int                            Count;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Reverse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Reverse(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Reverse"));

	struct
	{
		class FString                  SourceString;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ReplaceInline
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class FString                  SourceString                   (Parm, OutParm, ZeroConstructor, ReferenceParm)
// class FString                  SearchText                     (Parm, ZeroConstructor)
// class FString                  ReplacementText                (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::ReplaceInline(const class FString& SearchText, const class FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, class FString* SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ReplaceInline"));

	struct
	{
		class FString                  SourceString;
		class FString                  SearchText;
		class FString                  ReplacementText;
		TEnumAsByte<ESearchCase>       SearchCase;
		int                            ReturnValue;
	} params;

	params.SearchText = SearchText;
	params.ReplacementText = ReplacementText;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (SourceString != nullptr)
		*SourceString = params.SourceString;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Replace
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  From                           (Parm, ZeroConstructor)
// class FString                  To                             (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Replace(const class FString& SourceString, const class FString& From, const class FString& To, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Replace"));

	struct
	{
		class FString                  SourceString;
		class FString                  From;
		class FString                  To;
		TEnumAsByte<ESearchCase>       SearchCase;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.From = From;
	params.To = To;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ParseIntoArray
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           CullEmptyStrings               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UKismetStringLibrary::ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ParseIntoArray"));

	struct
	{
		class FString                  SourceString;
		class FString                  Delimiter;
		bool                           CullEmptyStrings;
		TArray<class FString>          ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Delimiter = Delimiter;
	params.CullEmptyStrings = CullEmptyStrings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StrStr"));

	struct
	{
		class FString                  A;
		class FString                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StriStri
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StriStri(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StriStri"));

	struct
	{
		class FString                  A;
		class FString                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Mid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Start                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Mid(const class FString& SourceString, int Start, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Mid"));

	struct
	{
		class FString                  SourceString;
		int                            Start;
		int                            Count;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Start = Start;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.MatchesWildcard
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  Wildcard                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.MatchesWildcard"));

	struct
	{
		class FString                  SourceString;
		class FString                  Wildcard;
		TEnumAsByte<ESearchCase>       SearchCase;
		bool                           ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Wildcard = Wildcard;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Len
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Len(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Len"));

	struct
	{
		class FString                  S;
		int                            ReturnValue;
	} params;

	params.S = S;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftPad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::LeftPad(const class FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftPad"));

	struct
	{
		class FString                  SourceString;
		int                            ChCount;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.ChCount = ChCount;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftChop
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::LeftChop(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftChop"));

	struct
	{
		class FString                  SourceString;
		int                            Count;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Left
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Left(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Left"));

	struct
	{
		class FString                  SourceString;
		int                            Count;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.JoinStringArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>          SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class FString                  Separator                      (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::JoinStringArray(TArray<class FString> SourceArray, const class FString& Separator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.JoinStringArray"));

	struct
	{
		TArray<class FString>          SourceArray;
		class FString                  Separator;
		class FString                  ReturnValue;
	} params;

	params.SourceArray = SourceArray;
	params.Separator = Separator;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.IsNumeric
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::IsNumeric(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.IsNumeric"));

	struct
	{
		class FString                  SourceString;
		bool                           ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetSubstring
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            StartIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::GetSubstring(const class FString& SourceString, int StartIndex, int Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetSubstring"));

	struct
	{
		class FString                  SourceString;
		int                            StartIndex;
		int                            Length;
		class FString                  ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.StartIndex = StartIndex;
	params.Length = Length;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterAsNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::GetCharacterAsNumber(const class FString& SourceString, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterAsNumber"));

	struct
	{
		class FString                  SourceString;
		int                            Index;
		int                            ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterArrayFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UKismetStringLibrary::GetCharacterArrayFromString(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterArrayFromString"));

	struct
	{
		class FString                  SourceString;
		TArray<class FString>          ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.FindSubstring
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SearchIn                       (Parm, ZeroConstructor)
// class FString                  Substring                      (Parm, ZeroConstructor)
// bool                           bUseCase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSearchFromEnd                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartPosition                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.FindSubstring"));

	struct
	{
		class FString                  SearchIn;
		class FString                  Substring;
		bool                           bUseCase;
		bool                           bSearchFromEnd;
		int                            StartPosition;
		int                            ReturnValue;
	} params;

	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;
	params.StartPosition = StartPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StrStr"));

	struct
	{
		class FString                  A;
		class FString                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StriStri
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StriStri(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StriStri"));

	struct
	{
		class FString                  A;
		class FString                  B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EndsWith
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InSuffix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EndsWith(const class FString& SourceString, const class FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EndsWith"));

	struct
	{
		class FString                  SourceString;
		class FString                  InSuffix;
		TEnumAsByte<ESearchCase>       SearchCase;
		bool                           ReturnValue;
	} params;

	params.SourceString = SourceString;
	params.InSuffix = InSuffix;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.CullArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// TArray<class FString>          InArray                        (Parm, OutParm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::CullArray(const class FString& SourceString, TArray<class FString>* InArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.CullArray"));

	struct
	{
		class FString                  SourceString;
		TArray<class FString>          InArray;
		int                            ReturnValue;
	} params;

	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InArray != nullptr)
		*InArray = params.InArray;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_VectorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_VectorToString(const struct FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_VectorToString"));

	struct
	{
		struct FVector                 InVec;
		class FString                  ReturnValue;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_Vector2dToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_Vector2dToString(const struct FVector2D& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_Vector2dToString"));

	struct
	{
		struct FVector2D               InVec;
		class FString                  ReturnValue;
	} params;

	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_TransformToString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              InTrans                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_TransformToString(const struct FTransform& InTrans)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_TransformToString"));

	struct
	{
		struct FTransform              InTrans;
		class FString                  ReturnValue;
	} params;

	params.InTrans = InTrans;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetStringLibrary::Conv_StringToName(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToName"));

	struct
	{
		class FString                  InString;
		struct FName                   ReturnValue;
	} params;

	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Conv_StringToInt(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToInt"));

	struct
	{
		class FString                  InString;
		int                            ReturnValue;
	} params;

	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetStringLibrary::Conv_StringToFloat(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToFloat"));

	struct
	{
		class FString                  InString;
		float                          ReturnValue;
	} params;

	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_RotatorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_RotatorToString(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_RotatorToString"));

	struct
	{
		struct FRotator                InRot;
		class FString                  ReturnValue;
	} params;

	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ObjectToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ObjectToString(class UObject* InObj)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ObjectToString"));

	struct
	{
		class UObject*                 InObj;
		class FString                  ReturnValue;
	} params;

	params.InObj = InObj;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_NameToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_NameToString(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_NameToString"));

	struct
	{
		struct FName                   InName;
		class FString                  ReturnValue;
	} params;

	params.InName = InName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_IntToString(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_IntToString"));

	struct
	{
		int                            InInt;
		class FString                  ReturnValue;
	} params;

	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_FloatToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_FloatToString"));

	struct
	{
		float                          InFloat;
		class FString                  ReturnValue;
	} params;

	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ColorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ColorToString(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ColorToString"));

	struct
	{
		struct FLinearColor            InColor;
		class FString                  ReturnValue;
	} params;

	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ByteToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ByteToString(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ByteToString"));

	struct
	{
		unsigned char                  InByte;
		class FString                  ReturnValue;
	} params;

	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_BoolToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_BoolToString"));

	struct
	{
		bool                           InBool;
		class FString                  ReturnValue;
	} params;

	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Concat_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Concat_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Concat_StrStr"));

	struct
	{
		class FString                  A;
		class FString                  B;
		class FString                  ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector2d
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector2d"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		struct FVector2D               InVector2D;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector2D = InVector2D;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		struct FVector                 InVector;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector = InVector;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Rotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Rotator"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		struct FRotator                InRot;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InRot = InRot;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Object
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Object"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		class UObject*                 InObj;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InObj = InObj;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Name
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Name(const class FString& AppendTo, const class FString& Prefix, const struct FName& InName, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Name"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		struct FName                   InName;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InName = InName;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int InInt, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Int"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		int                            InInt;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InInt = InInt;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Float"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		float                          InFloat;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InFloat = InFloat;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Color
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Color"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		struct FLinearColor            InColor;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InColor = InColor;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Bool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Bool"));

	struct
	{
		class FString                  AppendTo;
		class FString                  Prefix;
		bool                           InBool;
		class FString                  Suffix;
		class FString                  ReturnValue;
	} params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InBool = InBool;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.StackTrace
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::StackTrace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.StackTrace"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 SpherePos;
		float                          SphereRadius;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 SpherePos;
		float                          SphereRadius;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 SpherePos;
		float                          SphereRadius;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 SpherePos;
		float                          SphereRadius;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  CategoryName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen"));

	struct
	{
		class FString                  CategoryName;
	} params;

	params.CategoryName = CategoryName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen"));

	struct
	{
		class APlayerController*       SpecificPlayer;
	} params;

	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ShowAdBanner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            AdIdIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowOnBottomOfScreen          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowAdBanner"));

	struct
	{
		int                            AdIdIndex;
		bool                           bShowOnBottomOfScreen;
	} params;

	params.AdIdIndex = AdIdIndex;
	params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetWindowTitle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FText                   Title                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetWindowTitle(const struct FText& Title)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetWindowTitle"));

	struct
	{
		struct FText                   Title;
	} params;

	params.Title = Title;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem"));

	struct
	{
		bool                           bEnabled;
	} params;

	params.bEnabled = bEnabled;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetVectorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVectorPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FVector                 Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetTransformPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              Value                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTransformPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FTransform              Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetTextPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTextPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FText                   Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bState                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           bState;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.bState = bState;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetStructurePropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FGenericStruct          Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStructurePropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FGenericStruct          Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetStringPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Value                          (Parm, ZeroConstructor)

void UKismetSystemLibrary::SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStringPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		class FString                  Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetRotatorPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FRotator                Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetObjectPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetObjectPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		class UObject*                 Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetNamePropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetNamePropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FName                   Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FLinearColor            Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetIntPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetIntPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		int                            Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetFloatPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetFloatPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		float                          Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FCollisionProfileName   Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		struct FCollisionProfileName   Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetClassPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetClassPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		class UClass*                  Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetBytePropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBytePropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		unsigned char                  Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetBoolPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBoolPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		bool                           Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetAssetPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UObject>       Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetAssetPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UObject> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetAssetPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		TAssetPtr<class UObject>       Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UClass>        Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetAssetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UClass> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
		TAssetPtr<class UClass>        Value;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.RetriggerableDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RetriggerableDelay"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          Duration;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ResetGamepadAssignmentToController(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController"));

	struct
	{
		int                            ControllerId;
	} params;

	params.ControllerId = ControllerId;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignments
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::ResetGamepadAssignments()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignments"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::RegisterForRemoteNotifications()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.QuitGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EQuitPreference>   QuitPreference                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.QuitGame"));

	struct
	{
		class UObject*                 WorldContextObject;
		class APlayerController*       SpecificPlayer;
		TEnumAsByte<EQuitPreference>   QuitPreference;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.SpecificPlayer = SpecificPlayer;
	params.QuitPreference = QuitPreference;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintWarning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::PrintWarning(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintWarning"));

	struct
	{
		class FString                  InString;
	} params;

	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintText
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   InText                         (ConstParm, Parm)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintText"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FText                   InText;
		bool                           bPrintToScreen;
		bool                           bPrintToLog;
		struct FLinearColor            TextColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InText = InText;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  InString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::PrintString(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintString"));

	struct
	{
		class UObject*                 WorldContextObject;
		class FString                  InString;
		bool                           bPrintToScreen;
		bool                           bPrintToLog;
		struct FLinearColor            TextColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.InString = InString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                 Loaded                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::OnAssetLoaded__DelegateSignature(class UObject* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature"));

	struct
	{
		class UObject*                 Loaded;
	} params;

	params.Loaded = Loaded;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UClass*                  Loaded                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::OnAssetClassLoaded__DelegateSignature(class UClass* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature"));

	struct
	{
		class UClass*                  Loaded;
	} params;

	params.Loaded = Loaded;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.MoveComponentTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 TargetRelativeLocation         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TargetRelativeRotation         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseOut                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseIn                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverTime                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMoveComponentAction> MoveAction                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MoveComponentTo"));

	struct
	{
		class USceneComponent*         Component;
		struct FVector                 TargetRelativeLocation;
		struct FRotator                TargetRelativeRotation;
		bool                           bEaseOut;
		bool                           bEaseIn;
		float                          OverTime;
		TEnumAsByte<EMoveComponentAction> MoveAction;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.Component = Component;
	params.TargetRelativeLocation = TargetRelativeLocation;
	params.TargetRelativeRotation = TargetRelativeRotation;
	params.bEaseOut = bEaseOut;
	params.bEaseIn = bEaseIn;
	params.OverTime = OverTime;
	params.MoveAction = MoveAction;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.MakeLiteralText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   Value                          (Parm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetSystemLibrary::MakeLiteralText(const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralText"));

	struct
	{
		struct FText                   Value;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Value                          (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::MakeLiteralString(const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralString"));

	struct
	{
		class FString                  Value;
		class FString                  ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetSystemLibrary::MakeLiteralName(const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralName"));

	struct
	{
		struct FName                   Value;
		struct FName                   ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::MakeLiteralInt(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralInt"));

	struct
	{
		int                            Value;
		int                            ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::MakeLiteralFloat(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralFloat"));

	struct
	{
		float                          Value;
		float                          ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetSystemLibrary::MakeLiteralByte(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralByte"));

	struct
	{
		unsigned char                  Value;
		unsigned char                  ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::MakeLiteralBool(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralBool"));

	struct
	{
		bool                           Value;
		bool                           ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LoadAssetClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UClass>        AssetClass                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FScriptDelegate         OnLoaded                       (Parm, ZeroConstructor)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::LoadAssetClass(class UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAssetClass"));

	struct
	{
		class UObject*                 WorldContextObject;
		TAssetPtr<class UClass>        AssetClass;
		struct FScriptDelegate         OnLoaded;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.AssetClass = AssetClass;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.LoadAsset
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UObject>       Asset                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FScriptDelegate         OnLoaded                       (Parm, ZeroConstructor)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::LoadAsset(class UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAsset"));

	struct
	{
		class UObject*                 WorldContextObject;
		TAssetPtr<class UObject>       Asset;
		struct FScriptDelegate         OnLoaded;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Asset = Asset;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingle_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMulti_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LaunchURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void UKismetSystemLibrary::LaunchURL(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LaunchURL"));

	struct
	{
		class FString                  URL;
	} params;

	params.URL = URL;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)

void UKismetSystemLibrary::K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimer"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		bool                           ReturnValue;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExists
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExists(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExists"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		bool                           ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTimerHandle UKismetSystemLibrary::K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimerDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		float                          Time;
		bool                           bLooping;
		struct FTimerHandle            ReturnValue;
	} params;

	params.Delegate = Delegate;
	params.Time = Time;
	params.bLooping = bLooping;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTimerHandle UKismetSystemLibrary::K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimer"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		float                          Time;
		bool                           bLooping;
		struct FTimerHandle            ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;
	params.Time = Time;
	params.bLooping = bLooping;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)

void UKismetSystemLibrary::K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_PauseTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_PauseTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimer"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimerHandle            Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsValidTimerHandle(const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle"));

	struct
	{
		struct FTimerHandle            Handle;
		bool                           ReturnValue;
	} params;

	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		bool                           ReturnValue;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPaused
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPaused"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		bool                           ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		bool                           ReturnValue;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActive(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActive"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		bool                           ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FTimerHandle            Handle                         (Parm, OutParm, ReferenceParm)
// struct FTimerHandle            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTimerHandle UKismetSystemLibrary::K2_InvalidateTimerHandle(struct FTimerHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle"));

	struct
	{
		struct FTimerHandle            Handle;
		struct FTimerHandle            ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Handle != nullptr)
		*Handle = params.Handle;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		float                          ReturnValue;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		float                          ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
		float                          ReturnValue;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
		float                          ReturnValue;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimerHandle            Handle                         (Parm)

void UKismetSystemLibrary::K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerHandle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTimerHandle            Handle;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate"));

	struct
	{
		struct FScriptDelegate         Delegate;
	} params;

	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_ClearTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_ClearTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimer"));

	struct
	{
		class UObject*                 Object;
		class FString                  FunctionName;
	} params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.IsValidClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsValidClass(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidClass"));

	struct
	{
		class UClass*                  Class;
		bool                           ReturnValue;
	} params;

	params.Class = Class;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsValid(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValid"));

	struct
	{
		class UObject*                 Object;
		bool                           ReturnValue;
	} params;

	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsServer"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsPackagedForDistribution
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsPackagedForDistribution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsPackagedForDistribution"));

	struct
	{
		bool                           ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsLoggedIn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsLoggedIn(class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsLoggedIn"));

	struct
	{
		class APlayerController*       SpecificPlayer;
		bool                           ReturnValue;
	} params;

	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsDedicatedServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsDedicatedServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsDedicatedServer"));

	struct
	{
		class UObject*                 WorldContextObject;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsControllerAssignedToGamepad(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad"));

	struct
	{
		int                            ControllerId;
		bool                           ReturnValue;
	} params;

	params.ControllerId = ControllerId;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.HideAdBanner
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::HideAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.HideAdBanner"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::GetVolumeButtonsHandledBySystem()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem"));

	struct
	{
		bool                           ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetUniqueDeviceId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetUniqueDeviceId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetUniqueDeviceId"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FIntPoint>       Resolutions                    (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions"));

	struct
	{
		TArray<struct FIntPoint>       Resolutions;
		bool                           ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Resolutions != nullptr)
		*Resolutions = params.Resolutions;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingMaterialQualityLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel"));

	struct
	{
		int                            ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingDetailMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingDetailMode"));

	struct
	{
		int                            ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPreferredLanguages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UKismetSystemLibrary::GetPreferredLanguages()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPreferredLanguages"));

	struct
	{
		TArray<class FString>          ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPlatformUserName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetPlatformUserName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPlatformUserName"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectNameAsCrc32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetObjectNameAsCrc32(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectNameAsCrc32"));

	struct
	{
		class UObject*                 Object;
		int                            ReturnValue;
	} params;

	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetObjectName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectName"));

	struct
	{
		class UObject*                 Object;
		class FString                  ReturnValue;
	} params;

	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetMaxShadowCascades
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetMaxShadowCascades()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetMaxShadowCascades"));

	struct
	{
		int                            ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetLocalCurrencySymbol()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetLocalCurrencyCode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencyCode"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::GetGameTimeInSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameTimeInSeconds"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetGameName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameName"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetEngineVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetEngineVersion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetEngineVersion"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetDisplayName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDisplayName"));

	struct
	{
		class UObject*                 Object;
		class FString                  ReturnValue;
	} params;

	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetComponentBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*         Component                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetComponentBounds"));

	struct
	{
		class USceneComponent*         Component;
		struct FVector                 Origin;
		struct FVector                 BoxExtent;
		float                          SphereRadius;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
	if (SphereRadius != nullptr)
		*SphereRadius = params.SphereRadius;
}


// Function Engine.KismetSystemLibrary.GetClassDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetClassDisplayName(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetClassDisplayName"));

	struct
	{
		class UClass*                  Class;
		class FString                  ReturnValue;
	} params;

	params.Class = Class;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetAdIDCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetAdIDCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetAdIDCount"));

	struct
	{
		int                            ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetActorListFromComponentList
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UPrimitiveComponent*> ComponentList                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActorList                   (Parm, OutParm, ZeroConstructor)

void UKismetSystemLibrary::GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorListFromComponentList"));

	struct
	{
		TArray<class UPrimitiveComponent*> ComponentList;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          OutActorList;
	} params;

	params.ComponentList = ComponentList;
	params.ActorClassFilter = ActorClassFilter;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActorList != nullptr)
		*OutActorList = params.OutActorList;
}


// Function Engine.KismetSystemLibrary.GetActorBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorBounds"));

	struct
	{
		class AActor*                  Actor;
		struct FVector                 Origin;
		struct FVector                 BoxExtent;
	} params;

	params.Actor = Actor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.KismetSystemLibrary.ForceCloseAdBanner
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::ForceCloseAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ForceCloseAdBanner"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushPersistentDebugLines(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushPersistentDebugLines"));

	struct
	{
		class UObject*                 WorldContextObject;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.FlushDebugStrings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushDebugStrings(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushDebugStrings"));

	struct
	{
		class UObject*                 WorldContextObject;
	} params;

	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Command                        (Parm, ZeroConstructor)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ExecuteConsoleCommand"));

	struct
	{
		class UObject*                 WorldContextObject;
		class FString                  Command;
		class APlayerController*       SpecificPlayer;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Command = Command;
	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// class AActor*                  TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugString"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 TextLocation;
		class FString                  Text;
		class AActor*                  TestBaseActor;
		struct FLinearColor            TextColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugSphere
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugSphere"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Center;
		float                          Radius;
		int                            Segments;
		struct FLinearColor            LineColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPoint"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Position;
		float                          Size;
		struct FLinearColor            PointColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugPlane
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlane                  PlaneCoordinates               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PlaneColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPlane"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FPlane                  PlaneCoordinates;
		struct FVector                 Location;
		float                          Size;
		struct FLinearColor            PlaneColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugLine
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugLine"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 LineStart;
		struct FVector                 LineEnd;
		struct FLinearColor            LineColor;
		float                          Duration;
		float                          Thickness;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFrustum
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              FrustumTransform               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FLinearColor            FrustumColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFrustum"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FTransform              FrustumTransform;
		struct FLinearColor            FrustumColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.FrustumTransform = FrustumTransform;
	params.FrustumColor = FrustumColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FTransform              DrawTransform                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FDebugFloatHistory      FloatHistory;
		struct FTransform              DrawTransform;
		struct FVector2D               DrawSize;
		struct FLinearColor            DrawColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawTransform = DrawTransform;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 DrawLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FDebugFloatHistory      FloatHistory;
		struct FVector                 DrawLocation;
		struct FVector2D               DrawSize;
		struct FLinearColor            DrawColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawLocation = DrawLocation;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCylinder
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCylinder"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		int                            Segments;
		struct FLinearColor            LineColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 AxisLoc;
		struct FRotator                AxisRot;
		float                          Scale;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Origin;
		struct FVector                 Direction;
		float                          Length;
		float                          AngleWidth;
		float                          AngleHeight;
		int                            NumSides;
		struct FLinearColor            LineColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCone
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCone"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Origin;
		struct FVector                 Direction;
		float                          Length;
		float                          AngleWidth;
		float                          AngleHeight;
		int                            NumSides;
		struct FLinearColor            LineColor;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCircle
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSegments                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 YAxis                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ZAxis                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawAxis                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCircle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Center;
		float                          Radius;
		int                            NumSegments;
		struct FLinearColor            LineColor;
		float                          Duration;
		float                          Thickness;
		struct FVector                 YAxis;
		struct FVector                 ZAxis;
		bool                           bDrawAxis;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.NumSegments = NumSegments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.YAxis = YAxis;
	params.ZAxis = ZAxis;
	params.bDrawAxis = bDrawAxis;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCapsule
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCapsule"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Center;
		float                          HalfHeight;
		float                          Radius;
		struct FRotator                Rotation;
		struct FLinearColor            LineColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCamera
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACameraActor*            CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            CameraColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCamera"));

	struct
	{
		class ACameraActor*            CameraActor;
		struct FLinearColor            CameraColor;
		float                          Duration;
	} params;

	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugBox"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Center;
		struct FVector                 Extent;
		struct FLinearColor            LineColor;
		struct FRotator                Rotation;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugArrow
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugArrow"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 LineStart;
		struct FVector                 LineEnd;
		float                          ArrowSize;
		struct FLinearColor            LineColor;
		float                          Duration;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DoesImplementInterface
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 TestObject                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::DoesImplementInterface(class UObject* TestObject, class UClass* Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DoesImplementInterface"));

	struct
	{
		class UObject*                 TestObject;
		class UClass*                  Interface;
		bool                           ReturnValue;
	} params;

	params.TestObject = TestObject;
	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Delay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Delay"));

	struct
	{
		class UObject*                 WorldContextObject;
		float                          Duration;
		struct FLatentActionInfo       LatentInfo;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 ObjectToModify                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::CreateCopyForUndoBuffer(class UObject* ObjectToModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer"));

	struct
	{
		class UObject*                 ObjectToModify;
	} params;

	params.ObjectToModify = ObjectToModify;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TScriptInterface<class UInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UKismetSystemLibrary::Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_InterfaceToObject"));

	struct
	{
		TScriptInterface<class UInterface> Interface;
		class UObject*                 ReturnValue;
	} params;

	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_AssetToObject
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TAssetPtr<class UObject>       Asset                          (ConstParm, Parm, OutParm, ReferenceParm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UKismetSystemLibrary::Conv_AssetToObject(TAssetPtr<class UObject> Asset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_AssetToObject"));

	struct
	{
		TAssetPtr<class UObject>       Asset;
		class UObject*                 ReturnValue;
	} params;

	params.Asset = Asset;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_AssetClassToClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TAssetPtr<class UClass>        AssetClass                     (ConstParm, Parm, OutParm, ReferenceParm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UKismetSystemLibrary::Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_AssetClassToClass"));

	struct
	{
		TAssetPtr<class UClass>        AssetClass;
		class UClass*                  ReturnValue;
	} params;

	params.AssetClass = AssetClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ControlScreensaver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bAllowScreenSaver              (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ControlScreensaver"));

	struct
	{
		bool                           bAllowScreenSaver;
	} params;

	params.bAllowScreenSaver = bAllowScreenSaver;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW"));

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FTransform              ComponentTransform;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED"));

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FTransform              ComponentTransform;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW"));

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FTransform              ComponentTransform;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED"));

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FTransform              ComponentTransform;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CollectGarbage
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::CollectGarbage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CollectGarbage"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<ECollisionChannel> TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 CapsulePos;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 CapsulePos;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 CapsulePos;
		float                          Radius;
		float                          HalfHeight;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 CapsulePos;
		float                          Radius;
		float                          HalfHeight;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 HalfSize;
		struct FRotator                Orientation;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingle
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingle"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 HalfSize;
		struct FRotator                Orientation;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		struct FHitResult              OutHit;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 HalfSize;
		struct FRotator                Orientation;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMulti
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMulti"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 HalfSize;
		struct FRotator                Orientation;
		TEnumAsByte<ETraceTypeQuery>   TraceChannel;
		bool                           bTraceComplex;
		TArray<class AActor*>          ActorsToIgnore;
		TEnumAsByte<EDrawDebugTrace>   DrawDebugType;
		TArray<struct FHitResult>      OutHits;
		bool                           bIgnoreSelf;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 BoxPos;
		struct FVector                 Extent;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 BoxPos;
		struct FVector                 Extent;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ComponentClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class UPrimitiveComponent*> OutComponents;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 BoxPos;
		struct FVector                 BoxExtent;
		TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 BoxPos;
		struct FVector                 BoxExtent;
		TEnumAsByte<EOverlapFilterOption> Filter;
		class UClass*                  ActorClassFilter;
		TArray<class AActor*>          ActorsToIgnore;
		TArray<class AActor*>          OutActors;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.AddFloatHistorySample
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FDebugFloatHistory      ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDebugFloatHistory UKismetSystemLibrary::AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.AddFloatHistorySample"));

	struct
	{
		float                          Value;
		struct FDebugFloatHistory      FloatHistory;
		struct FDebugFloatHistory      ReturnValue;
	} params;

	params.Value = Value;
	params.FloatHistory = FloatHistory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimTrailing
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimTrailing"));

	struct
	{
		struct FText                   InText;
		struct FText                   ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimPrecedingAndTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing"));

	struct
	{
		struct FText                   InText;
		struct FText                   ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPreceding
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimPreceding(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPreceding"));

	struct
	{
		struct FText                   InText;
		struct FText                   ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsTransient
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsTransient(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsTransient"));

	struct
	{
		struct FText                   InText;
		bool                           ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsEmpty
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsEmpty(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsEmpty"));

	struct
	{
		struct FText                   InText;
		bool                           ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsCultureInvariant
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsCultureInvariant(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsCultureInvariant"));

	struct
	{
		struct FText                   InText;
		bool                           ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_TextText"));

	struct
	{
		struct FText                   A;
		struct FText                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText"));

	struct
	{
		struct FText                   A;
		struct FText                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.GetEmptyText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::GetEmptyText()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.GetEmptyText"));

	struct
	{
		struct FText                   ReturnValue;
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Format
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InPattern                      (Parm)
// TArray<struct FFormatTextArgument> InArgs                         (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Format(const struct FText& InPattern, TArray<struct FFormatTextArgument> InArgs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Format"));

	struct
	{
		struct FText                   InPattern;
		TArray<struct FFormatTextArgument> InArgs;
		struct FText                   ReturnValue;
	} params;

	params.InPattern = InPattern;
	params.InArgs = InArgs;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.FindTextInLocalizationTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  Namespace                      (Parm, ZeroConstructor)
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FText                   OutText                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, struct FText* OutText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.FindTextInLocalizationTable"));

	struct
	{
		class FString                  Namespace;
		class FString                  Key;
		struct FText                   OutText;
		bool                           ReturnValue;
	} params;

	params.Namespace = Namespace;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutText != nullptr)
		*OutText = params.OutText;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_TextText"));

	struct
	{
		struct FText                   A;
		struct FText                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText"));

	struct
	{
		struct FText                   A;
		struct FText                   B;
		bool                           ReturnValue;
	} params;

	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_TextToString
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetTextLibrary::Conv_TextToString(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_TextToString"));

	struct
	{
		struct FText                   InText;
		class FString                  ReturnValue;
	} params;

	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_StringToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_StringToText(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_StringToText"));

	struct
	{
		class FString                  InString;
		struct FText                   ReturnValue;
	} params;

	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_NameToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_NameToText(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_NameToText"));

	struct
	{
		struct FName                   InName;
		struct FText                   ReturnValue;
	} params;

	params.InName = InName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_IntToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_IntToText"));

	struct
	{
		int                            Value;
		bool                           bUseGrouping;
		int                            MinimumIntegralDigits;
		int                            MaximumIntegralDigits;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_FloatToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_FloatToText"));

	struct
	{
		float                          Value;
		TEnumAsByte<ERoundingMode>     RoundingMode;
		bool                           bUseGrouping;
		int                            MinimumIntegralDigits;
		int                            MaximumIntegralDigits;
		int                            MinimumFractionalDigits;
		int                            MaximumFractionalDigits;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ByteToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_ByteToText(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_ByteToText"));

	struct
	{
		unsigned char                  Value;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_BoolToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_BoolToText(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_BoolToText"));

	struct
	{
		bool                           InBool;
		struct FText                   ReturnValue;
	} params;

	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimespan_Timespan
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan               InTimespan                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsTimespan_Timespan(const struct FTimespan& InTimespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimespan_Timespan"));

	struct
	{
		struct FTimespan               InTimespan;
		struct FText                   ReturnValue;
	} params;

	params.InTimespan = InTimespan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTime_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTime_DateTime"));

	struct
	{
		struct FDateTime               In;
		struct FText                   ReturnValue;
	} params;

	params.In = In;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsPercent_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsPercent_Float"));

	struct
	{
		float                          Value;
		TEnumAsByte<ERoundingMode>     RoundingMode;
		bool                           bUseGrouping;
		int                            MinimumIntegralDigits;
		int                            MaximumIntegralDigits;
		int                            MinimumFractionalDigits;
		int                            MaximumFractionalDigits;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDateTime_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsDateTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDateTime_DateTime"));

	struct
	{
		struct FDateTime               In;
		struct FText                   ReturnValue;
	} params;

	params.In = In;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDate_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsDate_DateTime(const struct FDateTime& InDateTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDate_DateTime"));

	struct
	{
		struct FDateTime               InDateTime;
		struct FText                   ReturnValue;
	} params;

	params.InDateTime = InDateTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Integer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  CurrencyCode                   (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Integer"));

	struct
	{
		int                            Value;
		TEnumAsByte<ERoundingMode>     RoundingMode;
		bool                           bUseGrouping;
		int                            MinimumIntegralDigits;
		int                            MaximumIntegralDigits;
		int                            MinimumFractionalDigits;
		int                            MaximumFractionalDigits;
		class FString                  CurrencyCode;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  CurrencyCode                   (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Float"));

	struct
	{
		float                          Value;
		TEnumAsByte<ERoundingMode>     RoundingMode;
		bool                           bUseGrouping;
		int                            MinimumIntegralDigits;
		int                            MaximumIntegralDigits;
		int                            MinimumFractionalDigits;
		int                            MaximumFractionalDigits;
		class FString                  CurrencyCode;
		struct FText                   ReturnValue;
	} params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LoadingPerfBPFuncLib.WriteTimings
// (Final, Native, Static, Public, BlueprintCallable)

void ULoadingPerfBPFuncLib::WriteTimings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LoadingPerfBPFuncLib.WriteTimings"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.LoadingPerfBPFuncLib.MarkEndStreaming
// (Final, Native, Static, Public, BlueprintCallable)

void ULoadingPerfBPFuncLib::MarkEndStreaming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LoadingPerfBPFuncLib.MarkEndStreaming"));

	struct
	{
	} params;


	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelUnload
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNestedWorldCompositionFunctionLib::TriggerManualNestedLevelUnload(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelUnload"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   PackageName;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelLoad
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNestedWorldCompositionFunctionLib::TriggerManualNestedLevelLoad(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelLoad"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   PackageName;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisibleRecursive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNestedWorldCompositionFunctionLib::IsNestedLevelVisibleRecursive(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisibleRecursive"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   PackageName;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisible
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNestedWorldCompositionFunctionLib::IsNestedLevelVisible(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisible"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FName                   PackageName;
		bool                           ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            RepIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void UNetPushModelHelpers::MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex"));

	struct
	{
		class UObject*                 Object;
		int                            RepIndex;
		struct FName                   PropertyName;
	} params;

	params.Object = Object;
	params.RepIndex = RepIndex;
	params.PropertyName = PropertyName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NetPushModelHelpers.MarkPropertyDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void UNetPushModelHelpers::MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirty"));

	struct
	{
		class UObject*                 Object;
		struct FName                   PropertyName;
	} params;

	params.Object = Object;
	params.PropertyName = PropertyName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithShortQuarterResArea
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ShortQuarterRes                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithShortQuarterResArea(class UParticleSystemComponent* Component, float ShortQuarterRes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithShortQuarterResArea"));

	struct
	{
		class UParticleSystemComponent* Component;
		float                          ShortQuarterRes;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;
	params.ShortQuarterRes = ShortQuarterRes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongNearTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LongNearTransition             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithLongNearTransition(class UParticleSystemComponent* Component, float LongNearTransition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongNearTransition"));

	struct
	{
		class UParticleSystemComponent* Component;
		float                          LongNearTransition;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;
	params.LongNearTransition = LongNearTransition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongFarTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LongFarTransition              (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithLongFarTransition(class UParticleSystemComponent* Component, float LongFarTransition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongFarTransition"));

	struct
	{
		class UParticleSystemComponent* Component;
		float                          LongFarTransition;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;
	params.LongFarTransition = LongFarTransition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithoutPerVertexLighting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithoutPerVertexLighting(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithoutPerVertexLighting"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLowAlphaThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LowAlphaThreshold              (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithLowAlphaThreshold(class UParticleSystemComponent* Component, float LowAlphaThreshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLowAlphaThreshold"));

	struct
	{
		class UParticleSystemComponent* Component;
		float                          LowAlphaThreshold;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;
	params.LowAlphaThreshold = LowAlphaThreshold;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLoopZero
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithLoopZero(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLoopZero"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithKillOnCompleteUnticked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithKillOnCompleteUnticked(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithKillOnCompleteUnticked"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithHighSpawnRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            HighSpawnRate                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithHighSpawnRate(class UParticleSystemComponent* Component, int HighSpawnRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithHighSpawnRate"));

	struct
	{
		class UParticleSystemComponent* Component;
		int                            HighSpawnRate;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;
	params.HighSpawnRate = HighSpawnRate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithDurationZero
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithDurationZero(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithDurationZero"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersUsingMaxDrawCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersUsingMaxDrawCount(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersUsingMaxDrawCount"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersOnCPU
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UParticleWarningFunctions::RetrieveInfoOnEmittersOnCPU(class UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersOnCPU"));

	struct
	{
		class UParticleSystemComponent* Component;
		TArray<class FString>          ReturnValue;
	} params;

	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshesWithMorphTargets
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMesh*>   Meshes                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FName>           MorphTargetNames               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<float>                  MorphTargetWeights             (ConstParm, Parm, ZeroConstructor)
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USkeletalMesh* USkeletalMeshMergeBlueprintFunctionLibrary::MergeSkeletalMeshesWithMorphTargets(TArray<class USkeletalMesh*> Meshes, TArray<struct FName> MorphTargetNames, TArray<float> MorphTargetWeights)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshesWithMorphTargets"));

	struct
	{
		TArray<class USkeletalMesh*>   Meshes;
		TArray<struct FName>           MorphTargetNames;
		TArray<float>                  MorphTargetWeights;
		class USkeletalMesh*           ReturnValue;
	} params;

	params.Meshes = Meshes;
	params.MorphTargetNames = MorphTargetNames;
	params.MorphTargetWeights = MorphTargetWeights;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshes
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMesh*>   Meshes                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USkeletalMesh* USkeletalMeshMergeBlueprintFunctionLibrary::MergeSkeletalMeshes(TArray<class USkeletalMesh*> Meshes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshes"));

	struct
	{
		TArray<class USkeletalMesh*>   Meshes;
		class USkeletalMesh*           ReturnValue;
	} params;

	params.Meshes = Meshes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.VisualLoggerKismetLibrary.LogText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogText(class UObject* WorldContextObject, const class FString& Text, const struct FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogText"));

	struct
	{
		class UObject*                 WorldContextObject;
		class FString                  Text;
		struct FName                   LogCategory;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Text = Text;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.VisualLoggerKismetLibrary.LogLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// struct FLinearColor            ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogLocation"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FVector                 Location;
		class FString                  Text;
		struct FLinearColor            ObjectColor;
		float                          Radius;
		struct FName                   LogCategory;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Radius = Radius;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.VisualLoggerKismetLibrary.LogBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FBox                    BoxShape                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// struct FLinearColor            ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogBox"));

	struct
	{
		class UObject*                 WorldContextObject;
		struct FBox                    BoxShape;
		class FString                  Text;
		struct FLinearColor            ObjectColor;
		struct FName                   LogCategory;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.BoxShape = BoxShape;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.Stop"));

	struct
	{
		bool                           bImmediate;
	} params;

	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.SetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::SetScale(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetScale"));

	struct
	{
		float                          NewDuration;
	} params;

	params.NewDuration = NewDuration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.SetDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::SetDuration(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetDuration"));

	struct
	{
		float                          NewDuration;
	} params;

	params.NewDuration = NewDuration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_TextSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UCanvas::K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_TextSize"));

	struct
	{
		class UFont*                   RenderFont;
		class FString                  RenderText;
		struct FVector2D               Scale;
		struct FVector2D               ReturnValue;
	} params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_StrLen
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UCanvas::K2_StrLen(class UFont* RenderFont, const class FString& RenderText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_StrLen"));

	struct
	{
		class UFont*                   RenderFont;
		class FString                  RenderText;
		struct FVector2D               ReturnValue;
	} params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_Project
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCanvas::K2_Project(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Project"));

	struct
	{
		struct FVector                 WorldLocation;
		struct FVector                 ReturnValue;
	} params;

	params.WorldLocation = WorldLocation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_DrawTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, ZeroConstructor)

void UCanvas::K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTriangle"));

	struct
	{
		class UTexture*                RenderTexture;
		TArray<struct FCanvasUVTri>    Triangles;
	} params;

	params.RenderTexture = RenderTexture;
	params.Triangles = Triangles;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTexture"));

	struct
	{
		class UTexture*                RenderTexture;
		struct FVector2D               ScreenPosition;
		struct FVector2D               ScreenSize;
		struct FVector2D               CoordinatePosition;
		struct FVector2D               CoordinateSize;
		struct FLinearColor            RenderColor;
		TEnumAsByte<EBlendMode>        BlendMode;
		float                          Rotation;
		struct FVector2D               PivotPoint;
	} params;

	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Kerning                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ShadowColor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ShadowOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreX                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreY                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOutlined                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            OutlineColor                   (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawText"));

	struct
	{
		class UFont*                   RenderFont;
		class FString                  RenderText;
		struct FVector2D               ScreenPosition;
		struct FLinearColor            RenderColor;
		float                          Kerning;
		struct FLinearColor            ShadowColor;
		struct FVector2D               ShadowOffset;
		bool                           bCentreX;
		bool                           bCentreY;
		bool                           bOutlined;
		struct FLinearColor            OutlineColor;
	} params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.ScreenPosition = ScreenPosition;
	params.RenderColor = RenderColor;
	params.Kerning = Kerning;
	params.ShadowColor = ShadowColor;
	params.ShadowOffset = ShadowOffset;
	params.bCentreX = bCentreX;
	params.bCentreY = bCentreY;
	params.bOutlined = bOutlined;
	params.OutlineColor = OutlineColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawPolygon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumberOfSides                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawPolygon"));

	struct
	{
		class UTexture*                RenderTexture;
		struct FVector2D               ScreenPosition;
		struct FVector2D               Radius;
		int                            NumberOfSides;
		struct FLinearColor            RenderColor;
	} params;

	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.Radius = Radius;
	params.NumberOfSides = NumberOfSides;
	params.RenderColor = RenderColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawMaterialTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, ZeroConstructor)

void UCanvas::K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterialTriangle"));

	struct
	{
		class UMaterialInterface*      RenderMaterial;
		TArray<struct FCanvasUVTri>    Triangles;
	} params;

	params.RenderMaterial = RenderMaterial;
	params.Triangles = Triangles;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawMaterial
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterial"));

	struct
	{
		class UMaterialInterface*      RenderMaterial;
		struct FVector2D               ScreenPosition;
		struct FVector2D               ScreenSize;
		struct FVector2D               CoordinatePosition;
		struct FVector2D               CoordinateSize;
		float                          Rotation;
		struct FVector2D               PivotPoint;
	} params;

	params.RenderMaterial = RenderMaterial;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawLine
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               ScreenPositionA                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPositionB                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawLine"));

	struct
	{
		struct FVector2D               ScreenPositionA;
		struct FVector2D               ScreenPositionB;
		float                          Thickness;
		struct FLinearColor            RenderColor;
	} params;

	params.ScreenPositionA = ScreenPositionA;
	params.ScreenPositionB = ScreenPositionB;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBox"));

	struct
	{
		struct FVector2D               ScreenPosition;
		struct FVector2D               ScreenSize;
		float                          Thickness;
	} params;

	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawBorder
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture*                BorderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                BackgroundTexture              (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                LeftBorderTexture              (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                RightBorderTexture             (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                TopBorderTexture               (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                BottomBorderTexture            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               BorderScale                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               BackgroundScale                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CornerSize                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBorder"));

	struct
	{
		class UTexture*                BorderTexture;
		class UTexture*                BackgroundTexture;
		class UTexture*                LeftBorderTexture;
		class UTexture*                RightBorderTexture;
		class UTexture*                TopBorderTexture;
		class UTexture*                BottomBorderTexture;
		struct FVector2D               ScreenPosition;
		struct FVector2D               ScreenSize;
		struct FVector2D               CoordinatePosition;
		struct FVector2D               CoordinateSize;
		struct FLinearColor            RenderColor;
		struct FVector2D               BorderScale;
		struct FVector2D               BackgroundScale;
		float                          Rotation;
		struct FVector2D               PivotPoint;
		struct FVector2D               CornerSize;
	} params;

	params.BorderTexture = BorderTexture;
	params.BackgroundTexture = BackgroundTexture;
	params.LeftBorderTexture = LeftBorderTexture;
	params.RightBorderTexture = RightBorderTexture;
	params.TopBorderTexture = TopBorderTexture;
	params.BottomBorderTexture = BottomBorderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BorderScale = BorderScale;
	params.BackgroundScale = BackgroundScale;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;
	params.CornerSize = CornerSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_Deproject
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldOrigin                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Deproject"));

	struct
	{
		struct FVector2D               ScreenPosition;
		struct FVector                 WorldOrigin;
		struct FVector                 WorldDirection;
	} params;

	params.ScreenPosition = ScreenPosition;

	UObject::ProcessEvent(fn, &params);

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.Canvas.DrawTextures
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FTextureRenderData> RenderDatas                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UCanvas::DrawTextures(TArray<struct FTextureRenderData> RenderDatas)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.DrawTextures"));

	struct
	{
		TArray<struct FTextureRenderData> RenderDatas;
	} params;

	params.RenderDatas = RenderDatas;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.WidgetReflector
// (Exec, Native, Public)

void UCheatManager::WidgetReflector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.WidgetReflector"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Walk
// (Exec, Native, Public)

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Walk"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewSelf
// (Exec, Native, Public)

void UCheatManager::ViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewSelf"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewPlayer
// (Exec, Native, Public)
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void UCheatManager::ViewPlayer(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewPlayer"));

	struct
	{
		class FString                  S;
	} params;

	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewClass
// (Exec, Native, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewClass(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewClass"));

	struct
	{
		class UClass*                  DesiredClass;
	} params;

	params.DesiredClass = DesiredClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewActor
// (Exec, Native, Public)
// Parameters:
// struct FName                   ActorName                      (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewActor(const struct FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewActor"));

	struct
	{
		struct FName                   ActorName;
	} params;

	params.ActorName = ActorName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ToggleDebugCamera
// (Exec, Native, Public)

void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleDebugCamera"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ToggleAILogging
// (Exec, Native, Public)

void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleAILogging"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.TextureAtlasVisualizer
// (Exec, Native, Public)

void UCheatManager::TextureAtlasVisualizer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.TextureAtlasVisualizer"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.TestCollisionDistance
// (Exec, Native, Public)

void UCheatManager::TestCollisionDistance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.TestCollisionDistance"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Teleport
// (Exec, Native, Public)

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Teleport"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Summon
// (Exec, Native, Public)
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)

void UCheatManager::Summon(const class FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Summon"));

	struct
	{
		class FString                  ClassName;
	} params;

	params.ClassName = ClassName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.StreamLevelOut
// (Exec, Native, Public)
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelOut"));

	struct
	{
		struct FName                   PackageName;
	} params;

	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.StreamLevelIn
// (Exec, Native, Public)
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelIn"));

	struct
	{
		struct FName                   PackageName;
	} params;

	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Slomo
// (Exec, Native, Public)
// Parameters:
// float                          T                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::Slomo(float T)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Slomo"));

	struct
	{
		float                          T;
	} params;

	params.T = T;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetWorldOrigin
// (Final, Exec, Native, Public)

void UCheatManager::SetWorldOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetWorldOrigin"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetNavDrawDistance
// (Final, Exec, Native, Public)
// Parameters:
// float                          DrawDistance                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::SetNavDrawDistance(float DrawDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetNavDrawDistance"));

	struct
	{
		float                          DrawDistance;
	} params;

	params.DrawDistance = DrawDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetMouseSensitivityToDefault
// (Final, Exec, Native, Public)

void UCheatManager::SetMouseSensitivityToDefault()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetMouseSensitivityToDefault"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ServerToggleAILogging
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UCheatManager::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ServerToggleAILogging"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.RebuildNavigation
// (Exec, Native, Public)

void UCheatManager::RebuildNavigation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.RebuildNavigation"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.PlayersOnly
// (Exec, Native, Public)

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.PlayersOnly"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.OnlyLoadLevel
// (Exec, Native, Public)
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.OnlyLoadLevel"));

	struct
	{
		struct FName                   PackageName;
	} params;

	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.LogLoc
// (Exec, Native, Public)

void UCheatManager::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.LogLoc"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.InvertMouse
// (Final, Exec, Native, Public)

void UCheatManager::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.InvertMouse"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.God
// (Exec, Native, Public)

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.God"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Ghost
// (Exec, Native, Public)

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Ghost"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FreezeFrame
// (Exec, Native, Public)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FreezeFrame"));

	struct
	{
		float                          Delay;
	} params;

	params.Delay = Delay;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FontAtlasVisualizer
// (Exec, Native, Public)

void UCheatManager::FontAtlasVisualizer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FontAtlasVisualizer"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Fly
// (Exec, Native, Public)

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Fly"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FlushLog
// (Exec, Native, Public)

void UCheatManager::FlushLog()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FlushLog"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpVoiceMutingState
// (Exec, Native, Public)

void UCheatManager::DumpVoiceMutingState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpVoiceMutingState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpPartyState
// (Exec, Native, Public)

void UCheatManager::DumpPartyState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpPartyState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpOnlineSessionState
// (Exec, Native, Public)

void UCheatManager::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpOnlineSessionState"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyTarget
// (Exec, Native, Public)

void UCheatManager::DestroyTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyTarget"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyPawns
// (Exec, Native, Public)
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyPawns"));

	struct
	{
		class UClass*                  aClass;
	} params;

	params.aClass = aClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyAllPawnsExceptTarget
// (Final, Exec, Native, Public)

void UCheatManager::DestroyAllPawnsExceptTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAllPawnsExceptTarget"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyAll
// (Exec, Native, Public)
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAll"));

	struct
	{
		class UClass*                  aClass;
	} params;

	params.aClass = aClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepSize
// (Exec, Native, Public)
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepSize"));

	struct
	{
		float                          HalfHeight;
		float                          Radius;
	} params;

	params.HalfHeight = HalfHeight;
	params.Radius = Radius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepPawn
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepPawn"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepComplex
// (Exec, Native, Public)
// Parameters:
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepComplex"));

	struct
	{
		bool                           bTraceComplex;
	} params;

	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepClear
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepClear()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepClear"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepChannel
// (Exec, Native, Public)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepChannel"));

	struct
	{
		TEnumAsByte<ECollisionChannel> Channel;
	} params;

	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepCapture
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepCapture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepCapture"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweep
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweep()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweep"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DamageTarget
// (Final, Exec, Native, Public)
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DamageTarget(float DamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DamageTarget"));

	struct
	{
		float                          DamageAmount;
	} params;

	params.DamageAmount = DamageAmount;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ChangeSize
// (Exec, Native, Public)
// Parameters:
// float                          F                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ChangeSize"));

	struct
	{
		float                          F;
	} params;

	params.F = F;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.BugItStringCreator
// (Exec, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  GoString                       (Parm, OutParm, ZeroConstructor)
// class FString                  LocString                      (Parm, OutParm, ZeroConstructor)

void UCheatManager::BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItStringCreator"));

	struct
	{
		struct FVector                 ViewLocation;
		struct FRotator                ViewRotation;
		class FString                  GoString;
		class FString                  LocString;
	} params;

	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;

	UObject::ProcessEvent(fn, &params);

	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;
}


// Function Engine.CheatManager.BugItGo
// (Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItGo"));

	struct
	{
		float                          X;
		float                          Y;
		float                          Z;
		float                          Pitch;
		float                          Yaw;
		float                          Roll;
	} params;

	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.BugIt
// (Exec, Native, Public)
// Parameters:
// class FString                  ScreenShotDescription          (Parm, ZeroConstructor)

void UCheatManager::BugIt(const class FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugIt"));

	struct
	{
		class FString                  ScreenShotDescription;
	} params;

	params.ScreenShotDescription = ScreenShotDescription;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CurveLinearColor.GetLinearColorValue
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveLinearColor.GetLinearColorValue"));

	struct
	{
		float                          InTime;
		struct FLinearColor            ReturnValue;
	} params;

	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CurveVector.GetVectorValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCurveVector::GetVectorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveVector.GetVectorValue"));

	struct
	{
		float                          InTime;
		struct FVector                 ReturnValue;
	} params;

	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerInput.SetMouseSensitivity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Sensitivity                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetMouseSensitivity(float Sensitivity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetMouseSensitivity"));

	struct
	{
		float                          Sensitivity;
	} params;

	params.Sensitivity = Sensitivity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetForceFeedbackIntensity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Intensity                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetForceFeedbackIntensity(float Intensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetForceFeedbackIntensity"));

	struct
	{
		float                          Intensity;
	} params;

	params.Intensity = Intensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisScale
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisScale(const struct FName& CombinedAxisName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisScale"));

	struct
	{
		struct FName                   CombinedAxisName;
		float                          Scale;
	} params;

	params.CombinedAxisName = CombinedAxisName;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisNonLinearity
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          NonLinearity                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisNonLinearity(const struct FName& CombinedAxisName, float NonLinearity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisNonLinearity"));

	struct
	{
		struct FName                   CombinedAxisName;
		float                          NonLinearity;
	} params;

	params.CombinedAxisName = CombinedAxisName;
	params.NonLinearity = NonLinearity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisLowerDeadzone
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          LowerDeadzone                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisLowerDeadzone(const struct FName& CombinedAxisName, float LowerDeadzone)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisLowerDeadzone"));

	struct
	{
		struct FName                   CombinedAxisName;
		float                          LowerDeadzone;
	} params;

	params.CombinedAxisName = CombinedAxisName;
	params.LowerDeadzone = LowerDeadzone;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetBind
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   BindName                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Command                        (Parm, ZeroConstructor)

void UPlayerInput::SetBind(const struct FName& BindName, const class FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetBind"));

	struct
	{
		struct FName                   BindName;
		class FString                  Command;
	} params;

	params.BindName = BindName;
	params.Command = Command;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertMouseAxis
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertMouseAxis(const struct FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertMouseAxis"));

	struct
	{
		struct FName                   AxisName;
	} params;

	params.AxisName = AxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertGamepadAxis
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertGamepadAxis(const struct FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertGamepadAxis"));

	struct
	{
		struct FName                   AxisName;
	} params;

	params.AxisName = AxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertCombinedAxisY
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertCombinedAxisY(const struct FName& CombinedAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertCombinedAxisY"));

	struct
	{
		struct FName                   CombinedAxisName;
	} params;

	params.CombinedAxisName = CombinedAxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertCombinedAxisX
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertCombinedAxisX(const struct FName& CombinedAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertCombinedAxisX"));

	struct
	{
		struct FName                   CombinedAxisName;
	} params;

	params.CombinedAxisName = CombinedAxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertAxisKey
// (Final, Exec, Native, Public)
// Parameters:
// struct FKey                    AxisKey                        (ConstParm, Parm)

void UPlayerInput::InvertAxisKey(const struct FKey& AxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertAxisKey"));

	struct
	{
		struct FKey                    AxisKey;
	} params;

	params.AxisKey = AxisKey;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.ClearSmoothing
// (Final, Exec, Native, Public)

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.ClearSmoothing"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelStreaming.IsStreamingStatePending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsStreamingStatePending()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsStreamingStatePending"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelVisible
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelVisible"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelLoaded
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelLoaded"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetLevelScriptActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ALevelScriptActor*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ALevelScriptActor* ULevelStreaming::GetLevelScriptActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetLevelScriptActor"));

	struct
	{
		class ALevelScriptActor*       ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.CreateInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                  UniqueInstanceName             (Parm, ZeroConstructor)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ULevelStreaming* ULevelStreaming::CreateInstance(const class FString& UniqueInstanceName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.CreateInstance"));

	struct
	{
		class FString                  UniqueInstanceName;
		class ULevelStreaming*         ReturnValue;
	} params;

	params.UniqueInstanceName = UniqueInstanceName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetVectorParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Value;
	} params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetTextureParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                Value;
	} params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetScalarParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.MergeParameters
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::MergeParameters(class UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.MergeParameters"));

	struct
	{
		class UMaterialInstance*       MaterialInstance;
	} params;

	params.MaterialInstance = MaterialInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       MaterialA                      (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       MaterialB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams"));

	struct
	{
		class UMaterialInstance*       MaterialA;
		class UMaterialInstance*       MaterialB;
		float                          Alpha;
	} params;

	params.MaterialA = MaterialA;
	params.MaterialB = MaterialB;
	params.Alpha = Alpha;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            ReturnValue;
	} params;

	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                ReturnValue;
	} params;

	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue"));

	struct
	{
		struct FName                   ParameterName;
		float                          ReturnValue;
	} params;

	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      SourceMaterialToCopyFrom       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverride                      (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters"));

	struct
	{
		class UMaterialInterface*      SourceMaterialToCopyFrom;
		bool                           bOverride;
	} params;

	params.SourceMaterialToCopyFrom = SourceMaterialToCopyFrom;
	params.bOverride = bOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::CopyParameterOverrides(class UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.CopyParameterOverrides"));

	struct
	{
		class UMaterialInstance*       MaterialInstance;
	} params;

	params.MaterialInstance = MaterialInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Texture2D.Blueprint_GetSizeY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeY"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Texture2D.Blueprint_GetSizeX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeX"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CanvasRenderTarget2D.UpdateResource
// (Native, Public, BlueprintCallable)

void UCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.UpdateResource"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.Render
// (Final, Native, Public, BlueprintCallable)

void UCanvasRenderTarget2D::Render()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.Render"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCanvas*                 Canvas                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::ReceiveUpdate(class UCanvas* Canvas, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.ReceiveUpdate"));

	struct
	{
		class UCanvas*                 Canvas;
		int                            Width;
		int                            Height;
	} params;

	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.GetSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Width                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::GetSize(int* Width, int* Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.GetSize"));

	struct
	{
		int                            Width;
		int                            Height;
	} params;


	UObject::ProcessEvent(fn, &params);

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
}


// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  CanvasRenderTarget2DClass      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECanvasRenderTargetMips> Mips                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           HDR                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CreateTextureResource          (Parm, ZeroConstructor, IsPlainOldData)
// class UCanvasRenderTarget2D*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCanvasRenderTarget2D* UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		class UClass*                  CanvasRenderTarget2DClass;
		int                            Width;
		int                            Height;
		TEnumAsByte<ECanvasRenderTargetMips> Mips;
		bool                           HDR;
		bool                           CreateTextureResource;
		class UCanvasRenderTarget2D*   ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	params.Width = Width;
	params.Height = Height;
	params.Mips = Mips;
	params.HDR = HDR;
	params.CreateTextureResource = CreateTextureResource;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CompressedCanvasRenderTarget2D.UpdateResource
// (Native, Public, BlueprintCallable)

void UCompressedCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CompressedCanvasRenderTarget2D.UpdateResource"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.UpdateResource
// (Final, Native, Public, BlueprintCallable)

void UMaybeCompressedCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.UpdateResource"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.GetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture* UMaybeCompressedCanvasRenderTarget2D::GetTexture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.GetTexture"));

	struct
	{
		class UTexture*                ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.CreateMaybeCompressedCanvasRenderTarget2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECanvasRenderTargetMips> Mips                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           HDR                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CreateTextureResource          (Parm, ZeroConstructor, IsPlainOldData)
// class UMaybeCompressedCanvasRenderTarget2D* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaybeCompressedCanvasRenderTarget2D* UMaybeCompressedCanvasRenderTarget2D::CreateMaybeCompressedCanvasRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.CreateMaybeCompressedCanvasRenderTarget2D"));

	struct
	{
		class UObject*                 WorldContextObject;
		int                            Width;
		int                            Height;
		TEnumAsByte<ECanvasRenderTargetMips> Mips;
		bool                           HDR;
		bool                           CreateTextureResource;
		class UMaybeCompressedCanvasRenderTarget2D* ReturnValue;
	} params;

	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Mips = Mips;
	params.HDR = HDR;
	params.CreateTextureResource = CreateTextureResource;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsValid()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsValid"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsStringPulled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsStringPulled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsStringPulled"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsPartial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsPartial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsPartial"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetPathLength"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathCost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetPathCost"));

	struct
	{
		float                          ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetDebugString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UNavigationPath::GetDebugString()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetDebugString"));

	struct
	{
		class FString                  ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.EnableRecalculationOnInvalidation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ENavigationOptionFlag> DoRecalculation                (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.EnableRecalculationOnInvalidation"));

	struct
	{
		TEnumAsByte<ENavigationOptionFlag> DoRecalculation;
	} params;

	params.DoRecalculation = DoRecalculation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationPath.EnableDebugDrawing
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           bShouldDrawDebugData           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PathColor                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.EnableDebugDrawing"));

	struct
	{
		bool                           bShouldDrawDebugData;
		struct FLinearColor            PathColor;
	} params;

	params.bShouldDrawDebugData = bShouldDrawDebugData;
	params.PathColor = PathColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TwitterIntegrationBase.TwitterRequest
// (Native, Public, HasOutParms)
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TArray<class FString>          ParamKeysAndValues             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ETwitterRequestMethod> RequestMethod                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::TwitterRequest(const class FString& URL, TArray<class FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.TwitterRequest"));

	struct
	{
		class FString                  URL;
		TArray<class FString>          ParamKeysAndValues;
		TEnumAsByte<ETwitterRequestMethod> RequestMethod;
		int                            AccountIndex;
		bool                           ReturnValue;
	} params;

	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.ShowTweetUI
// (Native, Public)
// Parameters:
// class FString                  InitialMessage                 (Parm, ZeroConstructor)
// class FString                  URL                            (Parm, ZeroConstructor)
// class FString                  Picture                        (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.ShowTweetUI"));

	struct
	{
		class FString                  InitialMessage;
		class FString                  URL;
		class FString                  Picture;
		bool                           ReturnValue;
	} params;

	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.Init
// (Native, Public)

void UTwitterIntegrationBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.Init"));

	struct
	{
	} params;


	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TwitterIntegrationBase.GetNumAccounts
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTwitterIntegrationBase::GetNumAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetNumAccounts"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountName
// (Native, Public)
// Parameters:
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetAccountName"));

	struct
	{
		int                            AccountIndex;
		class FString                  ReturnValue;
	} params;

	params.AccountIndex = AccountIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.CanShowTweetUI"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.AuthorizeAccounts"));

	struct
	{
		bool                           ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders"));

	struct
	{
		int                            ReturnValue;
	} params;


	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// (Native, Public)
// Parameters:
// class FString                  HeaderName                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPlatformInterfaceWebResponse::GetHeaderValue(const class FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue"));

	struct
	{
		class FString                  HeaderName;
		class FString                  ReturnValue;
	} params;

	params.HeaderName = HeaderName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeader
// (Native, Public, HasOutParms)
// Parameters:
// int                            HeaderIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Header                         (Parm, OutParm, ZeroConstructor)
// class FString                  Value                          (Parm, OutParm, ZeroConstructor)

void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, class FString* Header, class FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeader"));

	struct
	{
		int                            HeaderIndex;
		class FString                  Header;
		class FString                  Value;
	} params;

	params.HeaderIndex = HeaderIndex;

	UObject::ProcessEvent(fn, &params);

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshSocket::InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation"));

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
		struct FVector                 WorldLocation;
		struct FVector                 WorldNormal;
	} params;

	params.SkelComp = SkelComp;
	params.WorldLocation = WorldLocation;
	params.WorldNormal = WorldNormal;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshSocket.GetSocketLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USkeletalMeshSocket::GetSocketLocation(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.GetSocketLocation"));

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
		struct FVector                 ReturnValue;
	} params;

	params.SkelComp = SkelComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
