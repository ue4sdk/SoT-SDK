// Sea of Thieves (2) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "SoT_Engine_parameters.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.ActorComponent.ToggleActive
// (Native, Public, BlueprintCallable)

void UActorComponent::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ToggleActive"));

	UActorComponent_ToggleActive_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetTickGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickGroup"));

	UActorComponent_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetTickableWhenPaused"));

	UActorComponent_SetTickableWhenPaused_Params params;
	params.bTickableWhenPaused = bTickableWhenPaused;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetIsReplicated
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ShouldReplicate                (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetIsReplicated(bool ShouldReplicate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetIsReplicated"));

	UActorComponent_SetIsReplicated_Params params;
	params.ShouldReplicate = ShouldReplicate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetComponentTickEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetComponentTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetComponentTickEnabled"));

	UActorComponent_SetComponentTickEnabled_Params params;
	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.SetActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetActive(bool bNewActive, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.SetActive"));

	UActorComponent_SetActive_Params params;
	params.bNewActive = bNewActive;
	params.bReset = bReset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UActorComponent*               PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent"));

	UActorComponent_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteActor(AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.RemoveTickPrerequisiteActor"));

	UActorComponent_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveTick"));

	UActorComponent_ReceiveTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveEndPlay"));

	UActorComponent_ReceiveEndPlay_Params params;
	params.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UActorComponent::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ReceiveBeginPlay"));

	UActorComponent_ReceiveBeginPlay_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.OnRep_IsActive
// (Native, Public)

void UActorComponent::OnRep_IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.OnRep_IsActive"));

	UActorComponent_OnRep_IsActive_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.K2_DestroyComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::K2_DestroyComponent(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.K2_DestroyComponent"));

	UActorComponent_K2_DestroyComponent_Params params;
	params.Object = Object;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.IsComponentTickEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsComponentTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsComponentTickEnabled"));

	UActorComponent_IsComponentTickEnabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsBeingDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsBeingDestroyed"));

	UActorComponent_IsBeingDestroyed_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.IsActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.IsActive"));

	UActorComponent_IsActive_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetTargetNetDormancy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EComponentNetDormancy> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EComponentNetDormancy> UActorComponent::GetTargetNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetTargetNetDormancy"));

	UActorComponent_GetTargetNetDormancy_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UActorComponent::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.GetOwner"));

	UActorComponent_GetOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.FlushNetDormancy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.FlushNetDormancy"));

	UActorComponent_FlushNetDormancy_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.Deactivate
// (Native, Public, BlueprintCallable)

void UActorComponent::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Deactivate"));

	UActorComponent_Deactivate_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.ComponentHasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::ComponentHasTag(const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.ComponentHasTag"));

	UActorComponent_ComponentHasTag_Params params;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ActorComponent.AddTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UActorComponent*               PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteComponent"));

	UActorComponent_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.AddTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteActor(AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.AddTickPrerequisiteActor"));

	UActorComponent_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ActorComponent.Activate
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ActorComponent.Activate"));

	UActorComponent_Activate_Params params;
	params.bReset = bReset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.UserConstructionScript
// (Event, Public, BlueprintEvent)

void AActor::UserConstructionScript()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.UserConstructionScript"));

	AActor_UserConstructionScript_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.TearOff
// (Native, Public, BlueprintCallable)

void AActor::TearOff()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.TearOff"));

	AActor_TearOff_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SnapRootComponentTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SnapRootComponentTo(AActor* InParentActor, const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SnapRootComponentTo"));

	AActor_SnapRootComponentTo_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetTickGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickGroup"));

	AActor_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetTickableWhenPaused"));

	AActor_SetTickableWhenPaused_Params params;
	params.bTickableWhenPaused = bTickableWhenPaused;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetReplicates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicates                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetReplicates(bool bInReplicates)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicates"));

	AActor_SetReplicates_Params params;
	params.bInReplicates = bInReplicates;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetReplicateMovement
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicateMovement           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetReplicateMovement(bool bInReplicateMovement)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetReplicateMovement"));

	AActor_SetReplicateMovement_Params params;
	params.bInReplicateMovement = bInReplicateMovement;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        NewOwner                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetOwner(AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetOwner"));

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetLifeSpan
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InLifespan                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetLifeSpan(float InLifespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetLifeSpan"));

	AActor_SetLifeSpan_Params params;
	params.InLifespan = InLifespan;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetIgnoreNetTransformUpdates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInIgnoreNetTransformUpdates   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetIgnoreNetTransformUpdates(bool bInIgnoreNetTransformUpdates)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetIgnoreNetTransformUpdates"));

	AActor_SetIgnoreNetTransformUpdates_Params params;
	params.bInIgnoreNetTransformUpdates = bInIgnoreNetTransformUpdates;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorTickEnabled"));

	AActor_SetActorTickEnabled_Params params;
	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorScale3D(const FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorScale3D"));

	AActor_SetActorScale3D_Params params;
	params.NewScale3D = NewScale3D;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::SetActorRotation(const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorRotation"));

	AActor_SetActorRotation_Params params;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.SetActorRelativeScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewRelativeScale               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeScale3D(const FVector& NewRelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorRelativeScale3D"));

	AActor_SetActorRelativeScale3D_Params params;
	params.NewRelativeScale = NewRelativeScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorHiddenInGame
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorHiddenInGame(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorHiddenInGame"));

	AActor_SetActorHiddenInGame_Params params;
	params.bNewHidden = bNewHidden;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.SetActorEnableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewActorEnableCollision       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorEnableCollision(bool bNewActorEnableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.SetActorEnableCollision"));

	AActor_SetActorEnableCollision_Params params;
	params.bNewActorEnableCollision = bNewActorEnableCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.RemoveTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UActorComponent*               PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteComponent"));

	AActor_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.RemoveTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::RemoveTickPrerequisiteActor(AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.RemoveTickPrerequisiteActor"));

	AActor_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveTick"));

	AActor_ReceiveTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveRadialDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DamageReceived                 (Parm, ZeroConstructor, IsPlainOldData)
// UDamageType*                   DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// AController*                   InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, const FVector& Origin, const FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveRadialDamage"));

	AActor_ReceiveRadialDamage_Params params;
	params.DamageReceived = DamageReceived;
	params.DamageType = DamageType;
	params.Origin = Origin;
	params.HitInfo = HitInfo;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceivePointDamage
// (BlueprintAuthorityOnly, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// UDamageType*                   DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ShotFromDirection              (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceivePointDamage(float Damage, UDamageType* DamageType, const FVector& HitLocation, const FVector& HitNormal, UPrimitiveComponent* HitComponent, const FName& BoneName, const FVector& ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceivePointDamage"));

	AActor_ReceivePointDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitComponent = HitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveHit
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// UPrimitiveComponent*           MyComp                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// AActor*                        Other                          (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bSelfMoved                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void AActor::ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, const FVector& HitLocation, const FVector& HitNormal, const FVector& NormalImpulse, const FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveHit"));

	AActor_ReceiveHit_Params params;
	params.MyComp = MyComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.bSelfMoved = bSelfMoved;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveEndPlay"));

	AActor_ReceiveEndPlay_Params params;
	params.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AActor::ReceiveDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveDestroyed"));

	AActor_ReceiveDestroyed_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void AActor::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveBeginPlay"));

	AActor_ReceiveBeginPlay_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// UDamageType*                   DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// AController*                   InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveAnyDamage"));

	AActor_ReceiveAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnReleased
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorOnReleased()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnReleased"));

	AActor_ReceiveActorOnReleased_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchLeave
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchLeave"));

	AActor_ReceiveActorOnInputTouchLeave_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnter
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnter"));

	AActor_ReceiveActorOnInputTouchEnter_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchEnd"));

	AActor_ReceiveActorOnInputTouchEnd_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnInputTouchBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnInputTouchBegin"));

	AActor_ReceiveActorOnInputTouchBegin_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorOnClicked
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorOnClicked()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorOnClicked"));

	AActor_ReceiveActorOnClicked_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// AActor*                        OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorEndOverlap(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndOverlap"));

	AActor_ReceiveActorEndOverlap_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorEndCursorOver
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorEndCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorEndCursorOver"));

	AActor_ReceiveActorEndCursorOver_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// AActor*                        OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorBeginOverlap(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginOverlap"));

	AActor_ReceiveActorBeginOverlap_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.ReceiveActorBeginCursorOver
// (Event, Public, BlueprintEvent)

void AActor::ReceiveActorBeginCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ReceiveActorBeginCursorOver"));

	AActor_ReceiveActorBeginCursorOver_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_Role
// (Native, Public)

void AActor::OnRep_Role()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Role"));

	AActor_OnRep_Role_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_ReplicateMovement
// (Native, Public)

void AActor::OnRep_ReplicateMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicateMovement"));

	AActor_OnRep_ReplicateMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_ReplicatedMovement
// (Native, Public)

void AActor::OnRep_ReplicatedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_ReplicatedMovement"));

	AActor_OnRep_ReplicatedMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_Instigator
// (Native, Public)

void AActor::OnRep_Instigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_Instigator"));

	AActor_OnRep_Instigator_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.OnRep_AttachmentReplication
// (Native, Public)

void AActor::OnRep_AttachmentReplication()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.OnRep_AttachmentReplication"));

	AActor_OnRep_AttachmentReplication_Params params;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.Actor.OnEndPlayDynamicMulticastEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// AActor*                        EndPlayActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::OnEndPlayDynamicMulticastEvent__DelegateSignature(AActor* EndPlayActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.Actor.OnEndPlayDynamicMulticastEvent__DelegateSignature"));

	AActor_OnEndPlayDynamicMulticastEvent__DelegateSignature_Params params;
	params.EndPlayActor = EndPlayActor;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.Actor.OnDestroyedDynamicMulticastEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// AActor*                        DeletedActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::OnDestroyedDynamicMulticastEvent__DelegateSignature(AActor* DeletedActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.Actor.OnDestroyedDynamicMulticastEvent__DelegateSignature"));

	AActor_OnDestroyedDynamicMulticastEvent__DelegateSignature_Params params;
	params.DeletedActor = DeletedActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.MakeNoise
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// APawn*                         NoiseInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRange                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MakeNoise(float Loudness, APawn* NoiseInstigator, const FVector& NoiseLocation, float MaxRange, const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeNoise"));

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseInstigator = NoiseInstigator;
	params.NoiseLocation = NoiseLocation;
	params.MaxRange = MaxRange;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.MakeMIDForMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.MakeMIDForMaterial"));

	AActor_MakeMIDForMaterial_Params params;
	params.Parent = Parent;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_TeleportTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DestLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       DestRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_TeleportTo(const FVector& DestLocation, const FRotator& DestRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_TeleportTo"));

	AActor_K2_TeleportTo_Params params;
	params.DestLocation = DestLocation;
	params.DestRotation = DestRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorTransform"));

	AActor_K2_SetActorTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorRelativeTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     NewRelativeTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeTransform(const FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeTransform"));

	AActor_K2_SetActorRelativeTransform_Params params;
	params.NewRelativeTransform = NewRelativeTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRelativeRotation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeRotation(const FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeRotation"));

	AActor_K2_SetActorRelativeRotation_Params params;
	params.NewRelativeRotation = NewRelativeRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewRelativeLocation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_SetActorRelativeLocation(const FVector& NewRelativeLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorRelativeLocation"));

	AActor_K2_SetActorRelativeLocation_Params params;
	params.NewRelativeLocation = NewRelativeLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_SetActorLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocationAndRotation"));

	AActor_K2_SetActorLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_SetActorLocation"));

	AActor_K2_SetActorLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_OnReset
// (Event, Public, BlueprintEvent)

void AActor::K2_OnReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnReset"));

	AActor_K2_OnReset_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_OnEndViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnEndViewTarget(APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnEndViewTarget"));

	AActor_K2_OnEndViewTarget_Params params;
	params.PC = PC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_OnBecomeViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnBecomeViewTarget(APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_OnBecomeViewTarget"));

	AActor_K2_OnBecomeViewTarget_Params params;
	params.PC = PC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_GetRootComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// USceneComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

USceneComponent* AActor::K2_GetRootComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetRootComponent"));

	AActor_K2_GetRootComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator AActor::K2_GetActorRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorRotation"));

	AActor_K2_GetActorRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::K2_GetActorLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_GetActorLocation"));

	AActor_K2_GetActorLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.K2_DestroyComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UActorComponent*               Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::K2_DestroyComponent(UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyComponent"));

	AActor_K2_DestroyComponent_Params params;
	params.Component = Component;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_DestroyActor
// (Native, Public, BlueprintCallable)

void AActor::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_DestroyActor"));

	AActor_K2_DestroyActor_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AttachRootComponentToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentToActor(AActor* InParentActor, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentToActor"));

	AActor_K2_AttachRootComponentToActor_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AttachRootComponentTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentTo(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AttachRootComponentTo"));

	AActor_K2_AttachRootComponentTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.K2_AddActorWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldTransform"));

	AActor_K2_AddActorWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldRotation"));

	AActor_K2_AddActorWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorWorldOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorWorldOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorWorldOffset"));

	AActor_K2_AddActorWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalTransform"));

	AActor_K2_AddActorLocalTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalRotation"));

	AActor_K2_AddActorLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.K2_AddActorLocalOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AddActorLocalOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.K2_AddActorLocalOffset"));

	AActor_K2_AddActorLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.Actor.IsOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsOverlappingActor(AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsOverlappingActor"));

	AActor_IsOverlappingActor_Params params;
	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsChildActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsChildActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsChildActor"));

	AActor_IsChildActor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorTickEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsActorTickEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorTickEnabled"));

	AActor_IsActorTickEnabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorBeingDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsActorBeingDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.IsActorBeingDestroyed"));

	AActor_IsActorBeingDestroyed_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.HasNetOwner
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::HasNetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.HasNetOwner"));

	AActor_HasNetOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.HasAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::HasAuthority()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.HasAuthority"));

	AActor_HasAuthority_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetVerticalDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetVerticalDistanceTo(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVerticalDistanceTo"));

	AActor_GetVerticalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetVelocity"));

	AActor_GetVelocity_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform AActor::GetTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTransform"));

	AActor_GetTransform_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::GetTickableWhenPaused()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetTickableWhenPaused"));

	AActor_GetTickableWhenPaused_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetPxActorCapacityForPhysXAggregate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char AActor::GetPxActorCapacityForPhysXAggregate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetPxActorCapacityForPhysXAggregate"));

	AActor_GetPxActorCapacityForPhysXAggregate_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetParentActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AActor::GetParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetParentActor"));

	AActor_GetParentActor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AActor::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOwner"));

	AActor_GetOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetOverlappingComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<UPrimitiveComponent*>   OverlappingComponents          (Parm, OutParm, ZeroConstructor)

void AActor::GetOverlappingComponents(TArray<UPrimitiveComponent*>* OverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingComponents"));

	AActor_GetOverlappingComponents_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OverlappingComponents != nullptr)
		*OverlappingComponents = params.OverlappingComponents;
}


// Function Engine.Actor.GetOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<AActor*>                OverlappingActors              (Parm, OutParm, ZeroConstructor)
// UClass*                        ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::GetOverlappingActors(UClass* ClassFilter, TArray<AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetOverlappingActors"));

	AActor_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	UObject::ProcessEvent(fn, &params);

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.Actor.GetLifeSpan
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetLifeSpan()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetLifeSpan"));

	AActor_GetLifeSpan_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInterfaceImplementer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UObject* AActor::GetInterfaceImplementer(UClass* InterfaceClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInterfaceImplementer"));

	AActor_GetInterfaceImplementer_Params params;
	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigatorController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AController*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AController* AActor::GetInstigatorController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigatorController"));

	AActor_GetInstigatorController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* AActor::GetInstigator()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInstigator"));

	AActor_GetInstigator_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputVectorAxisValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           InputAxisKey                   (ConstParm, Parm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetInputVectorAxisValue(const FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputVectorAxisValue"));

	AActor_GetInputVectorAxisValue_Params params;
	params.InputAxisKey = InputAxisKey;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InputAxisName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisValue(const FName& InputAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisValue"));

	AActor_GetInputAxisValue_Params params;
	params.InputAxisName = InputAxisName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisKeyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           InputAxisKey                   (ConstParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisKeyValue(const FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetInputAxisKeyValue"));

	AActor_GetInputAxisKeyValue_Params params;
	params.InputAxisKey = InputAxisKey;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDotProductTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDotProductTo(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDotProductTo"));

	AActor_GetHorizontalDotProductTo_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDistanceTo(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetHorizontalDistanceTo"));

	AActor_GetHorizontalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetDotProductTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDotProductTo(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDotProductTo"));

	AActor_GetDotProductTo_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetDistanceTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        OtherActor                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDistanceTo(AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetDistanceTo"));

	AActor_GetDistanceTo_Params params;
	params.OtherActor = OtherActor;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UClass*                        ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<UActorComponent*>       ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<UActorComponent*> AActor::GetComponentsByTag(UClass* ComponentClass, const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByTag"));

	AActor_GetComponentsByTag_Params params;
	params.ComponentClass = ComponentClass;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UClass*                        ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<UActorComponent*>       ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<UActorComponent*> AActor::GetComponentsByClass(UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentsByClass"));

	AActor_GetComponentsByClass_Params params;
	params.ComponentClass = ComponentClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentInterfacesByClass
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<UActorComponent*>       OutInterfaces                  (Parm, OutParm, ZeroConstructor)
// UClass*                        InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)

void AActor::GetComponentInterfacesByClass(UClass* InterfaceClass, TArray<UActorComponent*>* OutInterfaces)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentInterfacesByClass"));

	AActor_GetComponentInterfacesByClass_Params params;
	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	if (OutInterfaces != nullptr)
		*OutInterfaces = params.OutInterfaces;
}


// Function Engine.Actor.GetComponentInterfaceByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        InterfaceClass                 (Parm, ZeroConstructor, IsPlainOldData)
// UActorComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UActorComponent* AActor::GetComponentInterfaceByClass(UClass* InterfaceClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentInterfaceByClass"));

	AActor_GetComponentInterfaceByClass_Params params;
	params.InterfaceClass = InterfaceClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentByClass
// (Native, Public)
// Parameters:
// UClass*                        ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// UActorComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UActorComponent* AActor::GetComponentByClass(UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetComponentByClass"));

	AActor_GetComponentByClass_Params params;
	params.ComponentClass = ComponentClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachParentActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AActor::GetAttachParentActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetAttachParentActor"));

	AActor_GetAttachParentActor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetActorUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorUpVector"));

	AActor_GetActorUpVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorTimeDilation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetActorTimeDilation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorTimeDilation"));

	AActor_GetActorTimeDilation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetActorScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorScale3D"));

	AActor_GetActorScale3D_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRightVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetActorRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRightVector"));

	AActor_GetActorRightVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRelativeScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetActorRelativeScale3D()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorRelativeScale3D"));

	AActor_GetActorRelativeScale3D_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AActor::GetActorForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorForwardVector"));

	AActor_GetActorForwardVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::GetActorEyesViewPoint(FVector* OutLocation, FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEyesViewPoint"));

	AActor_GetActorEyesViewPoint_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.Actor.GetActorEnableCollision
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::GetActorEnableCollision()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorEnableCollision"));

	AActor_GetActorEnableCollision_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorBounds
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::GetActorBounds(bool bOnlyCollidingComponents, FVector* Origin, FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.GetActorBounds"));

	AActor_GetActorBounds_Params params;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	UObject::ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.Actor.ForceNetUpdate
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AActor::ForceNetUpdate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ForceNetUpdate"));

	AActor_ForceNetUpdate_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.FlushNetDormancy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.FlushNetDormancy"));

	AActor_FlushNetDormancy_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.EnableInput
// (Native, Public, BlueprintCallable)
// Parameters:
// APlayerController*             PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::EnableInput(APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.EnableInput"));

	AActor_EnableInput_Params params;
	params.PlayerController = PlayerController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.DisableInput
// (Native, Public, BlueprintCallable)
// Parameters:
// APlayerController*             PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DisableInput(APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DisableInput"));

	AActor_DisableInput_Params params;
	params.PlayerController = PlayerController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.DetachRootComponentFromParent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.DetachRootComponentFromParent"));

	AActor_DetachRootComponentFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AttachRootComponentToNoReplication
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AttachRootComponentToNoReplication(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AttachRootComponentToNoReplication"));

	AActor_AttachRootComponentToNoReplication_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AttachActorToActorNoReplication
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AttachActorToActorNoReplication(AActor* InParentActor, const FName& InSocketName, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AttachActorToActorNoReplication"));

	AActor_AttachActorToActorNoReplication_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddTickPrerequisiteComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UActorComponent*               PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteComponent"));

	AActor_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddTickPrerequisiteActor
// (Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddTickPrerequisiteActor(AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddTickPrerequisiteActor"));

	AActor_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Actor.AddComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          TemplateName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// UObject*                       ComponentTemplateContext       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// UActorComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UActorComponent* AActor::AddComponent(const FName& TemplateName, bool bManualAttachment, const FTransform& RelativeTransform, UObject* ComponentTemplateContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.AddComponent"));

	AActor_AddComponent_Params params;
	params.TemplateName = TemplateName;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.ComponentTemplateContext = ComponentTemplateContext;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Actor.ActorHasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::ActorHasTag(const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Actor.ActorHasTag"));

	AActor_ActorHasTag_Params params;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.ToggleVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::ToggleVisibility(bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ToggleVisibility"));

	USceneComponent_ToggleVisibility_Params params;
	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SnapTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SnapTo(USceneComponent* InParent, const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SnapTo"));

	USceneComponent_SnapTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SharesBasis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// USceneComponent*               Other                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::SharesBasis(USceneComponent* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SharesBasis"));

	USceneComponent_SharesBasis_Params params;
	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.SetWorldScale3D
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldScale3D(const FVector& NewScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetWorldScale3D"));

	USceneComponent_SetWorldScale3D_Params params;
	params.NewScale = NewScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewVisibility                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetVisibility"));

	USceneComponent_SetVisibility_Params params;
	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetRelativeScale3D
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeScale3D(const FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetRelativeScale3D"));

	USceneComponent_SetRelativeScale3D_Params params;
	params.NewScale3D = NewScale3D;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetHiddenInGame
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewHidden                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetHiddenInGame"));

	USceneComponent_SetHiddenInGame_Params params;
	params.NewHidden = NewHidden;
	params.bPropagateToChildren = bPropagateToChildren;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.SetAbsolute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewAbsoluteLocation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteRotation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteScale              (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.SetAbsolute"));

	USceneComponent_SetAbsolute_Params params;
	params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	params.bNewAbsoluteScale = bNewAbsoluteScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.ResetRelativeTransform
// (Final, Native, Public, BlueprintCallable)

void USceneComponent::ResetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.ResetRelativeTransform"));

	USceneComponent_ResetRelativeTransform_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.OnRep_Visibility
// (Final, Native, Private)
// Parameters:
// bool                           OldValue                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::OnRep_Visibility(bool OldValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Visibility"));

	USceneComponent_OnRep_Visibility_Params params;
	params.OldValue = OldValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.OnRep_Transform
// (Final, Native, Private)

void USceneComponent::OnRep_Transform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.OnRep_Transform"));

	USceneComponent_OnRep_Transform_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.K2_TryGetCachedSocketVelocity
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          SocketName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        OutVelocity                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::K2_TryGetCachedSocketVelocity(const FName& SocketName, FVector* OutVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_TryGetCachedSocketVelocity"));

	USceneComponent_K2_TryGetCachedSocketVelocity_Params params;
	params.SocketName = SocketName;

	UObject::ProcessEvent(fn, &params);

	if (OutVelocity != nullptr)
		*OutVelocity = params.OutVelocity;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_SetWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldTransform"));

	USceneComponent_K2_SetWorldTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldRotation(const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldRotation"));

	USceneComponent_K2_SetWorldRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation"));

	USceneComponent_K2_SetWorldLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetWorldLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetWorldLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetWorldLocation"));

	USceneComponent_K2_SetWorldLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeTransform(const FTransform& NewTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeTransform"));

	USceneComponent_K2_SetRelativeTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeRotation(const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeRotation"));

	USceneComponent_K2_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation"));

	USceneComponent_K2_SetRelativeLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_SetRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_SetRelativeLocation(const FVector& NewLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_SetRelativeLocation"));

	USceneComponent_K2_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_GetComponentToWorld
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USceneComponent::K2_GetComponentToWorld()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentToWorld"));

	USceneComponent_K2_GetComponentToWorld_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::K2_GetComponentScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentScale"));

	USceneComponent_K2_GetComponentScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USceneComponent::K2_GetComponentRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentRotation"));

	USceneComponent_K2_GetComponentRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::K2_GetComponentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_GetComponentLocation"));

	USceneComponent_K2_GetComponentLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_AttachTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AttachTo(USceneComponent* InParent, const FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AttachTo"));

	USceneComponent_K2_AttachTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachType = AttachType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneComponent.K2_AddWorldTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldTransform"));

	USceneComponent_K2_AddWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddWorldRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldRotation"));

	USceneComponent_K2_AddWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddWorldOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddWorldOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddWorldOffset"));

	USceneComponent_K2_AddWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddRelativeRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddRelativeRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeRotation"));

	USceneComponent_K2_AddRelativeRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddRelativeLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddRelativeLocation(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddRelativeLocation"));

	USceneComponent_K2_AddRelativeLocation_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalTransform(const FTransform& DeltaTransform, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalTransform"));

	USceneComponent_K2_AddLocalTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalRotation(const FRotator& DeltaRotation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalRotation"));

	USceneComponent_K2_AddLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.K2_AddLocalOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepHitResult                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AddLocalOffset(const FVector& DeltaLocation, bool bSweep, bool bTeleport, FHitResult* SweepHitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.K2_AddLocalOffset"));

	USceneComponent_K2_AddLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (SweepHitResult != nullptr)
		*SweepHitResult = params.SweepHitResult;
}


// Function Engine.SceneComponent.IsVisible
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsVisible"));

	USceneComponent_IsVisible_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsSimulatingPhysics
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsSimulatingPhysics(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsSimulatingPhysics"));

	USceneComponent_IsSimulatingPhysics_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsAnySimulatingPhysics
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsAnySimulatingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.IsAnySimulatingPhysics"));

	USceneComponent_IsAnySimulatingPhysics_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::GetUpVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetUpVector"));

	USceneComponent_GetUpVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketTransform
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERelativeTransformSpace> TransformSpace                 (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USceneComponent::GetSocketTransform(const FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketTransform"));

	USceneComponent_GetSocketTransform_Params params;
	params.InSocketName = InSocketName;
	params.TransformSpace = TransformSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USceneComponent::GetSocketRotation(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketRotation"));

	USceneComponent_GetSocketRotation_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketQuaternion
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// FQuat                          ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FQuat USceneComponent::GetSocketQuaternion(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketQuaternion"));

	USceneComponent_GetSocketQuaternion_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::GetSocketLocation(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetSocketLocation"));

	USceneComponent_GetSocketLocation_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRightVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::GetRightVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRightVector"));

	USceneComponent_GetRightVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRelativeTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USceneComponent::GetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetRelativeTransform"));

	USceneComponent_GetRelativeTransform_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetPhysicsVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APhysicsVolume*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APhysicsVolume* USceneComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetPhysicsVolume"));

	USceneComponent_GetPhysicsVolume_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetParentComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<USceneComponent*>       Parents                        (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetParentComponents(TArray<USceneComponent*>* Parents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetParentComponents"));

	USceneComponent_GetParentComponents_Params params;

	UObject::ProcessEvent(fn, &params);

	if (Parents != nullptr)
		*Parents = params.Parents;
}


// Function Engine.SceneComponent.GetNumChildrenComponents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USceneComponent::GetNumChildrenComponents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetNumChildrenComponents"));

	USceneComponent_GetNumChildrenComponents_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::GetForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetForwardVector"));

	USceneComponent_GetForwardVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetComponentVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USceneComponent::GetComponentVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetComponentVelocity"));

	USceneComponent_GetComponentVelocity_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetChildrenComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeAllDescendants         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<USceneComponent*>       Children                       (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>* Children)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildrenComponents"));

	USceneComponent_GetChildrenComponents_Params params;
	params.bIncludeAllDescendants = bIncludeAllDescendants;

	UObject::ProcessEvent(fn, &params);

	if (Children != nullptr)
		*Children = params.Children;
}


// Function Engine.SceneComponent.GetChildComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ChildIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// USceneComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

USceneComponent* USceneComponent::GetChildComponent(int ChildIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetChildComponent"));

	USceneComponent_GetChildComponent_Params params;
	params.ChildIndex = ChildIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName USceneComponent::GetAttachSocketName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachSocketName"));

	USceneComponent_GetAttachSocketName_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// USceneComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

USceneComponent* USceneComponent::GetAttachParent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachParent"));

	USceneComponent_GetAttachParent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachedBasisTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USceneComponent::GetAttachedBasisTransform()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAttachedBasisTransform"));

	USceneComponent_GetAttachedBasisTransform_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAllSocketNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<FName>                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FName> USceneComponent::GetAllSocketNames()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.GetAllSocketNames"));

	USceneComponent_GetAllSocketNames_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DoesSocketExist
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::DoesSocketExist(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DoesSocketExist"));

	USceneComponent_DoesSocketExist_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DetachFromParent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCallModify                    (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneComponent.DetachFromParent"));

	USceneComponent_DetachFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;
	params.bCallModify = bCallModify;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.SpawnDefaultController
// (Native, Public, BlueprintCallable)

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SpawnDefaultController"));

	APawn_SpawnDefaultController_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.SetCanAffectNavigationGeneration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void APawn::SetCanAffectNavigationGeneration(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.SetCanAffectNavigationGeneration"));

	APawn_SetCanAffectNavigationGeneration_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// AController*                   OldController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceiveUnpossessed(AController* OldController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceiveUnpossessed"));

	APawn_ReceiveUnpossessed_Params params;
	params.OldController = OldController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// AController*                   NewController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceivePossessed(AController* NewController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ReceivePossessed"));

	APawn_ReceivePossessed_Params params;
	params.NewController = NewController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.PawnMakeNoise
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseNoiseMakerLocation         (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::PawnMakeNoise(float Loudness, const FVector& NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.PawnMakeNoise"));

	APawn_PawnMakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;
	params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	params.NoiseMaker = NoiseMaker;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.OnRep_PlayerState
// (Native, Public)

void APawn::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_PlayerState"));

	APawn_OnRep_PlayerState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.OnRep_Controller
// (Native, Public)

void APawn::OnRep_Controller()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.OnRep_Controller"));

	APawn_OnRep_Controller_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.LaunchPawn
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::LaunchPawn(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.LaunchPawn"));

	APawn_LaunchPawn_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.K2_GetMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APawn::K2_GetMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.K2_GetMovementInputVector"));

	APawn_K2_GetMovementInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsMoveInputIgnored"));

	APawn_IsMoveInputIgnored_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsLocallyControlled"));

	APawn_IsLocallyControlled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.IsControlled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsControlled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.IsControlled"));

	APawn_IsControlled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPendingMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APawn::GetPendingMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetPendingMovementInputVector"));

	APawn_GetPendingMovementInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetNavAgentLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APawn::GetNavAgentLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetNavAgentLocation"));

	APawn_GetNavAgentLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UPawnMovementComponent*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UPawnMovementComponent* APawn::GetMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementComponent"));

	APawn_GetMovementComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementBaseActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// APawn*                         Pawn                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* APawn::GetMovementBaseActor(APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetMovementBaseActor"));

	APawn_GetMovementBaseActor_Params params;
	params.Pawn = Pawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetLastMovementInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APawn::GetLastMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetLastMovementInputVector"));

	APawn_GetLastMovementInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetControlRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator APawn::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetControlRotation"));

	APawn_GetControlRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AController*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AController* APawn::GetController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetController"));

	APawn_GetController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.GetBaseAimRotation"));

	APawn_GetBaseAimRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.DetachFromControllerPendingDestroy
// (Native, Public, BlueprintCallable)

void APawn::DetachFromControllerPendingDestroy()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.DetachFromControllerPendingDestroy"));

	APawn_DetachFromControllerPendingDestroy_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.ConsumeMovementInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APawn::ConsumeMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.ConsumeMovementInputVector"));

	APawn_ConsumeMovementInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Pawn.AddMovementInput
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        WorldDirection                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleValue                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddMovementInput(const FVector& WorldDirection, float ScaleValue, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddMovementInput"));

	APawn_AddMovementInput_Params params;
	params.WorldDirection = WorldDirection;
	params.ScaleValue = ScaleValue;
	params.bForce = bForce;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerYawInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerYawInput"));

	APawn_AddControllerYawInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerRollInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerRollInput"));

	APawn_AddControllerRollInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Pawn.AddControllerPitchInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Pawn.AddControllerPitchInput"));

	APawn_AddControllerPitchInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.UnCrouch
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::UnCrouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.UnCrouch"));

	ACharacter_UnCrouch_Params params;
	params.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.StopJumping
// (Native, Public, BlueprintCallable)

void ACharacter::StopJumping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopJumping"));

	ACharacter_StopJumping_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.StopAnimMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::StopAnimMontage(UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.StopAnimMontage"));

	ACharacter_StopAnimMontage_Params params;
	params.AnimMontage = AnimMontage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.SetReplicateMovement
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReplicateMovement           (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::SetReplicateMovement(bool bInReplicateMovement)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.SetReplicateMovement"));

	ACharacter_SetReplicateMovement_Params params;
	params.bInReplicateMovement = bInReplicateMovement;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.PlayAnimMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACharacter::PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, const FName& StartSectionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.PlayAnimMontage"));

	ACharacter_PlayAnimMontage_Params params;
	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.OnWalkingOffLedge
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// FVector                        PreviousFloorImpactNormal      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PreviousFloorContactNormal     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PreviousLocation               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          TimeDelta                      (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::OnWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnWalkingOffLedge"));

	ACharacter_OnWalkingOffLedge_Params params;
	params.PreviousFloorImpactNormal = PreviousFloorImpactNormal;
	params.PreviousFloorContactNormal = PreviousFloorContactNormal;
	params.PreviousLocation = PreviousLocation;
	params.TimeDelta = TimeDelta;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_RootMotion
// (Final, Native, Public)

void ACharacter::OnRep_RootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_RootMotion"));

	ACharacter_OnRep_RootMotion_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_ReplicatedBasedMovement
// (Native, Public)

void ACharacter::OnRep_ReplicatedBasedMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_ReplicatedBasedMovement"));

	ACharacter_OnRep_ReplicatedBasedMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnRep_IsCrouched
// (Native, Public)

void ACharacter::OnRep_IsCrouched()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnRep_IsCrouched"));

	ACharacter_OnRep_IsCrouched_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnLaunched
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// FVector                        LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::OnLaunched(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLaunched"));

	ACharacter_OnLaunched_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnLanded
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// FHitResult                     Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void ACharacter::OnLanded(const FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnLanded"));

	ACharacter_OnLanded_Params params;
	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.OnJumped
// (Native, Event, Public, BlueprintEvent)

void ACharacter::OnJumped()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.OnJumped"));

	ACharacter_OnJumped_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.LaunchCharacter
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::LaunchCharacter(const FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.LaunchCharacter"));

	ACharacter_LaunchCharacter_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_UpdateCustomMovement
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_UpdateCustomMovement(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_UpdateCustomMovement"));

	ACharacter_K2_UpdateCustomMovement_Params params;
	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnStartCrouch"));

	ACharacter_K2_OnStartCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PrevCustomMode                 (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnMovementModeChanged"));

	ACharacter_K2_OnMovementModeChanged_Params params;
	params.PrevMovementMode = PrevMovementMode;
	params.NewMovementMode = NewMovementMode;
	params.PrevCustomMode = PrevCustomMode;
	params.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.K2_OnEndCrouch"));

	ACharacter_K2_OnEndCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.Jump
// (Native, Public, BlueprintCallable)

void ACharacter::Jump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Jump"));

	ACharacter_Jump_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.IsPlayingRootMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsPlayingRootMotion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingRootMotion"));

	ACharacter_IsPlayingRootMotion_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.IsPlayingNetworkedRootMotionMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsPlayingNetworkedRootMotionMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsPlayingNetworkedRootMotionMontage"));

	ACharacter_IsPlayingNetworkedRootMotionMontage_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.IsJumpProvidingForce
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsJumpProvidingForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.IsJumpProvidingForce"));

	ACharacter_IsJumpProvidingForce_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.GetCurrentMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UAnimMontage* ACharacter::GetCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.GetCurrentMontage"));

	ACharacter_GetCurrentMontage_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.Crouch
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::Crouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.Crouch"));

	ACharacter_Crouch_Params params;
	params.bClientSimulation = bClientSimulation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatWalk
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatWalk"));

	ACharacter_ClientCheatWalk_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatGhost
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatGhost"));

	ACharacter_ClientCheatGhost_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.ClientCheatFly
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACharacter::ClientCheatFly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.ClientCheatFly"));

	ACharacter_ClientCheatFly_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Character.CanJumpInternal
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJumpInternal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJumpInternal"));

	ACharacter_CanJumpInternal_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Character.CanJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJump()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Character.CanJump"));

	ACharacter_CanJump_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.UnlockAIResources
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bUnlockMovement                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UnlockAILogic                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.UnlockAIResources"));

	UAnimInstance_UnlockAIResources_Params params;
	params.bUnlockMovement = bUnlockMovement;
	params.UnlockAILogic = UnlockAILogic;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.TryGetPawnOwner
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* UAnimInstance::TryGetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.TryGetPawnOwner"));

	UAnimInstance_TryGetPawnOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.StopSlotAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)
// FName                          SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::StopSlotAnimation(float InBlendOutTime, const FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.StopSlotAnimation"));

	UAnimInstance_StopSlotAnimation_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.SlotNodeName = SlotNodeName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.SetMorphTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::SetMorphTarget(const FName& MorphTargetName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.SetMorphTarget"));

	UAnimInstance_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimSequenceBase*             Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTriggerTime            (Parm, ZeroConstructor, IsPlainOldData)
// UAnimMontage*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UAnimMontage* UAnimInstance::PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, const FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage"));

	UAnimInstance_PlaySlotAnimationAsDynamicMontage_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;
	params.BlendOutTriggerTime = BlendOutTriggerTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.PlaySlotAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimSequenceBase*             Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::PlaySlotAnimation(UAnimSequenceBase* Asset, const FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.PlaySlotAnimation"));

	UAnimInstance_PlaySlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Stop(float InBlendOutTime, UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Stop"));

	UAnimInstance_Montage_Stop_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewPlayRate                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetPlayRate"));

	UAnimInstance_Montage_SetPlayRate_Params params;
	params.Montage = Montage;
	params.NewPlayRate = NewPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_SetNextSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          SectionNameToChange            (Parm, ZeroConstructor, IsPlainOldData)
// FName                          NextSection                    (Parm, ZeroConstructor, IsPlainOldData)
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetNextSection(const FName& SectionNameToChange, const FName& NextSection, UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_SetNextSection"));

	UAnimInstance_Montage_SetNextSection_Params params;
	params.SectionNameToChange = SectionNameToChange;
	params.NextSection = NextSection;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_Resume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Resume(UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Resume"));

	UAnimInstance_Montage_Resume_Params params;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  MontageToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Play"));

	UAnimInstance_Montage_Play_Params params;
	params.MontageToPlay = MontageToPlay;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Pause(UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_Pause"));

	UAnimInstance_Montage_Pause_Params params;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSectionsEnd(const FName& SectionName, UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSectionsEnd"));

	UAnimInstance_Montage_JumpToSectionsEnd_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_JumpToSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSection(const FName& SectionName, UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_JumpToSection"));

	UAnimInstance_Montage_JumpToSection_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.Montage_IsPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsPlaying(UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsPlaying"));

	UAnimInstance_Montage_IsPlaying_Params params;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_IsActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsActive(UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_IsActive"));

	UAnimInstance_Montage_IsActive_Params params;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetCurrentSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimMontage*                  Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UAnimInstance::Montage_GetCurrentSection(UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.Montage_GetCurrentSection"));

	UAnimInstance_Montage_GetCurrentSection_Params params;
	params.Montage = Montage;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.LockAIResources
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bLockMovement                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           LockAILogic                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.LockAIResources"));

	UAnimInstance_LockAIResources_Params params;
	params.bLockMovement = bLockMovement;
	params.LockAILogic = LockAILogic;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.IsPlayingSlotAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UAnimSequenceBase*             Asset                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FName                          SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::IsPlayingSlotAnimation(UAnimSequenceBase* Asset, const FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.IsPlayingSlotAnimation"));

	UAnimInstance_IsPlayingSlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetSyncGroupPosition
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          Name                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetSyncGroupPosition(const FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetSyncGroupPosition"));

	UAnimInstance_GetSyncGroupPosition_Params params;
	params.Name = Name;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetStateWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetStateWeight"));

	UAnimInstance_GetStateWeight_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction"));

	UAnimInstance_GetRelevantAnimTimeRemainingFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining"));

	UAnimInstance_GetRelevantAnimTimeRemaining_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTimeFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTimeFraction"));

	UAnimInstance_GetRelevantAnimTimeFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimTime(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimTime"));

	UAnimInstance_GetRelevantAnimTime_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetRelevantAnimLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetRelevantAnimLength(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetRelevantAnimLength"));

	UAnimInstance_GetRelevantAnimLength_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// USkeletalMeshComponent*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

USkeletalMeshComponent* UAnimInstance::GetOwningComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningComponent"));

	UAnimInstance_GetOwningComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UAnimInstance::GetOwningActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetOwningActor"));

	UAnimInstance_GetOwningActor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetMaxPlayingAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetMaxPlayingAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetMaxPlayingAnimTimeRemaining"));

	UAnimInstance_GetMaxPlayingAnimTimeRemaining_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetMaxAnimTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetMaxAnimTimeRemaining(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetMaxAnimTimeRemaining"));

	UAnimInstance_GetMaxAnimTimeRemaining_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction"));

	UAnimInstance_GetInstanceTransitionTimeElapsedFraction_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed"));

	UAnimInstance_GetInstanceTransitionTimeElapsed_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            TransitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration"));

	UAnimInstance_GetInstanceTransitionCrossfadeDuration_Params params;
	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceStateWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceStateWeight"));

	UAnimInstance_GetInstanceStateWeight_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime"));

	UAnimInstance_GetInstanceCurrentStateElapsedTime_Params params;
	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction"));

	UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd"));

	UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction"));

	UAnimInstance_GetInstanceAssetPlayerTimeFraction_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerTime(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerTime"));

	UAnimInstance_GetInstanceAssetPlayerTime_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetInstanceAssetPlayerLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            AssetPlayerIndex               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetInstanceAssetPlayerLength(int AssetPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetInstanceAssetPlayerLength"));

	UAnimInstance_GetInstanceAssetPlayerLength_Params params;
	params.AssetPlayerIndex = AssetPlayerIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurveValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          CurveName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurveValue(const FName& CurveName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurveValue"));

	UAnimInstance_GetCurveValue_Params params;
	params.CurveName = CurveName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UAnimInstance::GetCurrentStateName(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentStateName"));

	UAnimInstance_GetCurrentStateName_Params params;
	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetCurrentStateElapsedTime"));

	UAnimInstance_GetCurrentStateElapsedTime_Params params;
	params.MachineIndex = MachineIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UAnimationAsset*               AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEndFraction(UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction"));

	UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UAnimationAsset*               AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEnd(UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd"));

	UAnimInstance_GetAnimAssetPlayerTimeFromEnd_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UAnimationAsset*               AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFraction(UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction"));

	UAnimInstance_GetAnimAssetPlayerTimeFraction_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UAnimationAsset*               AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerLength(UAnimationAsset* AnimAsset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.GetAnimAssetPlayerLength"));

	UAnimInstance_GetAnimAssetPlayerLength_Params params;
	params.AnimAsset = AnimAsset;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.ClearMorphTargets
// (Final, Native, Public, BlueprintCallable)

void UAnimInstance::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.ClearMorphTargets"));

	UAnimInstance_ClearMorphTargets_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.CalculateDirection
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Velocity                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       BaseRotation                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::CalculateDirection(const FVector& Velocity, const FRotator& BaseRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.CalculateDirection"));

	UAnimInstance_CalculateDirection_Params params;
	params.Velocity = Velocity;
	params.BaseRotation = BaseRotation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimInstance.BlueprintUpdateAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaTimeX                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintUpdateAnimation"));

	UAnimInstance_BlueprintUpdateAnimation_Params params;
	params.DeltaTimeX = DeltaTimeX;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintUninitializeAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintUninitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintUninitializeAnimation"));

	UAnimInstance_BlueprintUninitializeAnimation_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintPostEvaluateAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation"));

	UAnimInstance_BlueprintPostEvaluateAnimation_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.BlueprintInitializeAnimation
// (Event, Public, BlueprintEvent)

void UAnimInstance::BlueprintInitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.BlueprintInitializeAnimation"));

	UAnimInstance_BlueprintInitializeAnimation_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimInstance.AnimNotify_Sound
// (Final, Native, Public)
// Parameters:
// UAnimNotify*                   Notify                         (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::AnimNotify_Sound(UAnimNotify* Notify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimInstance.AnimNotify_Sound"));

	UAnimInstance_AnimNotify_Sound_Params params;
	params.Notify = Notify;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimNotify.Received_Notify
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// USkeletalMeshComponent*        MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// UAnimSequenceBase*             Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotify::Received_Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.Received_Notify"));

	UAnimNotify_Received_Notify_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotify.GetNotifyName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UAnimNotify::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotify.GetNotifyName"));

	UAnimNotify_GetNotifyName_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyTick
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// USkeletalMeshComponent*        MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// UAnimSequenceBase*             Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FrameDeltaTime                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyTick(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float FrameDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyTick"));

	UAnimNotifyState_Received_NotifyTick_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.FrameDeltaTime = FrameDeltaTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyEnd
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// USkeletalMeshComponent*        MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// UAnimSequenceBase*             Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyEnd(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyEnd"));

	UAnimNotifyState_Received_NotifyEnd_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyBegin
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// USkeletalMeshComponent*        MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// UAnimSequenceBase*             Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TotalDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyBegin(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float TotalDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.Received_NotifyBegin"));

	UAnimNotifyState_Received_NotifyBegin_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.GetNotifyName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UAnimNotifyState::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState.GetNotifyName"));

	UAnimNotifyState_GetNotifyName_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraComponent.ProjectWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// FIntPoint                      ViewDimensions                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UCameraComponent::ProjectWorldLocation(const FVector& WorldLocation, const FIntPoint& ViewDimensions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.ProjectWorldLocation"));

	UCameraComponent_ProjectWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.ViewDimensions = ViewDimensions;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraComponent.GetCameraView
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// FMinimalViewInfo               DesiredView                    (Parm, OutParm)

void UCameraComponent::GetCameraView(float DeltaTime, FMinimalViewInfo* DesiredView)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.GetCameraView"));

	UCameraComponent_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	if (DesiredView != nullptr)
		*DesiredView = params.DesiredView;
}


// Function Engine.CameraComponent.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void UCameraComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraComponent.AddOrUpdateBlendable"));

	UCameraComponent_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.StopMovementImmediately
// (Native, Public, BlueprintCallable)

void UMovementComponent::StopMovementImmediately()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.StopMovementImmediately"));

	UMovementComponent_StopMovementImmediately_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
// (Native, Public, BlueprintCallable)

void UMovementComponent::SnapUpdatedComponentToPlane()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SnapUpdatedComponentToPlane"));

	UMovementComponent_SnapUpdatedComponentToPlane_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetUpdatedComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               NewUpdatedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMovementComponent::SetUpdatedComponent(USceneComponent* NewUpdatedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetUpdatedComponent"));

	UMovementComponent_SetUpdatedComponent_Params params;
	params.NewUpdatedComponent = NewUpdatedComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintOrigin
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintOrigin(const FVector& PlaneOrigin)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintOrigin"));

	UMovementComponent_SetPlaneConstraintOrigin_Params params;
	params.PlaneOrigin = PlaneOrigin;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintNormal
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintNormal(const FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintNormal"));

	UMovementComponent_SetPlaneConstraintNormal_Params params;
	params.PlaneNormal = PlaneNormal;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Up                             (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintFromVectors(const FVector& Forward, const FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintFromVectors"));

	UMovementComponent_SetPlaneConstraintFromVectors_Params params;
	params.Forward = Forward;
	params.Up = Up;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintEnabled"));

	UMovementComponent_SetPlaneConstraintEnabled_Params params;
	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting                 (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintAxisSetting(TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting"));

	UMovementComponent_SetPlaneConstraintAxisSetting_Params params;
	params.NewAxisSetting = NewAxisSetting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.PhysicsVolumeChanged
// (Native, Public)
// Parameters:
// APhysicsVolume*                NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::PhysicsVolumeChanged(APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.PhysicsVolumeChanged"));

	UMovementComponent_PhysicsVolumeChanged_Params params;
	params.NewVolume = NewVolume;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MovementComponent.K2_MoveUpdatedComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Delta                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::K2_MoveUpdatedComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, bool bTeleport, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_MoveUpdatedComponent"));

	UMovementComponent_K2_MoveUpdatedComponent_Params params;
	params.Delta = Delta;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;

	UObject::ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetModifiedMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed"));

	UMovementComponent_K2_GetModifiedMaxSpeed_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetMaxSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.K2_GetMaxSpeedModifier"));

	UMovementComponent_K2_GetMaxSpeedModifier_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.IsExceedingMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MaxSpeed                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.IsExceedingMaxSpeed"));

	UMovementComponent_IsExceedingMaxSpeed_Params params;
	params.MaxSpeed = MaxSpeed;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

FVector UMovementComponent::GetPlaneConstraintOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintOrigin"));

	UMovementComponent_GetPlaneConstraintOrigin_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

FVector UMovementComponent::GetPlaneConstraintNormal()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintNormal"));

	UMovementComponent_GetPlaneConstraintNormal_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EPlaneConstraintAxisSetting> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPlaneConstraintAxisSetting> UMovementComponent::GetPlaneConstraintAxisSetting()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting"));

	UMovementComponent_GetPlaneConstraintAxisSetting_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPhysicsVolume
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APhysicsVolume*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APhysicsVolume* UMovementComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetPhysicsVolume"));

	UMovementComponent_GetPhysicsVolume_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetMaxSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetMaxSpeed"));

	UMovementComponent_GetMaxSpeed_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetGravityZ
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.GetGravityZ"));

	UMovementComponent_GetGravityZ_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainNormalToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Normal                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UMovementComponent::ConstrainNormalToPlane(const FVector& Normal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainNormalToPlane"));

	UMovementComponent_ConstrainNormalToPlane_Params params;
	params.Normal = Normal;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainLocationToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UMovementComponent::ConstrainLocationToPlane(const FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainLocationToPlane"));

	UMovementComponent_ConstrainLocationToPlane_Params params;
	params.Location = Location;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainDirectionToPlane
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UMovementComponent::ConstrainDirectionToPlane(const FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MovementComponent.ConstrainDirectionToPlane"));

	UMovementComponent_ConstrainDirectionToPlane_Params params;
	params.Direction = Direction;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.StopMovementKeepPathing
// (Final, Native, Public, BlueprintCallable)

void UNavMovementComponent::StopMovementKeepPathing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopMovementKeepPathing"));

	UNavMovementComponent_StopMovementKeepPathing_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavMovementComponent.StopActiveMovement
// (Native, Public, BlueprintCallable)

void UNavMovementComponent::StopActiveMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.StopActiveMovement"));

	UNavMovementComponent_StopActiveMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavMovementComponent.IsSwimming
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsSwimming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsSwimming"));

	UNavMovementComponent_IsSwimming_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsMovingOnGround
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsMovingOnGround()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsMovingOnGround"));

	UNavMovementComponent_IsMovingOnGround_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFlying
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFlying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFlying"));

	UNavMovementComponent_IsFlying_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFalling
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsFalling"));

	UNavMovementComponent_IsFalling_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsCrouching
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsCrouching()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.IsCrouching"));

	UNavMovementComponent_IsCrouching_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.GetActorFeetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavMovementComponent::GetActorFeetLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavMovementComponent.GetActorFeetLocation"));

	UNavMovementComponent_GetActorFeetLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.K2_GetInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPawnMovementComponent::K2_GetInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.K2_GetInputVector"));

	UPawnMovementComponent_K2_GetInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPawnMovementComponent::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.IsMoveInputIgnored"));

	UPawnMovementComponent_IsMoveInputIgnored_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPendingInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPawnMovementComponent::GetPendingInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPendingInputVector"));

	UPawnMovementComponent_GetPendingInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPawnOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* UPawnMovementComponent::GetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetPawnOwner"));

	UPawnMovementComponent_GetPawnOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetLastInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPawnMovementComponent::GetLastInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.GetLastInputVector"));

	UPawnMovementComponent_GetLastInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.ConsumeInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPawnMovementComponent::ConsumeInputVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.ConsumeInputVector"));

	UPawnMovementComponent_ConsumeInputVector_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.AddInputVector
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        WorldVector                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UPawnMovementComponent::AddInputVector(const FVector& WorldVector, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnMovementComponent.AddInputVector"));

	UPawnMovementComponent_AddInputVector_Params params;
	params.WorldVector = WorldVector;
	params.bForce = bForce;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.UpdateMaxNavMeshProjectionIntervalAndModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DesiredMaxNavMeshProjectionInterval (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::UpdateMaxNavMeshProjectionIntervalAndModifier(float DesiredMaxNavMeshProjectionInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.UpdateMaxNavMeshProjectionIntervalAndModifier"));

	UCharacterMovementComponent_UpdateMaxNavMeshProjectionIntervalAndModifier_Params params;
	params.DesiredMaxNavMeshProjectionInterval = DesiredMaxNavMeshProjectionInterval;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InWalkableFloorZ               (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorZ"));

	UCharacterMovementComponent_SetWalkableFloorZ_Params params;
	params.InWalkableFloorZ = InWalkableFloorZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InWalkableFloorAngle           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle"));

	UCharacterMovementComponent_SetWalkableFloorAngle_Params params;
	params.InWalkableFloorAngle = InWalkableFloorAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetNavMeshProjectionInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InNavMeshProjectionInterval    (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetNavMeshProjectionInterval(float InNavMeshProjectionInterval)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetNavMeshProjectionInterval"));

	UCharacterMovementComponent_SetNavMeshProjectionInterval_Params params;
	params.InNavMeshProjectionInterval = InNavMeshProjectionInterval;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetMovementMode
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetMovementMode"));

	UCharacterMovementComponent_SetMovementMode_Params params;
	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToIgnore"));

	UCharacterMovementComponent_SetGroupsToIgnore_Params params;
	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetGroupsToAvoid"));

	UCharacterMovementComponent_SetGroupsToAvoid_Params params;
	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceGroup"));

	UCharacterMovementComponent_SetAvoidanceGroup_Params params;
	params.GroupFlags = GroupFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled"));

	UCharacterMovementComponent_SetAvoidanceEnabled_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveOld
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          OldTimeStamp                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          OldAccel                       (Parm)
// UPrimitiveComponent*           ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  OldMoveFlags                   (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveOld(float OldTimeStamp, const FVector_NetQuantize10& OldAccel, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char OldMoveFlags)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveOld"));

	UCharacterMovementComponent_ServerMoveOld_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccel = OldAccel;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.OldMoveFlags = OldMoveFlags;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveDualHybridRootMotion
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          InAccel                        (Parm)
// FVector_NetQuantize100         ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDualHybridRootMotion(float TimeStamp0, const FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveDualHybridRootMotion"));

	UCharacterMovementComponent_ServerMoveDualHybridRootMotion_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMoveDual
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          InAccel                        (Parm)
// FVector_NetQuantize100         ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDual(float TimeStamp0, const FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMoveDual"));

	UCharacterMovementComponent_ServerMoveDual_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ServerMove
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantize10          InAccel                        (Parm)
// FVector_NetQuantize100         ClientLoc                      (Parm)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMove(float TimeStamp, const FVector_NetQuantize10& InAccel, const FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, const FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ServerMove"));

	UCharacterMovementComponent_ServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ"));

	UCharacterMovementComponent_K2_GetWalkableFloorZ_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle"));

	UCharacterMovementComponent_K2_GetWalkableFloorAngle_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration"));

	UCharacterMovementComponent_K2_GetModifiedMaxAcceleration_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalking"));

	UCharacterMovementComponent_IsWalking_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalkable
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FHitResult                     Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalkable(const FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.IsWalkable"));

	UCharacterMovementComponent_IsWalkable_Params params;
	params.Hit = Hit;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetValidPerchRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetValidPerchRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetValidPerchRadius"));

	UCharacterMovementComponent_GetValidPerchRadius_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetPerchRadiusThreshold()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold"));

	UCharacterMovementComponent_GetPerchRadiusThreshold_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetNavMeshProjectionInterval
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetNavMeshProjectionInterval()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetNavMeshProjectionInterval"));

	UCharacterMovementComponent_GetNavMeshProjectionInterval_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMovementBase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UPrimitiveComponent*           ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMovementBase"));

	UCharacterMovementComponent_GetMovementBase_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxJumpHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxJumpHeight"));

	UCharacterMovementComponent_GetMaxJumpHeight_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetMaxAcceleration"));

	UCharacterMovementComponent_GetMaxAcceleration_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity"));

	UCharacterMovementComponent_GetImpartedMovementBaseVelocity_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UCharacterMovementComponent::GetCurrentAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCurrentAcceleration"));

	UCharacterMovementComponent_GetCurrentAcceleration_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ACharacter*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ACharacter* UCharacterMovementComponent::GetCharacterOwner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetCharacterOwner"));

	UCharacterMovementComponent_GetCharacterOwner_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetAnalogInputModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.GetAnalogInputModifier"));

	UCharacterMovementComponent_GetAnalogInputModifier_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.DisableMovement
// (Native, Public, BlueprintCallable)

void UCharacterMovementComponent::DisableMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.DisableMovement"));

	UCharacterMovementComponent_DisableMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientVeryShortAdjustPosition(float TimeStamp, const FVector& NewLoc, UPrimitiveComponent* NewBase, const FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition"));

	UCharacterMovementComponent_ClientVeryShortAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ServerMontageTrackPosition     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ServerLoc                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector_NetQuantizeNormal      ServerRotation                 (Parm)
// float                          ServerVelZ                     (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           ServerBase                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          ServerBoneName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const FVector& ServerLoc, const FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, const FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition"));

	UCharacterMovementComponent_ClientAdjustRootMotionPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAdjustPosition
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustPosition(float TimeStamp, const FVector& NewLoc, const FVector& NewVel, UPrimitiveComponent* NewBase, const FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAdjustPosition"));

	UCharacterMovementComponent_ClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.ClientAckGoodMove
// (Net, Native, Event, Public, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.ClientAckGoodMove"));

	UCharacterMovementComponent_ClientAckGoodMove_Params params;
	params.TimeStamp = TimeStamp;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.CapsuleTouched
// (Native, Protected, HasOutParms)
// Parameters:
// AActor*                        Other                          (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void UCharacterMovementComponent::CapsuleTouched(AActor* Other, UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CapsuleTouched"));

	UCharacterMovementComponent_CapsuleTouched_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.CalcVelocity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Friction                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFluid                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          BrakingDeceleration            (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.CalcVelocity"));

	UCharacterMovementComponent_CalcVelocity_Params params;
	params.DeltaTime = DeltaTime;
	params.Friction = Friction;
	params.bFluid = bFluid;
	params.BrakingDeceleration = BrakingDeceleration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.AddImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddImpulse(const FVector& Impulse, bool bVelocityChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddImpulse"));

	UCharacterMovementComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CharacterMovementComponent.AddForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Force                          (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddForce(const FVector& Force)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CharacterMovementComponent.AddForce"));

	UCharacterMovementComponent_AddForce_Params params;
	params.Force = Force;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InputComponent.WasControllerKeyJustReleased
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustReleased(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustReleased"));

	UInputComponent_WasControllerKeyJustReleased_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.WasControllerKeyJustPressed
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustPressed(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.WasControllerKeyJustPressed"));

	UInputComponent_WasControllerKeyJustPressed_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.IsControllerKeyDown
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::IsControllerKeyDown(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.IsControllerKeyDown"));

	UInputComponent_IsControllerKeyDown_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetTouchState
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetTouchState"));

	UInputComponent_GetTouchState_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.InputComponent.GetControllerVectorKeyState
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UInputComponent::GetControllerVectorKeyState(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerVectorKeyState"));

	UInputComponent_GetControllerVectorKeyState_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerMouseDelta
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerMouseDelta"));

	UInputComponent_GetControllerMouseDelta_Params params;

	UObject::ProcessEvent(fn, &params);

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.InputComponent.GetControllerKeyTimeDown
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerKeyTimeDown(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerKeyTimeDown"));

	UInputComponent_GetControllerKeyTimeDown_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerAnalogStickState
// (Final, Native, Private, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogStickState"));

	UInputComponent_GetControllerAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	UObject::ProcessEvent(fn, &params);

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.InputComponent.GetControllerAnalogKeyState
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerAnalogKeyState(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InputComponent.GetControllerAnalogKeyState"));

	UInputComponent_GetControllerAnalogKeyState_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameInstance.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UGameInstance::ReceiveShutdown()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveShutdown"));

	UGameInstance_ReceiveShutdown_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.ReceiveInit
// (Event, Public, BlueprintEvent)

void UGameInstance::ReceiveInit()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.ReceiveInit"));

	UGameInstance_ReceiveInit_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.DebugRemovePlayer
// (Exec, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugRemovePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugRemovePlayer"));

	UGameInstance_DebugRemovePlayer_Params params;
	params.ControllerId = ControllerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameInstance.DebugCreatePlayer
// (Exec, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugCreatePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameInstance.DebugCreatePlayer"));

	UGameInstance_DebugCreatePlayer_Params params;
	params.ControllerId = ControllerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.StartPlay
// (Native, Public, BlueprintCallable)

void AGameMode::StartPlay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.StartPlay"));

	AGameMode_StartPlay_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.StartMatch
// (Native, Public, BlueprintCallable)

void AGameMode::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.StartMatch"));

	AGameMode_StartMatch_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.SpawnDefaultPawnFor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AController*                   NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        StartSpot                      (Parm, ZeroConstructor, IsPlainOldData)
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* AGameMode::SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.SpawnDefaultPawnFor"));

	AGameMode_SpawnDefaultPawnFor_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ShouldReset
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AActor*                        ActorToReset                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ShouldReset(AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ShouldReset"));

	AGameMode_ShouldReset_Params params;
	params.ActorToReset = ActorToReset;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.SetBandwidthLimit
// (Exec, Native, Public)
// Parameters:
// float                          AsyncIOBandwidthLimit          (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.SetBandwidthLimit"));

	AGameMode_SetBandwidthLimit_Params params;
	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ReturnToMainMenuHost
// (Native, Public, BlueprintCallable)

void AGameMode::ReturnToMainMenuHost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReturnToMainMenuHost"));

	AGameMode_ReturnToMainMenuHost_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.RestartGame
// (Native, Public, BlueprintCallable)

void AGameMode::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.RestartGame"));

	AGameMode_RestartGame_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ResetLevel
// (Native, Public, BlueprintCallable)

void AGameMode::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ResetLevel"));

	AGameMode_ResetLevel_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ReadyToStartMatch
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ReadyToStartMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToStartMatch"));

	AGameMode_ReadyToStartMatch_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ReadyToEndMatch
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ReadyToEndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ReadyToEndMatch"));

	AGameMode_ReadyToEndMatch_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.PlayerCanRestart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::PlayerCanRestart(APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.PlayerCanRestart"));

	AGameMode_PlayerCanRestart_Params params;
	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.MustSpectate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// APlayerController*             NewPlayerController            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::MustSpectate(APlayerController* NewPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.MustSpectate"));

	AGameMode_MustSpectate_Params params;
	params.NewPlayerController = NewPlayerController;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_PostLogin(APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_PostLogin"));

	AGameMode_K2_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnSwapPlayerControllers
// (Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             OldPC                          (Parm, ZeroConstructor, IsPlainOldData)
// APlayerController*             NewPC                          (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnSwapPlayerControllers"));

	AGameMode_K2_OnSwapPlayerControllers_Params params;
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnSetMatchState
// (Event, Protected, BlueprintEvent)
// Parameters:
// FName                          NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnSetMatchState(const FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnSetMatchState"));

	AGameMode_K2_OnSetMatchState_Params params;
	params.NewState = NewState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnRestartPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// AController*                   NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnRestartPlayer(AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnRestartPlayer"));

	AGameMode_K2_OnRestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// AController*                   ExitingController              (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnLogout(AController* ExitingController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnLogout"));

	AGameMode_K2_OnLogout_Params params;
	params.ExitingController = ExitingController;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_OnChangeName
// (Event, Public, BlueprintEvent)
// Parameters:
// AController*                   Other                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        NewName                        (Parm, ZeroConstructor)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_OnChangeName(AController* Other, const FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_OnChangeName"));

	AGameMode_K2_OnChangeName_Params params;
	params.Other = Other;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.K2_FindPlayerStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// AController*                   Player                         (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AGameMode::K2_FindPlayerStart(AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.K2_FindPlayerStart"));

	AGameMode_K2_FindPlayerStart_Params params;
	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.IsMatchInProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::IsMatchInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.IsMatchInProgress"));

	AGameMode_IsMatchInProgress_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.InitStartSpot
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AActor*                        StartSpot                      (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::InitStartSpot(AActor* StartSpot, AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.InitStartSpot"));

	AGameMode_InitStartSpot_Params params;
	params.StartSpot = StartSpot;
	params.NewPlayer = NewPlayer;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.HasMatchStarted
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::HasMatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.HasMatchStarted"));

	AGameMode_HasMatchStarted_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.HasMatchEnded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::HasMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.HasMatchEnded"));

	AGameMode_HasMatchEnded_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetNumPlayers
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AGameMode::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetNumPlayers"));

	AGameMode_GetNumPlayers_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetMatchState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName AGameMode::GetMatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetMatchState"));

	AGameMode_GetMatchState_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.GetDefaultPawnClassForController
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AController*                   InController                   (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UClass* AGameMode::GetDefaultPawnClassForController(AController* InController)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.GetDefaultPawnClassForController"));

	AGameMode_GetDefaultPawnClassForController_Params params;
	params.InController = InController;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.FindPlayerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AController*                   Player                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        IncomingName                   (Parm, ZeroConstructor)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AGameMode::FindPlayerStart(AController* Player, const FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.FindPlayerStart"));

	AGameMode_FindPlayerStart_Params params;
	params.Player = Player;
	params.IncomingName = IncomingName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.EndMatch
// (Native, Public, BlueprintCallable)

void AGameMode::EndMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.EndMatch"));

	AGameMode_EndMatch_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.ChoosePlayerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// AController*                   Player                         (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AGameMode::ChoosePlayerStart(AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ChoosePlayerStart"));

	AGameMode_ChoosePlayerStart_Params params;
	params.Player = Player;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.ChangeName
// (Native, Public, BlueprintCallable)
// Parameters:
// AController*                   Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        NewName                        (Parm, ZeroConstructor)
// bool                           bNameChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::ChangeName(AController* Controller, const FString& NewName, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.ChangeName"));

	AGameMode_ChangeName_Params params;
	params.Controller = Controller;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameMode.CanSpectate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// APlayerController*             Viewer                         (Parm, ZeroConstructor, IsPlainOldData)
// APlayerState*                  ViewTarget                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.CanSpectate"));

	AGameMode_CanSpectate_Params params;
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameMode.AbortMatch
// (Native, Public, BlueprintCallable)

void AGameMode::AbortMatch()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameMode.AbortMatch"));

	AGameMode_AbortMatch_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::WakeRigidBody(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeRigidBody"));

	UPrimitiveComponent_WakeRigidBody_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.WakeAllRigidBodies
// (Native, Public, BlueprintCallable)

void UPrimitiveComponent::WakeAllRigidBodies()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.WakeAllRigidBodies"));

	UPrimitiveComponent_WakeAllRigidBodies_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FWalkableSlopeOverride         NewOverride                    (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimitiveComponent::SetWalkableSlopeOverride(const FWalkableSlopeOverride& NewOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride"));

	UPrimitiveComponent_SetWalkableSlopeOverride_Params params;
	params.NewOverride = NewOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewTranslucentSortPriority     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetTranslucentSortPriority"));

	UPrimitiveComponent_SetTranslucentSortPriority_Params params;
	params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetSimulatePhysics
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSimulate                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetSimulatePhysics"));

	UPrimitiveComponent_SetSimulatePhysics_Params params;
	params.bSimulate = bSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetRenderInMainPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetRenderInMainPass(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderInMainPass"));

	UPrimitiveComponent_SetRenderInMainPass_Params params;
	params.bValue = bValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetRenderCustomDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetRenderCustomDepth(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetRenderCustomDepth"));

	UPrimitiveComponent_SetRenderCustomDepth_Params params;
	params.bValue = bValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// (Native, Public, BlueprintCallable)
// Parameters:
// UPhysicalMaterial*             NewPhysMaterial                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysMaterialOverride"));

	UPrimitiveComponent_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity"));

	UPrimitiveComponent_SetPhysicsMaxAngularVelocity_Params params;
	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsLinearVelocity(const FVector& NewVel, bool bAddToCurrent, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity"));

	UPrimitiveComponent_SetPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsAngularVelocity(const FVector& NewAngVel, bool bAddToCurrent, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity"));

	UPrimitiveComponent_SetPhysicsAngularVelocity_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOwnerNoSee"));

	UPrimitiveComponent_SetOwnerNoSee_Params params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetOnlyOwnerSee"));

	UPrimitiveComponent_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision"));

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMaterial(int ElementIndex, UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMaterial"));

	UPrimitiveComponent_SetMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMassScale
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMassScale(const FName& BoneName, float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassScale"));

	UPrimitiveComponent_SetMassScale_Params params;
	params.BoneName = BoneName;
	params.InMassScale = InMassScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetMassOverrideInKg
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MassInKg                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMass                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMassOverrideInKg(const FName& BoneName, float MassInKg, bool bOverrideMass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetMassOverrideInKg"));

	UPrimitiveComponent_SetMassOverrideInKg_Params params;
	params.BoneName = BoneName;
	params.MassInKg = MassInKg;
	params.bOverrideMass = bOverrideMass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetLockedAxis
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EDOFMode>          LockedAxis                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLockedAxis"));

	UPrimitiveComponent_SetLockedAxis_Params params;
	params.LockedAxis = LockedAxis;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetLinearDamping
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetLinearDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetLinearDamping"));

	UPrimitiveComponent_SetLinearDamping_Params params;
	params.InDamping = InDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetGenerateOverlapEvents(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetGenerateOverlapEvents"));

	UPrimitiveComponent_SetGenerateOverlapEvents_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetEnableGravity
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bGravityEnabled                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetEnableGravity"));

	UPrimitiveComponent_SetEnableGravity_Params params;
	params.bGravityEnabled = bGravityEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveVector
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCustomPrimitiveVector(int Index, const FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveVector"));

	UPrimitiveComponent_SetCustomPrimitiveVector_Params params;
	params.Index = Index;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCustomPrimitiveScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCustomPrimitiveScalar(int Index, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomPrimitiveScalar"));

	UPrimitiveComponent_SetCustomPrimitiveScalar_Params params;
	params.Index = Index;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCustomDepthStencilValue(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue"));

	UPrimitiveComponent_SetCustomDepthStencilValue_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCullDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewCullDistance                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCullDistance"));

	UPrimitiveComponent_SetCullDistance_Params params;
	params.NewCullDistance = NewCullDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetConstraintMode
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EDOFMode>          ConstraintMode                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetConstraintMode"));

	UPrimitiveComponent_SetConstraintMode_Params params;
	params.ConstraintMode = ConstraintMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel"));

	UPrimitiveComponent_SetCollisionResponseToChannel_Params params;
	params.Channel = Channel;
	params.NewResponse = NewResponse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels"));

	UPrimitiveComponent_SetCollisionResponseToAllChannels_Params params;
	params.NewResponse = NewResponse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionProfileName
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          InCollisionProfileName         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionProfileName(const FName& InCollisionProfileName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionProfileName"));

	UPrimitiveComponent_SetCollisionProfileName_Params params;
	params.InCollisionProfileName = InCollisionProfileName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionObjectType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionObjectType"));

	UPrimitiveComponent_SetCollisionObjectType_Params params;
	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCollisionEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionEnabled> NewType                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCollisionEnabled"));

	UPrimitiveComponent_SetCollisionEnabled_Params params;
	params.NewType = NewType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCenterOfMass
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        CenterOfMassOffset             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCenterOfMass(const FVector& CenterOfMassOffset, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCenterOfMass"));

	UPrimitiveComponent_SetCenterOfMass_Params params;
	params.CenterOfMassOffset = CenterOfMassOffset;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetCastShadow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewCastShadow                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCastShadow(bool NewCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetCastShadow"));

	UPrimitiveComponent_SetCastShadow_Params params;
	params.NewCastShadow = NewCastShadow;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAngularDamping
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAngularDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAngularDamping"));

	UPrimitiveComponent_SetAngularDamping_Params params;
	params.InDamping = InDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity"));

	UPrimitiveComponent_SetAllPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.SetAllMassScale
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          InMassScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAllMassScale(float InMassScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.SetAllMassScale"));

	UPrimitiveComponent_SetAllMassScale_Params params;
	params.InMassScale = InMassScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        InputVector                    (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::ScaleByMomentOfInertia(const FVector& InputVector, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia"));

	UPrimitiveComponent_ScaleByMomentOfInertia_Params params;
	params.InputVector = InputVector;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::PutRigidBodyToSleep(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.PutRigidBodyToSleep"));

	UPrimitiveComponent_PutRigidBodyToSleep_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.K2_LineTraceComponent
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        TraceStart                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::K2_LineTraceComponent(const FVector& TraceStart, const FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, FVector* HitLocation, FVector* HitNormal, FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.K2_LineTraceComponent"));

	UPrimitiveComponent_K2_LineTraceComponent_Params params;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;

	UObject::ProcessEvent(fn, &params);

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UPrimitiveComponent*           OtherComp                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsOverlappingComponent(UPrimitiveComponent* OtherComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingComponent"));

	UPrimitiveComponent_IsOverlappingComponent_Params params;
	params.OtherComp = OtherComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsOverlappingActor(AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsOverlappingActor"));

	UPrimitiveComponent_IsOverlappingActor_Params params;
	params.Other = Other;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsGravityEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsGravityEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IsGravityEnabled"));

	UPrimitiveComponent_IsGravityEnabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldIgnore                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving"));

	UPrimitiveComponent_IgnoreActorWhenMoving_Params params;
	params.Actor = Actor;
	params.bShouldIgnore = bShouldIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FWalkableSlopeOverride         ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride"));

	UPrimitiveComponent_GetWalkableSlopeOverride_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Point                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(const FVector& Point, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint"));

	UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_Params params;
	params.Point = Point;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity"));

	UPrimitiveComponent_GetPhysicsLinearVelocity_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity"));

	UPrimitiveComponent_GetPhysicsAngularVelocity_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetOverlappingComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<UPrimitiveComponent*>   InOverlappingComponents        (Parm, OutParm, ZeroConstructor)

void UPrimitiveComponent::GetOverlappingComponents(TArray<UPrimitiveComponent*>* InOverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingComponents"));

	UPrimitiveComponent_GetOverlappingComponents_Params params;

	UObject::ProcessEvent(fn, &params);

	if (InOverlappingComponents != nullptr)
		*InOverlappingComponents = params.InOverlappingComponents;
}


// Function Engine.PrimitiveComponent.GetOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<AActor*>                OverlappingActors              (Parm, OutParm, ZeroConstructor)
// UClass*                        ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::GetOverlappingActors(UClass* ClassFilter, TArray<AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlappingActors"));

	UPrimitiveComponent_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	UObject::ProcessEvent(fn, &params);

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.PrimitiveComponent.GetOverlapInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<FOverlapInfo>           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<FOverlapInfo> UPrimitiveComponent::GetOverlapInfos()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetOverlapInfos"));

	UPrimitiveComponent_GetOverlapInfos_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetNumMaterials
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimitiveComponent::GetNumMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetNumMaterials"));

	UPrimitiveComponent_GetNumMaterials_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMaterial"));

	UPrimitiveComponent_GetMaterial_Params params;
	params.ElementIndex = ElementIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMassScale
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetMassScale(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMassScale"));

	UPrimitiveComponent_GetMassScale_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetMass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetMass"));

	UPrimitiveComponent_GetMass_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetLinearDamping
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetLinearDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetLinearDamping"));

	UPrimitiveComponent_GetLinearDamping_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetInertiaTensor
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::GetInertiaTensor(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetInertiaTensor"));

	UPrimitiveComponent_GetInertiaTensor_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionResponse> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ECollisionResponse> UPrimitiveComponent::GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel"));

	UPrimitiveComponent_GetCollisionResponseToChannel_Params params;
	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionProfileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UPrimitiveComponent::GetCollisionProfileName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionProfileName"));

	UPrimitiveComponent_GetCollisionProfileName_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionObjectType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ECollisionChannel> UPrimitiveComponent::GetCollisionObjectType()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCollisionObjectType"));

	UPrimitiveComponent_GetCollisionObjectType_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetClosestPointOnCollision
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        OutPointOnBody                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetClosestPointOnCollision(const FVector& Point, const FName& BoneName, FVector* OutPointOnBody)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetClosestPointOnCollision"));

	UPrimitiveComponent_GetClosestPointOnCollision_Params params;
	params.Point = Point;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	if (OutPointOnBody != nullptr)
		*OutPointOnBody = params.OutPointOnBody;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCenterOfMass
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPrimitiveComponent::GetCenterOfMass(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetCenterOfMass"));

	UPrimitiveComponent_GetCenterOfMass_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetAngularDamping
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetAngularDamping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.GetAngularDamping"));

	UPrimitiveComponent_GetAngularDamping_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance"));

	UPrimitiveComponent_CreateDynamicMaterialInstance_Params params;
	params.ElementIndex = ElementIndex;
	params.SourceMaterial = SourceMaterial;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial"));

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Parent = Parent;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic"));

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic_Params params;
	params.ElementIndex = ElementIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<AActor*>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<AActor*> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors"));

	UPrimitiveComponent_CopyArrayOfMoveIgnoreActors_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InSlack                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::ClearMoveIgnoreActors(int InSlack)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors"));

	UPrimitiveComponent_ClearMoveIgnoreActors_Params params;
	params.InSlack = InSlack;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.CanCharacterStepUp
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::CanCharacterStepUp(APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.CanCharacterStepUp"));

	UPrimitiveComponent_CanCharacterStepUp_Params params;
	params.Pawn = Pawn;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.AddTorque
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Torque                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddTorque(const FVector& Torque, const FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddTorque"));

	UPrimitiveComponent_AddTorque_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialImpulse(const FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialImpulse"));

	UPrimitiveComponent_AddRadialImpulse_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddRadialForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialForce(const FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddRadialForce"));

	UPrimitiveComponent_AddRadialForce_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddImpulseAtLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulseAtLocation(const FVector& Impulse, const FVector& Location, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulseAtLocation"));

	UPrimitiveComponent_AddImpulseAtLocation_Params params;
	params.Impulse = Impulse;
	params.Location = Location;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulse(const FVector& Impulse, const FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddImpulse"));

	UPrimitiveComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddForceAtLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Force                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForceAtLocation(const FVector& Force, const FVector& Location, const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForceAtLocation"));

	UPrimitiveComponent_AddForceAtLocation_Params params;
	params.Force = Force;
	params.Location = Location;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Force                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAccelChange                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForce(const FVector& Force, const FName& BoneName, bool bAccelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddForce"));

	UPrimitiveComponent_AddForce_Params params;
	params.Force = Force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PrimitiveComponent.AddAngularImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddAngularImpulse(const FVector& Impulse, const FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PrimitiveComponent.AddAngularImpulse"));

	UPrimitiveComponent_AddAngularImpulse_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_SpectatorClass
// (Native, Public)

void AGameState::OnRep_SpectatorClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_SpectatorClass"));

	AGameState_OnRep_SpectatorClass_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_ReplicatedWorldTimeSeconds
// (Native, Protected)

void AGameState::OnRep_ReplicatedWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_ReplicatedWorldTimeSeconds"));

	AGameState_OnRep_ReplicatedWorldTimeSeconds_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_MatchState
// (Native, Public)

void AGameState::OnRep_MatchState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_MatchState"));

	AGameState_OnRep_MatchState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_GameModeClass
// (Native, Public)

void AGameState::OnRep_GameModeClass()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_GameModeClass"));

	AGameState_OnRep_GameModeClass_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.OnRep_ElapsedTime
// (Native, Public)

void AGameState::OnRep_ElapsedTime()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.OnRep_ElapsedTime"));

	AGameState_OnRep_ElapsedTime_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameState.GetServerWorldTimeSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameState::GetServerWorldTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameState.GetServerWorldTimeSeconds"));

	AGameState_GetServerWorldTimeSeconds_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SSSwapControllers
// (Exec, Native, Public)

void UGameViewportClient::SSSwapControllers()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SSSwapControllers"));

	UGameViewportClient_SSSwapControllers_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameViewportClient.ShowTitleSafeArea
// (Exec, Native, Public)

void UGameViewportClient::ShowTitleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.ShowTitleSafeArea"));

	UGameViewportClient_ShowTitleSafeArea_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.GameViewportClient.SetConsoleTarget
// (Exec, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameViewportClient.SetConsoleTarget"));

	UGameViewportClient_SetConsoleTarget_Params params;
	params.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerState.OnRep_UniqueId
// (Native, Public)

void APlayerState::OnRep_UniqueId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_UniqueId"));

	APlayerState_OnRep_UniqueId_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerState.OnRep_PlayerName
// (Native, Public)

void APlayerState::OnRep_PlayerName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerState.OnRep_PlayerName"));

	APlayerState_OnRep_PlayerName_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.UnPossess
// (Native, Public, BlueprintCallable)

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.UnPossess"));

	AController_UnPossess_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.StopMovement
// (Native, Public, BlueprintCallable)

void AController::StopMovement()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.StopMovement"));

	AController_StopMovement_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.SetInitialLocationAndRotation
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetInitialLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetInitialLocationAndRotation"));

	AController_SetInitialLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.SetControlRotation
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetControlRotation(const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.SetControlRotation"));

	AController_SetControlRotation_Params params;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.ReceiveInstigatedAnyDamage
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// UDamageType*                   DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ReceiveInstigatedAnyDamage"));

	AController_ReceiveInstigatedAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.Possess
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// APawn*                         InPawn                         (Parm, ZeroConstructor, IsPlainOldData)

void AController::Possess(APawn* InPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.Possess"));

	AController_Possess_Params params;
	params.InPawn = InPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.OnRep_PlayerState
// (Native, Public)

void AController::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_PlayerState"));

	AController_OnRep_PlayerState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.OnRep_Pawn
// (Native, Public)

void AController::OnRep_Pawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.OnRep_Pawn"));

	AController_OnRep_Pawn_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.LineOfSightTo
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ViewPoint                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlternateChecks               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::LineOfSightTo(AActor* Other, const FVector& ViewPoint, bool bAlternateChecks)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.LineOfSightTo"));

	AController_LineOfSightTo_Params params;
	params.Other = Other;
	params.ViewPoint = ViewPoint;
	params.bAlternateChecks = bAlternateChecks;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.K2_GetPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* AController::K2_GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.K2_GetPawn"));

	AController_K2_GetPawn_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalPlayerController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalPlayerController"));

	AController_IsLocalPlayerController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.IsLocalController"));

	AController_IsLocalController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* AController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetViewTarget"));

	AController_GetViewTarget_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetDesiredRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator AController::GetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetDesiredRotation"));

	AController_GetDesiredRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.GetControlRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator AController::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.GetControlRotation"));

	AController_GetControlRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Controller.ClientSetRotation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetCamera                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetRotation(const FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetRotation"));

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.ClientSetLocation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetLocation(const FVector& NewLocation, const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.ClientSetLocation"));

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Controller.CastToPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// APlayerController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerController* AController::CastToPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Controller.CastToPlayerController"));

	AController_CastToPlayerController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustReleased
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustReleased(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustReleased"));

	APlayerController_WasInputKeyJustReleased_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustPressed(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.WasInputKeyJustPressed"));

	APlayerController_WasInputKeyJustPressed_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.ToggleSpeaking
// (Exec, Native, Public)
// Parameters:
// bool                           bInSpeaking                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ToggleSpeaking(bool bInSpeaking)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ToggleSpeaking"));

	APlayerController_ToggleSpeaking_Params params;
	params.bInSpeaking = bInSpeaking;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SwitchLevel
// (Exec, Native, Public)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)

void APlayerController::SwitchLevel(const FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SwitchLevel"));

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.StopHapticEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::StopHapticEffect(TEnumAsByte<EControllerHand> Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StopHapticEffect"));

	APlayerController_StopHapticEffect_Params params;
	params.Hand = Hand;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.StartFire
// (Exec, Native, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.StartFire"));

	APlayerController_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetVirtualJoystickVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetVirtualJoystickVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetVirtualJoystickVisibility"));

	APlayerController_SetVirtualJoystickVisibility_Params params;
	params.bVisible = bVisible;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetViewTargetWithBlend
// (Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        NewViewTarget                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetViewTargetWithBlend"));

	APlayerController_SetViewTargetWithBlend_Params params;
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetName
// (Exec, Native, Public)
// Parameters:
// FString                        S                              (Parm, ZeroConstructor)

void APlayerController::SetName(const FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetName"));

	APlayerController_SetName_Params params;
	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetIgnoreMoveInput
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewMoveInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetIgnoreMoveInput"));

	APlayerController_SetIgnoreMoveInput_Params params;
	params.bNewMoveInput = bNewMoveInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetIgnoreLookInput
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLookInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetIgnoreLookInput"));

	APlayerController_SetIgnoreLookInput_Params params;
	params.bNewLookInput = bNewLookInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetHapticsByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Frequency                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Amplitude                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<EControllerHand> Hand)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetHapticsByValue"));

	APlayerController_SetHapticsByValue_Params params;
	params.Frequency = Frequency;
	params.Amplitude = Amplitude;
	params.Hand = Hand;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetCinematicMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetCinematicMode"));

	APlayerController_SetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SetAudioListenerOverride
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// USceneComponent*               AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetAudioListenerOverride(USceneComponent* AttachToComponent, const FVector& Location, const FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SetAudioListenerOverride"));

	APlayerController_SetAudioListenerOverride_Params params;
	params.AttachToComponent = AttachToComponent;
	params.Location = Location;
	params.Rotation = Rotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewSelf
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FViewTargetTransitionParams    TransitionParams               (Parm)

void APlayerController::ServerViewSelf(const FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewSelf"));

	APlayerController_ServerViewSelf_Params params;
	params.TransitionParams = TransitionParams;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewPrevPlayer
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewPrevPlayer"));

	APlayerController_ServerViewPrevPlayer_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerViewNextPlayer
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerViewNextPlayer"));

	APlayerController_ServerViewNextPlayer_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerVerifyViewTarget"));

	APlayerController_ServerVerifyViewTarget_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerUpdateCamera
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FVector_NetQuantize            CamLoc                         (Parm)
// int                            CamPitchAndYaw                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerUpdateCamera(const FVector_NetQuantize& CamLoc, int CamPitchAndYaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUpdateCamera"));

	APlayerController_ServerUpdateCamera_Params params;
	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerUnmutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FUniqueNetIdRepl               PlayerId                       (Parm)

void APlayerController::ServerUnmutePlayer(const FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerUnmutePlayer"));

	APlayerController_ServerUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerToggleAILogging
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerToggleAILogging"));

	APlayerController_ServerToggleAILogging_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerShortTimeout
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerShortTimeout"));

	APlayerController_ServerShortTimeout_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerSetSpectatorWaiting
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorWaiting"));

	APlayerController_ServerSetSpectatorWaiting_Params params;
	params.bWaiting = bWaiting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// (Net, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// FVector                        NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRot                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerSetSpectatorLocation(const FVector& NewLoc, const FRotator& NewRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerSetSpectatorLocation"));

	APlayerController_ServerSetSpectatorLocation_Params params;
	params.NewLoc = NewLoc;
	params.NewRot = NewRot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerRestartPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerRestartPlayer"));

	APlayerController_ServerRestartPlayer_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerPause
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerPause"));

	APlayerController_ServerPause_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// (Final, Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FName                          WorldPackageName               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerNotifyLoadedWorld(const FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerNotifyLoadedWorld"));

	APlayerController_ServerNotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerMutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FUniqueNetIdRepl               PlayerId                       (Parm)

void APlayerController::ServerMutePlayer(const FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerMutePlayer"));

	APlayerController_ServerMutePlayer_Params params;
	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCheckClientPossessionReliable
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerCheckClientPossessionReliable()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossessionReliable"));

	APlayerController_ServerCheckClientPossessionReliable_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCheckClientPossession
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerController::ServerCheckClientPossession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCheckClientPossession"));

	APlayerController_ServerCheckClientPossession_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerChangeName
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FString                        S                              (Parm, ZeroConstructor)

void APlayerController::ServerChangeName(const FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerChangeName"));

	APlayerController_ServerChangeName_Params params;
	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerCamera
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// FName                          NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerCamera(const FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerCamera"));

	APlayerController_ServerCamera_Params params;
	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// APawn*                         P                              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerAcknowledgePossession(APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ServerAcknowledgePossession"));

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.SendToConsole
// (Exec, Native, Public)
// Parameters:
// FString                        Command                        (Parm, ZeroConstructor)

void APlayerController::SendToConsole(const FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.SendToConsole"));

	APlayerController_SendToConsole_Params params;
	params.Command = Command;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.RestartLevel
// (Exec, Native, Public)

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.RestartLevel"));

	APlayerController_RestartLevel_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreMoveInput
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreMoveInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreMoveInput"));

	APlayerController_ResetIgnoreMoveInput_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreLookInput
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreLookInput()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreLookInput"));

	APlayerController_ResetIgnoreLookInput_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ResetIgnoreInputFlags
// (Native, Public, BlueprintCallable)

void APlayerController::ResetIgnoreInputFlags()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ResetIgnoreInputFlags"));

	APlayerController_ResetIgnoreInputFlags_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ProjectWorldLocationToScreen
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::ProjectWorldLocationToScreen(const FVector& WorldLocation, FVector2D* ScreenLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ProjectWorldLocationToScreen"));

	APlayerController_ProjectWorldLocationToScreen_Params params;
	params.WorldLocation = WorldLocation;

	UObject::ProcessEvent(fn, &params);

	if (ScreenLocation != nullptr)
		*ScreenLocation = params.ScreenLocation;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayHapticEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UHapticFeedbackEffect*         HapticEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EControllerHand>   Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::PlayHapticEffect(UHapticFeedbackEffect* HapticEffect, TEnumAsByte<EControllerHand> Hand, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayHapticEffect"));

	APlayerController_PlayHapticEffect_Params params;
	params.HapticEffect = HapticEffect;
	params.Hand = Hand;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.PlayDynamicForceFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftLarge              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftSmall              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightLarge             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightSmall             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDynamicForceFeedbackAction> Action                         (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.PlayDynamicForceFeedback"));

	APlayerController_PlayDynamicForceFeedback_Params params;
	params.Intensity = Intensity;
	params.Duration = Duration;
	params.bAffectsLeftLarge = bAffectsLeftLarge;
	params.bAffectsLeftSmall = bAffectsLeftSmall;
	params.bAffectsRightLarge = bAffectsRightLarge;
	params.bAffectsRightSmall = bAffectsRightSmall;
	params.Action = Action;
	params.LatentInfo = LatentInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.Pause
// (Exec, Native, Public)

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Pause"));

	APlayerController_Pause_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.OnServerStartedVisualLogger
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIsLogging                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::OnServerStartedVisualLogger(bool bIsLogging)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.OnServerStartedVisualLogger"));

	APlayerController_OnServerStartedVisualLogger_Params params;
	params.bIsLogging = bIsLogging;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.LocalTravel
// (Exec, Native, Public)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)

void APlayerController::LocalTravel(const FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.LocalTravel"));

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.IsSeamlessTravelInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsSeamlessTravelInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsSeamlessTravelInProgress"));

	APlayerController_IsSeamlessTravelInProgress_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPossessingServerAcknowledgedPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsPossessingServerAcknowledgedPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsPossessingServerAcknowledgedPawn"));

	APlayerController_IsPossessingServerAcknowledgedPawn_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsMoveInputIgnored"));

	APlayerController_IsMoveInputIgnored_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsLookInputIgnored
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsLookInputIgnored"));

	APlayerController_IsLookInputIgnored_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsInputKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsInputKeyDown(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.IsInputKeyDown"));

	APlayerController_IsInputKeyDown_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetViewportSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            SizeX                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetViewportSize(int* SizeX, int* SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetViewportSize"));

	APlayerController_GetViewportSize_Params params;

	UObject::ProcessEvent(fn, &params);

	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;
}


// Function Engine.PlayerController.GetSpectatorPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ASpectatorPawn*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ASpectatorPawn* APlayerController::GetSpectatorPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetSpectatorPawn"));

	APlayerController_GetSpectatorPawn_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetMousePosition
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetMousePosition(float* LocationX, float* LocationY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetMousePosition"));

	APlayerController_GetMousePosition_Params params;

	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputVectorKeyState
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APlayerController::GetInputVectorKeyState(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputVectorKeyState"));

	APlayerController_GetInputVectorKeyState_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputTouchState
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputTouchState"));

	APlayerController_GetInputTouchState_Params params;
	params.FingerIndex = FingerIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.PlayerController.GetInputMouseDelta
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMouseDelta"));

	APlayerController_GetInputMouseDelta_Params params;

	UObject::ProcessEvent(fn, &params);

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.PlayerController.GetInputMotionState
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Tilt                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        RotationRate                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Gravity                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Acceleration                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMotionState(FVector* Tilt, FVector* RotationRate, FVector* Gravity, FVector* Acceleration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputMotionState"));

	APlayerController_GetInputMotionState_Params params;

	UObject::ProcessEvent(fn, &params);

	if (Tilt != nullptr)
		*Tilt = params.Tilt;
	if (RotationRate != nullptr)
		*RotationRate = params.RotationRate;
	if (Gravity != nullptr)
		*Gravity = params.Gravity;
	if (Acceleration != nullptr)
		*Acceleration = params.Acceleration;
}


// Function Engine.PlayerController.GetInputKeyTimeDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputKeyTimeDown(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputKeyTimeDown"));

	APlayerController_GetInputKeyTimeDown_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputAnalogStickState
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogStickState"));

	APlayerController_GetInputAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	UObject::ProcessEvent(fn, &params);

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.PlayerController.GetInputAnalogKeyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FKey                           Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputAnalogKeyState(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetInputAnalogKeyState"));

	APlayerController_GetInputAnalogKeyState_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHUD
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AHUD*                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AHUD* APlayerController::GetHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHUD"));

	APlayerController_GetHUD_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerForObjects"));

	APlayerController_GetHitResultUnderFingerForObjects_Params params;
	params.FingerIndex = FingerIndex;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFingerByChannel"));

	APlayerController_GetHitResultUnderFingerByChannel_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFinger
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderFinger"));

	APlayerController_GetHitResultUnderFinger_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorForObjects"));

	APlayerController_GetHitResultUnderCursorForObjects_Params params;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursorByChannel"));

	APlayerController_GetHitResultUnderCursorByChannel_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursor
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetHitResultUnderCursor"));

	APlayerController_GetHitResultUnderCursor_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFocalLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APlayerController::GetFocalLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.GetFocalLocation"));

	APlayerController_GetFocalLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerController.FOV
// (Exec, Native, Public)
// Parameters:
// float                          NewFOV                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::FOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.FOV"));

	APlayerController_FOV_Params params;
	params.NewFOV = NewFOV;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.EnableCheats
// (Exec, Native, Public)

void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.EnableCheats"));

	APlayerController_EnableCheats_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.DeprojectScreenPositionToWorld
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector* WorldLocation, FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectScreenPositionToWorld"));

	APlayerController_DeprojectScreenPositionToWorld_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	UObject::ProcessEvent(fn, &params);

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DeprojectMousePositionToWorld
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectMousePositionToWorld(FVector* WorldLocation, FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.DeprojectMousePositionToWorld"));

	APlayerController_DeprojectMousePositionToWorld_Params params;

	UObject::ProcessEvent(fn, &params);

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ConsoleKey
// (Exec, Native, Public)
// Parameters:
// FKey                           Key                            (Parm)

void APlayerController::ConsoleKey(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ConsoleKey"));

	APlayerController_ConsoleKey_Params params;
	params.Key = Key;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientWasKicked
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FText                          KickReason                     (ConstParm, Parm, ReferenceParm)

void APlayerController::ClientWasKicked(const FText& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientWasKicked"));

	APlayerController_ClientWasKicked_Params params;
	params.KickReason = KickReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientVoiceHandshakeComplete"));

	APlayerController_ClientVoiceHandshakeComplete_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatusBatched
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FString                        PackageBasePath                (Parm, ZeroConstructor)
// TArray<FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo (ConstParm, Parm, ZeroConstructor, ReferenceParm)

void APlayerController::ClientUpdateLevelStreamingStatusBatched(const FString& PackageBasePath, TArray<FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateLevelStreamingStatusBatched"));

	APlayerController_ClientUpdateLevelStreamingStatusBatched_Params params;
	params.PackageBasePath = PackageBasePath;
	params.LevelStreamingStatusUpdateInfo = LevelStreamingStatusUpdateInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FName                          PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeLoaded             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeVisible            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBlockOnLoad          (Parm, ZeroConstructor, IsPlainOldData)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientUpdateLevelStreamingStatus(const FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus"));

	APlayerController_ClientUpdateLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	params.LODIndex = LODIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientUnmutePlayer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FUniqueNetIdRepl               PlayerId                       (Parm)

void APlayerController::ClientUnmutePlayer(const FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientUnmutePlayer"));

	APlayerController_ClientUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTravelInternal
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// FGuid                          MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTravelInternal(const FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravelInternal"));

	APlayerController_ClientTravelInternal_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTravel
// (Final, Native, Public, HasDefaults)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// FGuid                          MapPackageGuid                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTravel(const FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTravel"));

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientTeamMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// APlayerState*                  SenderPlayerState              (Parm, ZeroConstructor, IsPlainOldData)
// FString                        S                              (Parm, ZeroConstructor)
// FName                          Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTeamMessage(APlayerState* SenderPlayerState, const FString& S, const FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientTeamMessage"));

	APlayerController_ClientTeamMessage_Params params;
	params.SenderPlayerState = SenderPlayerState;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopForceFeedback
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UForceFeedbackEffect*          ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopForceFeedback"));

	APlayerController_ClientStopForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopCameraShake
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraShake(UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraShake"));

	APlayerController_ClientStopCameraShake_Params params;
	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStopCameraAnim
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// UCameraAnim*                   AnimToStop                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraAnim(UCameraAnim* AnimToStop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStopCameraAnim"));

	APlayerController_ClientStopCameraAnim_Params params;
	params.AnimToStop = AnimToStop;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientStartOnlineSession
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientStartOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientStartOnlineSession"));

	APlayerController_ClientStartOnlineSession_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UClass*                        LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSpawnCameraLensEffect(UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSpawnCameraLensEffect"));

	APlayerController_ClientSpawnCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetViewTarget
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// AActor*                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FViewTargetTransitionParams    TransitionParams               (Parm)

void APlayerController::ClientSetViewTarget(AActor* A, const FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetViewTarget"));

	APlayerController_ClientSetViewTarget_Params params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetSpectatorWaiting
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bWaiting                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetSpectatorWaiting(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetSpectatorWaiting"));

	APlayerController_ClientSetSpectatorWaiting_Params params;
	params.bWaiting = bWaiting;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetHUD
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UClass*                        NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetHUD(UClass* NewHUDClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetHUD"));

	APlayerController_ClientSetHUD_Params params;
	params.NewHUDClass = NewHUDClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident"));

	APlayerController_ClientSetForceMipLevelsToBeResident_Params params;
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCinematicMode
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCinematicMode"));

	APlayerController_ClientSetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCameraMode
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FName                          NewCamMode                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraMode(const FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraMode"));

	APlayerController_ClientSetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetCameraFade
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// bool                           bEnableFading                  (Parm, ZeroConstructor, IsPlainOldData)
// FColor                         FadeColor                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      FadeAlpha                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFadeAudio                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraFade(bool bEnableFading, const FColor& FadeColor, const FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetCameraFade"));

	APlayerController_ClientSetCameraFade_Params params;
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading"));

	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientSeamlessTravelComplete
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientSeamlessTravelComplete()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientSeamlessTravelComplete"));

	APlayerController_ClientSeamlessTravelComplete_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReturnToMainMenu
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FString                        ReturnReason                   (Parm, ZeroConstructor)

void APlayerController::ClientReturnToMainMenu(const FString& ReturnReason)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReturnToMainMenu"));

	APlayerController_ClientReturnToMainMenu_Params params;
	params.ReturnReason = ReturnReason;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRetryClientRestart
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// APawn*                         NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRetryClientRestart(APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRetryClientRestart"));

	APlayerController_ClientRetryClientRestart_Params params;
	params.NewPawn = NewPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRestart
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// APawn*                         NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRestart(APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRestart"));

	APlayerController_ClientRestart_Params params;
	params.NewPawn = NewPawn;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReset
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReset"));

	APlayerController_ClientReset_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientRepObjRef
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRepObjRef(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientRepObjRef"));

	APlayerController_ClientRepObjRef_Params params;
	params.Object = Object;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientReceiveLocalizedMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// UClass*                        Message                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Switch                         (Parm, ZeroConstructor, IsPlainOldData)
// APlayerState*                  RelatedPlayerState_2           (Parm, ZeroConstructor, IsPlainOldData)
// APlayerState*                  RelatedPlayerState_3           (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       OptionalObject                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientReceiveLocalizedMessage(UClass* Message, int Switch, APlayerState* RelatedPlayerState_2, APlayerState* RelatedPlayerState_3, UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientReceiveLocalizedMessage"));

	APlayerController_ClientReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPlayerState_2 = RelatedPlayerState_2;
	params.RelatedPlayerState_3 = RelatedPlayerState_3;
	params.OptionalObject = OptionalObject;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPrestreamTextures
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// AActor*                        ForcedActor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableStreaming               (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrestreamTextures"));

	APlayerController_ClientPrestreamTextures_Params params;
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPrepareMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FName                          LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFirst                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLast                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrepareMapChange(const FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPrepareMapChange"));

	APlayerController_ClientPrepareMapChange_Params params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlaySoundAtLocation
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySoundAtLocation(USoundBase* Sound, const FVector& Location, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySoundAtLocation"));

	APlayerController_ClientPlaySoundAtLocation_Params params;
	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlaySound
// (Net, Native, Event, Public, NetClient)
// Parameters:
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlaySound"));

	APlayerController_ClientPlaySound_Params params;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayForceFeedback
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UForceFeedbackEffect*          ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayForceFeedback"));

	APlayerController_ClientPlayForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.bLooping = bLooping;
	params.Tag = Tag;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayCameraShake
// (Net, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraShake(UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayCameraShake"));

	APlayerController_ClientPlayCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientPlayCameraAnim
// (Net, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// UCameraAnim*                   AnimToPlay                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> Space                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       CustomPlaySpace                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraAnim(UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientPlayCameraAnim"));

	APlayerController_ClientPlayCameraAnim_Params params;
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientMutePlayer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FUniqueNetIdRepl               PlayerId                       (Parm)

void APlayerController::ClientMutePlayer(const FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMutePlayer"));

	APlayerController_ClientMutePlayer_Params params;
	params.PlayerId = PlayerId;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FString                        S                              (Parm, ZeroConstructor)
// FName                          Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientMessage(const FString& S, const FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientMessage"));

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreMoveInput"));

	APlayerController_ClientIgnoreMoveInput_Params params;
	params.bIgnore = bIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientIgnoreLookInput"));

	APlayerController_ClientIgnoreLookInput_Params params;
	params.bIgnore = bIgnore;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientGotoState
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// FName                          NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGotoState(const FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGotoState"));

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientGameEnded
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// AActor*                        EndGameFocus                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsWinner                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGameEnded(AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientGameEnded"));

	APlayerController_ClientGameEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientForceGarbageCollection"));

	APlayerController_ClientForceGarbageCollection_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// (Final, Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientFlushLevelStreaming"));

	APlayerController_ClientFlushLevelStreaming_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientEndOnlineSession
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientEndOnlineSession()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEndOnlineSession"));

	APlayerController_ClientEndOnlineSession_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientEnableNetworkVoice
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientEnableNetworkVoice(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientEnableNetworkVoice"));

	APlayerController_ClientEnableNetworkVoice_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCommitMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCommitMapChange"));

	APlayerController_ClientCommitMapChange_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientClearCameraLensEffects
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void APlayerController::ClientClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientClearCameraLensEffects"));

	APlayerController_ClientClearCameraLensEffects_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCapBandwidth
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int                            Cap                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCapBandwidth"));

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientCancelPendingMapChange"));

	APlayerController_ClientCancelPendingMapChange_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientBlendOutCameraShake
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientBlendOutCameraShake(UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientBlendOutCameraShake"));

	APlayerController_ClientBlendOutCameraShake_Params params;
	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// (Final, Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// FVector                        InLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideLocation              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientAddTextureStreamingLoc(const FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClientAddTextureStreamingLoc"));

	APlayerController_ClientAddTextureStreamingLoc_Params params;
	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ClearAudioListenerOverride
// (Final, Native, Public, BlueprintCallable)

void APlayerController::ClearAudioListenerOverride()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ClearAudioListenerOverride"));

	APlayerController_ClearAudioListenerOverride_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.Camera
// (Exec, Native, Public)
// Parameters:
// FName                          NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::Camera(const FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.Camera"));

	APlayerController_Camera_Params params;
	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddYawInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddYawInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddYawInput"));

	APlayerController_AddYawInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddRollInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddRollInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddRollInput"));

	APlayerController_AddRollInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.AddPitchInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddPitchInput(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.AddPitchInput"));

	APlayerController_AddPitchInput_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerController.ActivateTouchInterface
// (Native, Public, BlueprintCallable)
// Parameters:
// UTouchInterface*               NewTouchInterface              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ActivateTouchInterface(UTouchInterface* NewTouchInterface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerController.ActivateTouchInterface"));

	APlayerController_ActivateTouchInterface_Params params;
	params.NewTouchInterface = NewTouchInterface;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.WorldSettings.OnRep_WorldGravityZ
// (Native, Public)

void AWorldSettings::OnRep_WorldGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WorldSettings.OnRep_WorldGravityZ"));

	AWorldSettings_OnRep_WorldGravityZ_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PostProcessComponent.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void UPostProcessComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessComponent.AddOrUpdateBlendable"));

	UPostProcessComponent_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.ToggleDisplay
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::ToggleDisplay()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ToggleDisplay"));

	ADebugCameraController_ToggleDisplay_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// (Exec, Native, Public)

void ADebugCameraController::ShowDebugSelectedInfo()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.ShowDebugSelectedInfo"));

	ADebugCameraController_ShowDebugSelectedInfo_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.IncreaseFOV
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::IncreaseFOV()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.IncreaseFOV"));

	ADebugCameraController_IncreaseFOV_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.IncreaseCameraSpeed
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::IncreaseCameraSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.IncreaseCameraSpeed"));

	ADebugCameraController_IncreaseCameraSpeed_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.DecreaseFOV
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::DecreaseFOV()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.DecreaseFOV"));

	ADebugCameraController_DecreaseFOV_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DebugCameraController.DecreaseCameraSpeed
// (Final, Native, Public, BlueprintCallable)

void ADebugCameraController::DecreaseCameraSpeed()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DebugCameraController.DecreaseCameraSpeed"));

	ADebugCameraController_DecreaseCameraSpeed_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowHUD
// (Exec, Native, Public)

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowHUD"));

	AHUD_ShowHUD_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebugToggleSubCategory
// (Final, Exec, Native, Public)
// Parameters:
// FName                          Category                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebugToggleSubCategory(const FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugToggleSubCategory"));

	AHUD_ShowDebugToggleSubCategory_Params params;
	params.Category = Category;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebugForReticleTargetToggle
// (Final, Exec, Native, Public)
// Parameters:
// UClass*                        DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebugForReticleTargetToggle(UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebugForReticleTargetToggle"));

	AHUD_ShowDebugForReticleTargetToggle_Params params;
	params.DesiredClass = DesiredClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ShowDebug
// (Exec, Native, Public)
// Parameters:
// FName                          DebugType                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebug(const FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ShowDebug"));

	AHUD_ShowDebug_Params params;
	params.DebugType = DebugType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.RemoveDebugText
// (Final, Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// AActor*                        SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLeaveDurationText             (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveDebugText"));

	AHUD_RemoveDebugText_Params params;
	params.SrcActor = SrcActor;
	params.bLeaveDurationText = bLeaveDurationText;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.RemoveAllDebugStrings
// (Final, Net, NetReliable, Native, Event, Public, NetClient)

void AHUD::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.RemoveAllDebugStrings"));

	AHUD_RemoveAllDebugStrings_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxRelease
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// FName                          BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxRelease(const FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxRelease"));

	AHUD_ReceiveHitBoxRelease_Params params;
	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxEndCursorOver
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// FName                          BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxEndCursorOver(const FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxEndCursorOver"));

	AHUD_ReceiveHitBoxEndCursorOver_Params params;
	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxClick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// FName                          BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxClick(const FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxClick"));

	AHUD_ReceiveHitBoxClick_Params params;
	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// FName                          BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxBeginCursorOver(const FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveHitBoxBeginCursorOver"));

	AHUD_ReceiveHitBoxBeginCursorOver_Params params;
	params.BoxName = BoxName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.ReceiveDrawHUD
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// int                            SizeX                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveDrawHUD(int SizeX, int SizeY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.ReceiveDrawHUD"));

	AHUD_ReceiveDrawHUD_Params params;
	params.SizeX = SizeX;
	params.SizeY = SizeY;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.Project
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector AHUD::Project(const FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Project"));

	AHUD_Project_Params params;
	params.Location = Location;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetTextSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FString                        Text                           (Parm, ZeroConstructor)
// float                          OutWidth                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHeight                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// UFont*                         Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetTextSize(const FString& Text, UFont* Font, float Scale, float* OutWidth, float* OutHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetTextSize"));

	AHUD_GetTextSize_Params params;
	params.Text = Text;
	params.Font = Font;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);

	if (OutWidth != nullptr)
		*OutWidth = params.OutWidth;
	if (OutHeight != nullptr)
		*OutHeight = params.OutHeight;
}


// Function Engine.HUD.GetOwningPlayerController
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APlayerController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerController* AHUD::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPlayerController"));

	AHUD_GetOwningPlayerController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetOwningPawn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* AHUD::GetOwningPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetOwningPawn"));

	AHUD_GetOwningPawn_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HUD.GetActorsInSelectionRectangle
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      FirstPoint                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector2D                      SecondPoint                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           bIncludeNonCollidingComponents (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bActorMustBeFullyEnclosed      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetActorsInSelectionRectangle(UClass* ClassFilter, const FVector2D& FirstPoint, const FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.GetActorsInSelectionRectangle"));

	AHUD_GetActorsInSelectionRectangle_Params params;
	params.ClassFilter = ClassFilter;
	params.FirstPoint = FirstPoint;
	params.SecondPoint = SecondPoint;
	params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	UObject::ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.HUD.DrawTextureSimple
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTexture*                      Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTextureSimple"));

	AHUD_DrawTextureSimple_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UTexture*                      Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureU                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureV                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureUWidth                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureVHeight                 (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   TintColor                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawTexture"));

	AHUD_DrawTexture_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.TextureU = TextureU;
	params.TextureV = TextureV;
	params.TextureUWidth = TextureUWidth;
	params.TextureVHeight = TextureVHeight;
	params.TintColor = TintColor;
	params.BlendMode = BlendMode;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FString                        Text                           (Parm, ZeroConstructor)
// FLinearColor                   TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// UFont*                         Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawText(const FString& Text, const FLinearColor& TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawText"));

	AHUD_DrawText_Params params;
	params.Text = Text;
	params.TextColor = TextColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Font = Font;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawRect
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   RectColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawRect(const FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawRect"));

	AHUD_DrawRect_Params params;
	params.RectColor = RectColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterialTriangle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V0_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V1_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V2_Pos                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V0_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V1_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      V2_UV                          (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   V0_Color                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   V1_Color                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   V2_Color                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterialTriangle(UMaterialInterface* Material, const FVector2D& V0_Pos, const FVector2D& V1_Pos, const FVector2D& V2_Pos, const FVector2D& V0_UV, const FVector2D& V1_UV, const FVector2D& V2_UV, const FLinearColor& V0_Color, const FLinearColor& V1_Color, const FLinearColor& V2_Color)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialTriangle"));

	AHUD_DrawMaterialTriangle_Params params;
	params.Material = Material;
	params.V0_Pos = V0_Pos;
	params.V1_Pos = V1_Pos;
	params.V2_Pos = V2_Pos;
	params.V0_UV = V0_UV;
	params.V1_UV = V1_UV;
	params.V2_UV = V2_UV;
	params.V0_Color = V0_Color;
	params.V1_Color = V1_Color;
	params.V2_Color = V2_Color;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterialSimple
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterialSimple"));

	AHUD_DrawMaterialSimple_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawMaterial
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialU                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialV                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialUWidth                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialVHeight                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawMaterial"));

	AHUD_DrawMaterial_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.MaterialU = MaterialU;
	params.MaterialV = MaterialV;
	params.MaterialUWidth = MaterialUWidth;
	params.MaterialVHeight = MaterialVHeight;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.DrawLine
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          StartScreenX                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartScreenY                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenX                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenY                     (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const FLinearColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.DrawLine"));

	AHUD_DrawLine_Params params;
	params.StartScreenX = StartScreenX;
	params.StartScreenY = StartScreenY;
	params.EndScreenX = EndScreenX;
	params.EndScreenY = EndScreenY;
	params.LineColor = LineColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.Deproject
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AHUD::Deproject(float ScreenX, float ScreenY, FVector* WorldPosition, FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.Deproject"));

	AHUD_Deproject_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	UObject::ProcessEvent(fn, &params);

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.HUD.AddHitBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      Position                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      Size                           (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConsumesInput                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddHitBox(const FVector2D& Position, const FVector2D& Size, const FName& InName, bool bConsumesInput, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddHitBox"));

	AHUD_AddHitBox_Params params;
	params.Position = Position;
	params.Size = Size;
	params.InName = InName;
	params.bConsumesInput = bConsumesInput;
	params.Priority = Priority;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.HUD.AddDebugText
// (Final, Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// FString                        DebugText                      (Parm, ZeroConstructor)
// AActor*                        SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Offset                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        DesiredOffset                  (Parm, ZeroConstructor, IsPlainOldData)
// FColor                         TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipOverwriteCheck            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsoluteLocation              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bKeepAttachedToActor           (Parm, ZeroConstructor, IsPlainOldData)
// UFont*                         InFont                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FontScale                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawShadow                    (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddDebugText(const FString& DebugText, AActor* SrcActor, float Duration, const FVector& Offset, const FVector& DesiredOffset, const FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HUD.AddDebugText"));

	AHUD_AddDebugText_Params params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.FontScale = FontScale;
	params.bDrawShadow = bDrawShadow;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.WorldOriginLocationChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// FIntVector                     OldOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)
// FIntVector                     NewOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::WorldOriginLocationChanged(const FIntVector& OldOriginLocation, const FIntVector& NewOriginLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.WorldOriginLocationChanged"));

	ALevelScriptActor_WorldOriginLocationChanged_Params params;
	params.OldOriginLocation = OldOriginLocation;
	params.NewOriginLocation = NewOriginLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.SetCinematicMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bCinematicMode                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.SetCinematicMode"));

	ALevelScriptActor_SetCinematicMode_Params params;
	params.bCinematicMode = bCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.RemoteEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALevelScriptActor::RemoteEvent(const FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.RemoteEvent"));

	ALevelScriptActor_RemoteEvent_Params params;
	params.EventName = EventName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelScriptActor.MatchStarted
// (Event, Public, BlueprintEvent)

void ALevelScriptActor::MatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.MatchStarted"));

	ALevelScriptActor_MatchStarted_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.LevelReset
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)

void ALevelScriptActor::LevelReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.LevelReset"));

	ALevelScriptActor_LevelReset_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelScriptActor.InitialNetRelevantActorsCreated
// (Event, Public, BlueprintEvent)

void ALevelScriptActor::InitialNetRelevantActorsCreated()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelScriptActor.InitialNetRelevantActorsCreated"));

	ALevelScriptActor_InitialNetRelevantActorsCreated_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MeshComponent.ResetDefaultMaterials
// (Final, Native, Public, BlueprintCallable)

void UMeshComponent::ResetDefaultMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.ResetDefaultMaterials"));

	UMeshComponent_ResetDefaultMaterials_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MeshComponent.GetMaterials
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<UMaterialInterface*>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<UMaterialInterface*> UMeshComponent::GetMaterials()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MeshComponent.GetMaterials"));

	UMeshComponent_GetMaterials_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// UStaticMesh*                   NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStaticMeshComponent::SetStaticMesh(UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetStaticMesh"));

	UStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetForcedLodModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewForcedLodModel              (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::SetForcedLodModel(int NewForcedLodModel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetForcedLodModel"));

	UStaticMeshComponent_SetForcedLodModel_Params params;
	params.NewForcedLodModel = NewForcedLodModel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.SetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::SetCustomDepthMaterial(UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.SetCustomDepthMaterial"));

	UStaticMeshComponent_SetCustomDepthMaterial_Params params;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.OnRep_StaticMesh
// (Final, Native, Public)
// Parameters:
// UStaticMesh*                   OldStaticMesh                  (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::OnRep_StaticMesh(UStaticMesh* OldStaticMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.OnRep_StaticMesh"));

	UStaticMeshComponent_OnRep_StaticMesh_Params params;
	params.OldStaticMesh = OldStaticMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMeshComponent.GetLocalBounds
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::GetLocalBounds(FVector* Min, FVector* Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.GetLocalBounds"));

	UStaticMeshComponent_GetLocalBounds_Params params;

	UObject::ProcessEvent(fn, &params);

	if (Min != nullptr)
		*Min = params.Min;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Engine.StaticMeshComponent.GetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* UStaticMeshComponent::GetCustomDepthMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMeshComponent.GetCustomDepthMaterial"));

	UStaticMeshComponent_GetCustomDepthMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UPhysicalMaterial*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetPhysicalMaterial"));

	UMaterialInterface_GetPhysicalMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetBaseMaterial
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UMaterial*                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterial* UMaterialInterface::GetBaseMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInterface.GetBaseMaterial"));

	UMaterialInterface_GetBaseMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.IsDisabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.IsDisabled"));

	UCameraModifier_IsDisabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.GetViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UCameraModifier::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.GetViewTarget"));

	UCameraModifier_GetViewTarget_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraModifier.EnableModifier
// (Native, Public, BlueprintCallable)

void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.EnableModifier"));

	UCameraModifier_EnableModifier_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraModifier.DisableModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UCameraModifier::DisableModifier(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.DisableModifier"));

	UCameraModifier_DisableModifier_Params params;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraModifier.BlueprintModifyPostProcess
// (BlueprintCosmetic, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          PostProcessBlendWeight         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FPostProcessSettings           PostProcessSettings            (Parm, OutParm)

void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, FPostProcessSettings* PostProcessSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyPostProcess"));

	UCameraModifier_BlueprintModifyPostProcess_Params params;
	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	if (PostProcessBlendWeight != nullptr)
		*PostProcessBlendWeight = params.PostProcessBlendWeight;
	if (PostProcessSettings != nullptr)
		*PostProcessSettings = params.PostProcessSettings;
}


// Function Engine.CameraModifier.BlueprintModifyCamera
// (BlueprintCosmetic, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          FOV                            (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewViewLocation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewViewRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NewFOV                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCameraModifier::BlueprintModifyCamera(float DeltaTime, const FVector& ViewLocation, const FRotator& ViewRotation, float FOV, FVector* NewViewLocation, FRotator* NewViewRotation, float* NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraModifier.BlueprintModifyCamera"));

	UCameraModifier_BlueprintModifyCamera_Params params;
	params.DeltaTime = DeltaTime;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;
	params.FOV = FOV;

	UObject::ProcessEvent(fn, &params);

	if (NewViewLocation != nullptr)
		*NewViewLocation = params.NewViewLocation;
	if (NewViewRotation != nullptr)
		*NewViewRotation = params.NewViewRotation;
	if (NewFOV != nullptr)
		*NewFOV = params.NewFOV;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetVectorParameter(const FName& ParameterName, const FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetVectorParameter"));

	UParticleSystemComponent_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetTrailSourceData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTrailSourceData(const FName& InFirstSocketName, const FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTrailSourceData"));

	UParticleSystemComponent_SetTrailSourceData_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetTemplate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UParticleSystem*               NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTemplate(UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetTemplate"));

	UParticleSystemComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetMaterialParameter(const FName& ParameterName, UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetMaterialParameter"));

	UParticleSystemComponent_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetFloatParameter(const FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetFloatParameter"));

	UParticleSystemComponent_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetEnableDistanceFading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetEnableDistanceFading(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetEnableDistanceFading"));

	UParticleSystemComponent_SetEnableDistanceFading_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetEmitterEnable
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          EmitterName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewEnableState                (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetEmitterEnable(const FName& EmitterName, bool bNewEnableState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetEmitterEnable"));

	UParticleSystemComponent_SetEmitterEnable_Params params;
	params.EmitterName = EmitterName;
	params.bNewEnableState = bNewEnableState;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetCustomLocalSpaceWorldSpace
// (Final, Native, Public, BlueprintCallable)

void UParticleSystemComponent::SetCustomLocalSpaceWorldSpace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetCustomLocalSpaceWorldSpace"));

	UParticleSystemComponent_SetCustomLocalSpaceWorldSpace_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetCustomLocalSpaceComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USceneComponent*               InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UParticleSystemComponent::SetCustomLocalSpaceComponent(USceneComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetCustomLocalSpaceComponent"));

	UParticleSystemComponent_SetCustomLocalSpaceComponent_Params params;
	params.InComponent = InComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetColorParameter(const FName& ParameterName, const FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetColorParameter"));

	UParticleSystemComponent_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetTangent"));

	UParticleSystemComponent_SetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewTargetStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetStrength"));

	UParticleSystemComponent_SetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewTargetPoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamTargetPoint"));

	UParticleSystemComponent_SetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceTangent"));

	UParticleSystemComponent_SetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewSourceStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourceStrength"));

	UParticleSystemComponent_SetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewSourcePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamSourcePoint"));

	UParticleSystemComponent_SetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewEndPoint                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetBeamEndPoint"));

	UParticleSystemComponent_SetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetActorParameter(const FName& ParameterName, AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.SetActorParameter"));

	UParticleSystemComponent_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.GetNumActiveParticles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UParticleSystemComponent::GetNumActiveParticles()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNumActiveParticles"));

	UParticleSystemComponent_GetNumActiveParticles_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetNamedMaterial
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GetNamedMaterial"));

	UParticleSystemComponent_GetNamedMaterial_Params params;
	params.InName = InName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GenerateParticleEvent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          InEventName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          InEmitterTime                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InLocation                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InDirection                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InVelocity                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::GenerateParticleEvent(const FName& InEventName, float InEmitterTime, const FVector& InLocation, const FVector& InDirection, const FVector& InVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.GenerateParticleEvent"));

	UParticleSystemComponent_GenerateParticleEvent_Params params;
	params.InEventName = InEventName;
	params.InEmitterTime = InEmitterTime;
	params.InLocation = InLocation;
	params.InDirection = InDirection;
	params.InVelocity = InVelocity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.EndTrails
// (Final, Native, Public, BlueprintCallable)

void UParticleSystemComponent::EndTrails()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.EndTrails"));

	UParticleSystemComponent_EndTrails_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const FName& InName, UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance"));

	UParticleSystemComponent_CreateNamedDynamicMaterialInstance_Params params;
	params.InName = InName;
	params.SourceMaterial = SourceMaterial;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.BeginTrails
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// FName                          InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::BeginTrails(const FName& InFirstSocketName, const FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.BeginTrails"));

	UParticleSystemComponent_BeginTrails_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.AddKillSphere
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector4                       KillSphere                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UParticleSystemComponent::AddKillSphere(const FVector4& KillSphere)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.AddKillSphere"));

	UParticleSystemComponent_AddKillSphere_Params params;
	params.KillSphere = KillSphere;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ParticleSystemComponent.AddEmitterPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector4                       Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector4                       InheritedVelocity              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector4                       Orientation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::AddEmitterPoint(const FVector4& Position, const FVector4& InheritedVelocity, const FVector4& Orientation, const FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystemComponent.AddEmitterPoint"));

	UParticleSystemComponent_AddEmitterPoint_Params params;
	params.Position = Position;
	params.InheritedVelocity = InheritedVelocity;
	params.Orientation = Orientation;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint"));

	USplineComponent_SetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InLocation = InLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetUnselectedSplineSegmentColor(const FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor"));

	USplineComponent_SetUnselectedSplineSegmentColor_Params params;
	params.SegmentColor = SegmentColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InTangent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetTangentAtSplinePoint"));

	USplineComponent_SetTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InTangent = InTangent;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplineWorldPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<FVector>                Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineWorldPoints(TArray<FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineWorldPoints"));

	USplineComponent_SetSplineWorldPoints_Params params;
	params.Points = Points;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplinePointType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePointType"));

	USplineComponent_SetSplinePointType_Params params;
	params.PointIndex = PointIndex;
	params.Type = Type;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplinePoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<FVector>                Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePoints(TArray<FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplinePoints"));

	USplineComponent_SetSplinePoints_Params params;
	params.Points = Points;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSplineLocalPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<FVector>                Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineLocalPoints(TArray<FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSplineLocalPoints"));

	USplineComponent_SetSplineLocalPoints_Params params;
	params.Points = Points;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetSelectedSplineSegmentColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   SegmentColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetSelectedSplineSegmentColor(const FLinearColor& SegmentColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetSelectedSplineSegmentColor"));

	USplineComponent_SetSelectedSplineSegmentColor_Params params;
	params.SegmentColor = SegmentColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetLocationAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetLocationAtSplinePoint(int PointIndex, const FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetLocationAtSplinePoint"));

	USplineComponent_SetLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InLocation = InLocation;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetDefaultUpVector
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        UpVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetDefaultUpVector(const FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetDefaultUpVector"));

	USplineComponent_SetDefaultUpVector_Params params;
	params.UpVector = UpVector;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.SetClosedLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInClosedLoop                  (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetClosedLoop(bool bInClosedLoop)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.SetClosedLoop"));

	USplineComponent_SetClosedLoop_Params params;
	params.bInClosedLoop = bInClosedLoop;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.IsClosedLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineComponent::IsClosedLoop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.IsClosedLoop"));

	USplineComponent_IsClosedLoop_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline"));

	USplineComponent_GetWorldTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtTime"));

	USplineComponent_GetWorldRotationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline"));

	USplineComponent_GetWorldRotationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtTime"));

	USplineComponent_GetWorldLocationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint"));

	USplineComponent_GetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline"));

	USplineComponent_GetWorldLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtTime"));

	USplineComponent_GetWorldDirectionAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline"));

	USplineComponent_GetWorldDirectionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtTime"));

	USplineComponent_GetUpVectorAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtSplinePoint"));

	USplineComponent_GetUpVectorAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline"));

	USplineComponent_GetUpVectorAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USplineComponent::GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtTime"));

	USplineComponent_GetTransformAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USplineComponent::GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtSplinePoint"));

	USplineComponent_GetTransformAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseScale                      (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline"));

	USplineComponent_GetTransformAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtTime"));

	USplineComponent_GetTangentAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtSplinePoint"));

	USplineComponent_GetTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline"));

	USplineComponent_GetTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplinePointType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESplinePointType> USplineComponent::GetSplinePointType(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplinePointType"));

	USplineComponent_GetSplinePointType_Params params;
	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetSplineLength"));

	USplineComponent_GetSplineLength_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtTime"));

	USplineComponent_GetScaleAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetScaleAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtSplinePoint"));

	USplineComponent_GetScaleAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline"));

	USplineComponent_GetScaleAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USplineComponent::GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtTime"));

	USplineComponent_GetRotationAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USplineComponent::GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtSplinePoint"));

	USplineComponent_GetRotationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline"));

	USplineComponent_GetRotationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtTime"));

	USplineComponent_GetRollAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtSplinePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtSplinePoint"));

	USplineComponent_GetRollAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline"));

	USplineComponent_GetRollAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtTime"));

	USplineComponent_GetRightVectorAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtSplinePoint"));

	USplineComponent_GetRightVectorAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline"));

	USplineComponent_GetRightVectorAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FQuat                          ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FQuat USplineComponent::GetQuaternionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtTime"));

	USplineComponent_GetQuaternionAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FQuat                          ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FQuat USplineComponent::GetQuaternionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtSplinePoint"));

	USplineComponent_GetQuaternionAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetQuaternionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FQuat                          ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FQuat USplineComponent::GetQuaternionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetQuaternionAtDistanceAlongSpline"));

	USplineComponent_GetQuaternionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetNumberOfSplinePoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USplineComponent::GetNumberOfSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetNumberOfSplinePoints"));

	USplineComponent_GetNumberOfSplinePoints_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtTime"));

	USplineComponent_GetLocationAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtSplinePoint"));

	USplineComponent_GetLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline"));

	USplineComponent_GetLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Tangent                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, FVector* Location, FVector* Tangent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint"));

	USplineComponent_GetLocationAndTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	if (Location != nullptr)
		*Location = params.Location;
	if (Tangent != nullptr)
		*Tangent = params.Tangent;
}


// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        LocalLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        LocalTangent                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, FVector* LocalLocation, FVector* LocalTangent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint"));

	USplineComponent_GetLocalLocationAndTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	if (LocalLocation != nullptr)
		*LocalLocation = params.LocalLocation;
	if (LocalTangent != nullptr)
		*LocalTangent = params.LocalTangent;
}


// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline"));

	USplineComponent_GetInputKeyAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint"));

	USplineComponent_GetDistanceAlongSplineAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtTime"));

	USplineComponent_GetDirectionAtTime_Params params;
	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtSplinePoint"));

	USplineComponent_GetDirectionAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline"));

	USplineComponent_GetDirectionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDefaultUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineComponent::GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.GetDefaultUpVector"));

	USplineComponent_GetDefaultUpVector_Params params;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineComponent.ClearSplinePoints
// (Final, Native, Public, BlueprintCallable)

void USplineComponent::ClearSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.ClearSplinePoints"));

	USplineComponent_ClearSplinePoints_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplineWorldPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineWorldPoint(const FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineWorldPoint"));

	USplineComponent_AddSplineWorldPoint_Params params;
	params.Position = Position;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplinePoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::AddSplinePoint(const FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplinePoint"));

	USplineComponent_AddSplinePoint_Params params;
	params.Position = Position;
	params.CoordinateSpace = CoordinateSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineComponent.AddSplineLocalPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineLocalPoint(const FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineComponent.AddSplineLocalPoint"));

	USplineComponent_AddSplineLocalPoint_Params params;
	params.Position = Position;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHalfHeight                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleSize"));

	UCapsuleComponent_SetCapsuleSize_Params params;
	params.InRadius = InRadius;
	params.InHalfHeight = InHalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleRadius"));

	UCapsuleComponent_SetCapsuleRadius_Params params;
	params.Radius = Radius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.SetCapsuleHalfHeight"));

	UCapsuleComponent_SetCapsuleHalfHeight_Params params;
	params.HalfHeight = HalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize"));

	UCapsuleComponent_GetUnscaledCapsuleSize_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius"));

	UCapsuleComponent_GetUnscaledCapsuleRadius_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight"));

	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetShapeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetShapeScale"));

	UCapsuleComponent_GetShapeScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleSize"));

	UCapsuleComponent_GetScaledCapsuleSize_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleRadius"));

	UCapsuleComponent_GetScaledCapsuleRadius_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight"));

	UCapsuleComponent_GetScaledCapsuleHalfHeight_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     NewInstanceTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMarkRenderStateDirty          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform"));

	UInstancedStaticMeshComponent_UpdateInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.NewInstanceTransform = NewInstanceTransform;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.SetCullDistances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            StartCullDistance              (Parm, ZeroConstructor, IsPlainOldData)
// int                            EndCullDistance                (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.SetCullDistances"));

	UInstancedStaticMeshComponent_SetCullDistances_Params params;
	params.StartCullDistance = StartCullDistance;
	params.EndCullDistance = EndCullDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.RemoveInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.RemoveInstance"));

	UInstancedStaticMeshComponent_RemoveInstance_Params params;
	params.InstanceIndex = InstanceIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     OutInstanceTransform           (Parm, OutParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, bool bWorldSpace, FTransform* OutInstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform"));

	UInstancedStaticMeshComponent_GetInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.bWorldSpace = bWorldSpace;

	UObject::ProcessEvent(fn, &params);

	if (OutInstanceTransform != nullptr)
		*OutInstanceTransform = params.OutInstanceTransform;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        Center                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSphereInWorldSpace            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(const FVector& Center, float Radius, bool bSphereInWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere"));

	UInstancedStaticMeshComponent_GetInstancesOverlappingSphere_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.bSphereInWorldSpace = bSphereInWorldSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::GetInstanceCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.GetInstanceCount"));

	UInstancedStaticMeshComponent_GetInstanceCount_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.EnableGPUVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::EnableGPUVisibility(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.EnableGPUVisibility"));

	UInstancedStaticMeshComponent_EnableGPUVisibility_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.ClearInstances
// (Native, Public, BlueprintCallable)

void UInstancedStaticMeshComponent::ClearInstances()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.ClearInstances"));

	UInstancedStaticMeshComponent_ClearInstances_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const FTransform& WorldTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace"));

	UInstancedStaticMeshComponent_AddInstanceWorldSpace_Params params;
	params.WorldTransform = WorldTransform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstances
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<FTransform>             InstanceTransforms             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UInstancedStaticMeshComponent::AddInstances(TArray<FTransform> InstanceTransforms)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstances"));

	UInstancedStaticMeshComponent_AddInstances_Params params;
	params.InstanceTransforms = InstanceTransforms;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedStaticMeshComponent.AddInstance
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     InstanceTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstance(const FTransform& InstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedStaticMeshComponent.AddInstance"));

	UInstancedStaticMeshComponent_AddInstance_Params params;
	params.InstanceTransform = InstanceTransform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    InstancesToRemove              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(TArray<int> InstancesToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances"));

	UHierarchicalInstancedStaticMeshComponent_RemoveInstances_Params params;
	params.InstancesToRemove = InstancesToRemove;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BlueprintAsyncActionBase.Activate
// (Native, Public, BlueprintCallable)

void UBlueprintAsyncActionBase::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BlueprintAsyncActionBase.Activate"));

	UBlueprintAsyncActionBase_Activate_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.Stop
// (Final, Native, Public, BlueprintCallable)

void AAmbientSound::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Stop"));

	AAmbientSound_Stop_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.Play"));

	AAmbientSound_Play_Params params;
	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeOut"));

	AAmbientSound_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.FadeIn"));

	AAmbientSound_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientSound.AdjustVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientSound.AdjustVolume"));

	AAmbientSound_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.ValidateVertexBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateVertexBuffer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateVertexBuffer"));

	AFFTWater_ValidateVertexBuffer_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.ValidateParticlesVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateParticlesVelocity()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateParticlesVelocity"));

	AFFTWater_ValidateParticlesVelocity_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.ValidateIndexBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::ValidateIndexBuffer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.ValidateIndexBuffer"));

	AFFTWater_ValidateIndexBuffer_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.SetWireframe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bWireframe                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetWireframe(bool bWireframe)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetWireframe"));

	AFFTWater_SetWireframe_Params params;
	params.bWireframe = bWireframe;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetWaterColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   WaterColour                    (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetWaterColour(const FLinearColor& WaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetWaterColour"));

	AFFTWater_SetWaterColour_Params params;
	params.WaterColour = WaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetSpecularBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpecularBrightness             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetSpecularBrightness(float SpecularBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetSpecularBrightness"));

	AFFTWater_SetSpecularBrightness_Params params;
	params.SpecularBrightness = SpecularBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetShallowWaterColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   ShallowWaterColour             (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetShallowWaterColour(const FLinearColor& ShallowWaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetShallowWaterColour"));

	AFFTWater_SetShallowWaterColour_Params params;
	params.ShallowWaterColour = ShallowWaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetReflectionBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReflectionBrightness           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetReflectionBrightness(float ReflectionBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetReflectionBrightness"));

	AFFTWater_SetReflectionBrightness_Params params;
	params.ReflectionBrightness = ReflectionBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetLightFunctionMaterial(UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetLightFunctionMaterial"));

	AFFTWater_SetLightFunctionMaterial_Params params;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFresnelPower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FresnelPower                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFresnelPower(float FresnelPower)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFresnelPower"));

	AFFTWater_SetFresnelPower_Params params;
	params.FresnelPower = FresnelPower;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamHighlightColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   FoamHighlightColour            (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamHighlightColour(const FLinearColor& FoamHighlightColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamHighlightColour"));

	AFFTWater_SetFoamHighlightColour_Params params;
	params.FoamHighlightColour = FoamHighlightColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   FoamColour                     (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamColour(const FLinearColor& FoamColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamColour"));

	AFFTWater_SetFoamColour_Params params;
	params.FoamColour = FoamColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetFoamBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FoamBrightness                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetFoamBrightness(float FoamBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetFoamBrightness"));

	AFFTWater_SetFoamBrightness_Params params;
	params.FoamBrightness = FoamBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetCausticsDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Depth                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetCausticsDepth(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetCausticsDepth"));

	AFFTWater_SetCausticsDepth_Params params;
	params.Depth = Depth;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetBackLitColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   BackLitColour                  (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetBackLitColour(const FLinearColor& BackLitColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetBackLitColour"));

	AFFTWater_SetBackLitColour_Params params;
	params.BackLitColour = BackLitColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.SetAmbientColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   AmbientColour                  (Parm, ZeroConstructor, IsPlainOldData)

void AFFTWater::SetAmbientColour(const FLinearColor& AmbientColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.SetAmbientColour"));

	AFFTWater_SetAmbientColour_Params params;
	params.AmbientColour = AmbientColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWater.HasLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AFFTWater::HasLightFunctionMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.HasLightFunctionMaterial"));

	AFFTWater_HasLightFunctionMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FFTWater.GetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UFFTWaterComponent*            ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UFFTWaterComponent* AFFTWater::GetComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWater.GetComponent"));

	AFFTWater_GetComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavModifierVolume.SetAreaClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        NewAreaClass                   (Parm, ZeroConstructor, IsPlainOldData)

void ANavModifierVolume::SetAreaClass(UClass* NewAreaClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavModifierVolume.SetAreaClass"));

	ANavModifierVolume_SetAreaClass_Params params;
	params.NewAreaClass = NewAreaClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PostProcessVolume.AddOrUpdateBlendable
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessVolume::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PostProcessVolume.AddOrUpdateBlendable"));

	APostProcessVolume_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraActor.GetAutoActivatePlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ACameraActor::GetAutoActivatePlayerIndex()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraActor.GetAutoActivatePlayerIndex"));

	ACameraActor_GetAutoActivatePlayerIndex_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraShake.ReceiveStopShake
// (Event, Public, BlueprintEvent)

void UCameraShake::ReceiveStopShake()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceiveStopShake"));

	UCameraShake_ReceiveStopShake_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraShake.ReceivePlayShake
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void UCameraShake::ReceivePlayShake(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceivePlayShake"));

	UCameraShake_ReceivePlayShake_Params params;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraShake.ReceiveIsFinished
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCameraShake::ReceiveIsFinished()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.ReceiveIsFinished"));

	UCameraShake_ReceiveIsFinished_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CameraShake.BlueprintUpdateCameraShake
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// FMinimalViewInfo               POV                            (ConstParm, Parm, OutParm, ReferenceParm)
// FMinimalViewInfo               ModifiedPOV                    (Parm, OutParm)

void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const FMinimalViewInfo& POV, FMinimalViewInfo* ModifiedPOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraShake.BlueprintUpdateCameraShake"));

	UCameraShake_BlueprintUpdateCameraShake_Params params;
	params.DeltaTime = DeltaTime;
	params.Alpha = Alpha;
	params.POV = POV;

	UObject::ProcessEvent(fn, &params);

	if (ModifiedPOV != nullptr)
		*ModifiedPOV = params.ModifiedPOV;
}


// Function Engine.PlayerCameraManager.StopCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// UCameraShake*                  ShakeInstance                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopCameraShake(UCameraShake* ShakeInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraShake"));

	APlayerCameraManager_StopCameraShake_Params params;
	params.ShakeInstance = ShakeInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopCameraFade
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::StopCameraFade()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraFade"));

	APlayerCameraManager_StopCameraFade_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopCameraAnimInst
// (Native, Public, BlueprintCallable)
// Parameters:
// UCameraAnimInst*               AnimInst                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopCameraAnimInst(UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopCameraAnimInst"));

	APlayerCameraManager_StopCameraAnimInst_Params params;
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllInstancesOfCameraShake(UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake"));

	APlayerCameraManager_StopAllInstancesOfCameraShake_Params params;
	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
// (Native, Public, BlueprintCallable)
// Parameters:
// UCameraAnim*                   Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllInstancesOfCameraAnim(UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim"));

	APlayerCameraManager_StopAllInstancesOfCameraAnim_Params params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllCameraShakes
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::StopAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraShakes"));

	APlayerCameraManager_StopAllCameraShakes_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StopAllCameraAnims
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StopAllCameraAnims"));

	APlayerCameraManager_StopAllCameraAnims_Params params;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.StartCameraFade
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          FromAlpha                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ToAlpha                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Color                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldFadeAudio               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHoldWhenFinished              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.StartCameraFade"));

	APlayerCameraManager_StartCameraFade_Params params;
	params.FromAlpha = FromAlpha;
	params.ToAlpha = ToAlpha;
	params.Duration = Duration;
	params.Color = Color;
	params.bShouldFadeAudio = bShouldFadeAudio;
	params.bHoldWhenFinished = bHoldWhenFinished;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.SetManualCameraFade
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          InFadeAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Color                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInFadeAudio                   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, const FLinearColor& Color, bool bInFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.SetManualCameraFade"));

	APlayerCameraManager_SetManualCameraFade_Params params;
	params.InFadeAmount = InFadeAmount;
	params.Color = Color;
	params.bInFadeAudio = bInFadeAudio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.RemoveCameraModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// UCameraModifier*               ModifierToRemove               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::RemoveCameraModifier(UCameraModifier* ModifierToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraModifier"));

	APlayerCameraManager_RemoveCameraModifier_Params params;
	params.ModifierToRemove = ModifierToRemove;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// AEmitterCameraLensEffectBase*  Emitter                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.RemoveCameraLensEffect"));

	APlayerCameraManager_RemoveCameraLensEffect_Params params;
	params.Emitter = Emitter;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.PlayCameraShake
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UClass*                        ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// UCameraShake*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UCameraShake* APlayerCameraManager::PlayCameraShake(UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PlayCameraShake"));

	APlayerCameraManager_PlayCameraShake_Params params;
	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.PlayCameraAnim
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UCameraAnim*                   Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// UCurveFloat*                   BlendInCurve                   (Parm, ZeroConstructor, IsPlainOldData)
// UCameraAnimInst*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const FRotator& UserPlaySpaceRot, UCurveFloat* BlendInCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.PlayCameraAnim"));

	APlayerCameraManager_PlayCameraAnim_Params params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;
	params.BlendInCurve = BlendInCurve;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.IsScreenFullyOccluded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::IsScreenFullyOccluded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.IsScreenFullyOccluded"));

	APlayerCameraManager_IsScreenFullyOccluded_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.IsFadeInProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::IsFadeInProgress()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.IsFadeInProgress"));

	APlayerCameraManager_IsFadeInProgress_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetOwningPlayerController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// APlayerController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerController* APlayerCameraManager::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetOwningPlayerController"));

	APlayerCameraManager_GetOwningPlayerController_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetFOVAngle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerCameraManager::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetFOVAngle"));

	APlayerCameraManager_GetFOVAngle_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator APlayerCameraManager::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraRotation"));

	APlayerCameraManager_GetCameraRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector APlayerCameraManager::GetCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.GetCameraLocation"));

	APlayerCameraManager_GetCameraLocation_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.FindCameraModifierByClass
// (Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData)
// UCameraModifier*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UCameraModifier* APlayerCameraManager::FindCameraModifierByClass(UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.FindCameraModifierByClass"));

	APlayerCameraManager_FindCameraModifierByClass_Params params;
	params.ModifierClass = ModifierClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.ClearCameraLensEffects
// (Native, Public, BlueprintCallable)

void APlayerCameraManager::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.ClearCameraLensEffects"));

	APlayerCameraManager_ClearCameraLensEffects_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
// (BlueprintCosmetic, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// AActor*                        CameraTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NewCameraLocation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewCameraRotation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NewCameraFOV                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::BlueprintUpdateCamera(AActor* CameraTarget, FVector* NewCameraLocation, FRotator* NewCameraRotation, float* NewCameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.BlueprintUpdateCamera"));

	APlayerCameraManager_BlueprintUpdateCamera_Params params;
	params.CameraTarget = CameraTarget;

	UObject::ProcessEvent(fn, &params);

	if (NewCameraLocation != nullptr)
		*NewCameraLocation = params.NewCameraLocation;
	if (NewCameraRotation != nullptr)
		*NewCameraRotation = params.NewCameraRotation;
	if (NewCameraFOV != nullptr)
		*NewCameraFOV = params.NewCameraFOV;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.BlendOutAllInstancesOfCameraShake
// (Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::BlendOutAllInstancesOfCameraShake(UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.BlendOutAllInstancesOfCameraShake"));

	APlayerCameraManager_BlendOutAllInstancesOfCameraShake_Params params;
	params.Shake = Shake;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerCameraManager.AddNewCameraModifier
// (Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        ModifierClass                  (Parm, ZeroConstructor, IsPlainOldData)
// UCameraModifier*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UCameraModifier* APlayerCameraManager::AddNewCameraModifier(UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddNewCameraModifier"));

	APlayerCameraManager_AddNewCameraModifier_Params params;
	params.ModifierClass = ModifierClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.AddCameraLensEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)
// AEmitterCameraLensEffectBase*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerCameraManager.AddCameraLensEffect"));

	APlayerCameraManager_AddCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CurveBase.GetValueRange
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetValueRange(float* MinValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetValueRange"));

	UCurveBase_GetValueRange_Params params;

	UObject::ProcessEvent(fn, &params);

	if (MinValue != nullptr)
		*MinValue = params.MinValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.CurveBase.GetTimeRange
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MinTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveBase.GetTimeRange"));

	UCurveBase_GetTimeRange_Params params;

	UObject::ProcessEvent(fn, &params);

	if (MinTime != nullptr)
		*MinTime = params.MinTime;
	if (MaxTime != nullptr)
		*MaxTime = params.MaxTime;
}


// Function Engine.CurveFloat.GetFloatValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCurveFloat::GetFloatValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveFloat.GetFloatValue"));

	UCurveFloat_GetFloatValue_Params params;
	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalActor.SetDecalMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void ADecalActor::SetDecalMaterial(UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.SetDecalMaterial"));

	ADecalActor_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalActor.GetDecalMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* ADecalActor::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.GetDecalMaterial"));

	ADecalActor_GetDecalMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalActor.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalActor.CreateDynamicMaterialInstance"));

	ADecalActor_CreateDynamicMaterialInstance_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.ToggleActive
// (Final, Native, Public, BlueprintCallable)

void AEmitter::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.ToggleActive"));

	AEmitter_ToggleActive_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetVectorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetVectorParameter(const FName& ParameterName, const FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetVectorParameter"));

	AEmitter_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetTemplate
// (Native, Public, BlueprintCallable)
// Parameters:
// UParticleSystem*               NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetTemplate(UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetTemplate"));

	AEmitter_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetMaterialParameter(const FName& ParameterName, UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetMaterialParameter"));

	AEmitter_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetFloatParameter(const FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetFloatParameter"));

	AEmitter_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetColorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetColorParameter(const FName& ParameterName, const FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetColorParameter"));

	AEmitter_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.SetActorParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetActorParameter(const FName& ParameterName, AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.SetActorParameter"));

	AEmitter_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.OnRep_bCurrentlyActive
// (Native, Public)

void AEmitter::OnRep_bCurrentlyActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnRep_bCurrentlyActive"));

	AEmitter_OnRep_bCurrentlyActive_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.OnParticleSystemFinished
// (Native, Public)
// Parameters:
// UParticleSystemComponent*      FinishedComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AEmitter::OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.OnParticleSystemFinished"));

	AEmitter_OnParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AEmitter::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.IsActive"));

	AEmitter_IsActive_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.GetEmitterName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName AEmitter::GetEmitterName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.GetEmitterName"));

	AEmitter_GetEmitterName_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Emitter.Deactivate
// (Final, Native, Public, BlueprintCallable)

void AEmitter::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Deactivate"));

	AEmitter_Deactivate_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Emitter.Activate
// (Final, Native, Public, BlueprintCallable)

void AEmitter::Activate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Emitter.Activate"));

	AEmitter_Activate_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFog.OnRep_bEnabled
// (Native, Public)

void AExponentialHeightFog::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFog.OnRep_bEnabled"));

	AExponentialHeightFog_OnRep_bEnabled_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLight.OnRep_bEnabled
// (Native, Public)

void ASkyLight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLight.OnRep_bEnabled"));

	ASkyLight_OnRep_bEnabled_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.WindDirectionalSource.GetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UWindDirectionalSourceComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UWindDirectionalSourceComponent* AWindDirectionalSource::GetComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.WindDirectionalSource.GetComponent"));

	AWindDirectionalSource_GetComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LightComponentBase.SetCastShadows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponentBase::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.SetCastShadows"));

	ULightComponentBase_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponentBase.GetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor ULightComponentBase::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponentBase.GetLightColor"));

	ULightComponentBase_GetLightColor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LightComponent.SetTemperature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewTemperature                 (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetTemperature(float NewTemperature)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetTemperature"));

	ULightComponent_SetTemperature_Params params;
	params.NewTemperature = NewTemperature;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionScale(const FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionScale"));

	ULightComponent_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionMaterial"));

	ULightComponent_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionFadeDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionFadeDistance"));

	ULightComponent_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightFunctionDisabledBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightFunctionDisabledBrightness"));

	ULightComponent_SetLightFunctionDisabledBrightness_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSRGB                          (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightColor(const FLinearColor& NewLightColor, bool bSRGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetLightColor"));

	ULightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;
	params.bSRGB = bSRGB;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIntensity"));

	ULightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIndirectLightingIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIndirectLightingIntensity"));

	ULightComponent_SetIndirectLightingIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetIESTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTextureLightProfile*          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIESTexture(UTextureLightProfile* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetIESTexture"));

	ULightComponent_SetIESTexture_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetEnableLightShaftBloom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetEnableLightShaftBloom(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetEnableLightShaftBloom"));

	ULightComponent_SetEnableLightShaftBloom_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomTint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FColor                         NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomTint(const FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomTint"));

	ULightComponent_SetBloomTint_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomThreshold(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomThreshold"));

	ULightComponent_SetBloomThreshold_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetBloomScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetBloomScale"));

	ULightComponent_SetBloomScale_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetAffectTranslucentLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectTranslucentLighting"));

	ULightComponent_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.SetAffectDynamicIndirectLighting"));

	ULightComponent_SetAffectDynamicIndirectLighting_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LightComponent.GetNumberOfShadowCastersInFirstCascade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ULightComponent::GetNumberOfShadowCastersInFirstCascade()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LightComponent.GetNumberOfShadowCastersInFirstCascade"));

	ULightComponent_GetNumberOfShadowCastersInFirstCascade_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.ToggleEnabled
// (Final, Native, Public, BlueprintCallable)

void ALight::ToggleEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.ToggleEnabled"));

	ALight_ToggleEnabled_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionScale(const FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionScale"));

	ALight_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionMaterial"));

	ALight_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightFunctionFadeDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightFunctionFadeDistance"));

	ALight_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightColor(const FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetLightColor"));

	ALight_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetEnabled                    (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetEnabled"));

	ALight_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetCastShadows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetCastShadows"));

	ALight_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetBrightness"));

	ALight_SetBrightness_Params params;
	params.NewBrightness = NewBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.SetAffectTranslucentLighting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.SetAffectTranslucentLighting"));

	ALight_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.OnRep_bEnabled
// (Native, Public)

void ALight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.OnRep_bEnabled"));

	ALight_OnRep_bEnabled_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Light.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALight::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.IsEnabled"));

	ALight_IsEnabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.GetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor ALight::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetLightColor"));

	ALight_GetLightColor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Light.GetBrightness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ALight::GetBrightness()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Light.GetBrightness"));

	ALight_GetBrightness_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PointLight.SetRadius
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetRadius"));

	APointLight_SetRadius_Params params;
	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLight.SetLightFalloffExponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLight.SetLightFalloffExponent"));

	APointLight_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLight.SetOuterConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetOuterConeAngle"));

	ASpotLight_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLight.SetInnerConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLight.SetInnerConeAngle"));

	ASpotLight_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Stop
// (Native, Public, BlueprintCallable)

void AMatineeActor::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Stop"));

	AMatineeActor_Stop_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.SetPosition
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bJump                          (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetPosition"));

	AMatineeActor_SetPosition_Params params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.SetLoopingState
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetLoopingState(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.SetLoopingState"));

	AMatineeActor_SetLoopingState_Params params;
	params.bNewLooping = bNewLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Reverse
// (Native, Public, BlueprintCallable)

void AMatineeActor::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Reverse"));

	AMatineeActor_Reverse_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.PlayInstantly
// (Final, Native, Public, BlueprintCallable)

void AMatineeActor::PlayInstantly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.PlayInstantly"));

	AMatineeActor_PlayInstantly_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void AMatineeActor::Play(UObject* WorldContextObject, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Play"));

	AMatineeActor_Play_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.Pause
// (Native, Public, BlueprintCallable)

void AMatineeActor::Pause()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.Pause"));

	AMatineeActor_Pause_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MatineeActor.ChangePlaybackDirection
// (Native, Public, BlueprintCallable)

void AMatineeActor::ChangePlaybackDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MatineeActor.ChangePlaybackDirection"));

	AMatineeActor_ChangePlaybackDirection_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.SetSmartLinkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::SetSmartLinkEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.SetSmartLinkEnabled"));

	ANavLinkProxy_SetSmartLinkEnabled_Params params;
	params.bEnabled = bEnabled;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.ResumePathFollowing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        Agent                          (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::ResumePathFollowing(AActor* Agent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.ResumePathFollowing"));

	ANavLinkProxy_ResumePathFollowing_Params params;
	params.Agent = Agent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.ReceiveSmartLinkReached
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// AActor*                        Agent                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Destination                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ANavLinkProxy::ReceiveSmartLinkReached(AActor* Agent, const FVector& Destination)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.ReceiveSmartLinkReached"));

	ANavLinkProxy_ReceiveSmartLinkReached_Params params;
	params.Agent = Agent;
	params.Destination = Destination;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavLinkProxy.IsSmartLinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::IsSmartLinkEnabled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.IsSmartLinkEnabled"));

	ANavLinkProxy_IsSmartLinkEnabled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavLinkProxy.HasMovingAgents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::HasMovingAgents()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavLinkProxy.HasMovingAgents"));

	ANavLinkProxy_HasMovingAgents_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetNumLODs
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UParticleSystem::GetNumLODs()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystem.GetNumLODs"));

	UParticleSystem_GetNumLODs_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.ContainsEmitterType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        TypeData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystem::ContainsEmitterType(UClass* TypeData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleSystem.ContainsEmitterType"));

	UParticleSystem_ContainsEmitterType_Params params;
	params.TypeData = TypeData;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.IsSectionUsingCloth
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InSectionIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckCorrespondingSections    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMesh::IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.IsSectionUsingCloth"));

	USkeletalMesh_IsSectionUsingCloth_Params params;
	params.InSectionIndex = InSectionIndex;
	params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.GetNumLODsBP
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkeletalMesh::GetNumLODsBP()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.GetNumLODsBP"));

	USkeletalMesh_GetNumLODsBP_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMesh.FindSocket
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// USkeletalMeshSocket*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USkeletalMeshSocket* USkeletalMesh::FindSocket(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMesh.FindSocket"));

	USkeletalMesh_FindSocket_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DefaultPawn.TurnAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::TurnAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.TurnAtRate"));

	ADefaultPawn_TurnAtRate_Params params;
	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.Turn
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::Turn(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.Turn"));

	ADefaultPawn_Turn_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveUp_World
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveUp_World(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveUp_World"));

	ADefaultPawn_MoveUp_World_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveRight
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveRight(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveRight"));

	ADefaultPawn_MoveRight_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.MoveForward
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveForward(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.MoveForward"));

	ADefaultPawn_MoveForward_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.LookUpAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUpAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.LookUpAtRate"));

	ADefaultPawn_LookUpAtRate_Params params;
	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DefaultPawn.LookUp
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUp(float Val)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DefaultPawn.LookUp"));

	ADefaultPawn_LookUp_Params params;
	params.Val = Val;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.ToggleForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::ToggleForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.ToggleForce"));

	ARadialForceActor_ToggleForce_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.FireImpulse
// (Native, Public, BlueprintCallable)

void ARadialForceActor::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.FireImpulse"));

	ARadialForceActor_FireImpulse_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.EnableForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::EnableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.EnableForce"));

	ARadialForceActor_EnableForce_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceActor.DisableForce
// (Native, Public, BlueprintCallable)

void ARadialForceActor::DisableForce()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceActor.DisableForce"));

	ARadialForceActor_DisableForce_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCapture2D.OnInterpToggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCapture2D::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCapture2D.OnInterpToggle"));

	ASceneCapture2D_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureCube.OnInterpToggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCaptureCube::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureCube.OnInterpToggle"));

	ASceneCaptureCube_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.UnHideBoneByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::UnHideBoneByName(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.UnHideBoneByName"));

	USkinnedMeshComponent_UnHideBoneByName_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformToBoneSpace(const FName& BoneName, const FVector& InPosition, const FRotator& InRotation, FVector* OutPosition, FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformToBoneSpace"));

	USkinnedMeshComponent_TransformToBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	UObject::ProcessEvent(fn, &params);

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformFromBoneSpace(const FName& BoneName, const FVector& InPosition, const FRotator& InRotation, FVector* OutPosition, FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace"));

	USkinnedMeshComponent_TransformFromBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	UObject::ProcessEvent(fn, &params);

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// USkeletalMesh*                 NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetSkeletalMesh(USkeletalMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetSkeletalMesh"));

	USkinnedMeshComponent_SetSkeletalMesh_Params params;
	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// UPhysicsAsset*                 NewPhysicsAsset                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceReInit                   (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetPhysicsAsset"));

	USkinnedMeshComponent_SetPhysicsAsset_Params params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USkinnedMeshComponent*         NewMasterBoneComponent         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USkinnedMeshComponent::SetMasterPoseComponent(USkinnedMeshComponent* NewMasterBoneComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent"));

	USkinnedMeshComponent_SetMasterPoseComponent_Params params;
	params.NewMasterBoneComponent = NewMasterBoneComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.SetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetCustomDepthMaterial(UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.SetCustomDepthMaterial"));

	USkinnedMeshComponent_SetCustomDepthMaterial_Params params;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.OnRep_SkeletalMesh
// (Final, Native, Public)
// Parameters:
// USkeletalMesh*                 OldMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::OnRep_SkeletalMesh(USkeletalMesh* OldMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.OnRep_SkeletalMesh"));

	USkinnedMeshComponent_OnRep_SkeletalMesh_Params params;
	params.OldMesh = OldMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkinnedMeshComponent::IsBoneHiddenByName(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName"));

	USkinnedMeshComponent_IsBoneHiddenByName_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.HideBoneByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::HideBoneByName(const FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.HideBoneByName"));

	USkinnedMeshComponent_HideBoneByName_Params params;
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkinnedMeshComponent.GetSocketBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName USkinnedMeshComponent::GetSocketBoneName(const FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetSocketBoneName"));

	USkinnedMeshComponent_GetSocketBoneName_Params params;
	params.InSocketName = InSocketName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetParentBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName USkinnedMeshComponent::GetParentBone(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetParentBone"));

	USkinnedMeshComponent_GetParentBone_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetCustomDepthMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* USkinnedMeshComponent::GetCustomDepthMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetCustomDepthMaterial"));

	USkinnedMeshComponent_GetCustomDepthMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName USkinnedMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneName"));

	USkinnedMeshComponent_GetBoneName_Params params;
	params.BoneIndex = BoneIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkinnedMeshComponent::GetBoneIndex(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.GetBoneIndex"));

	USkinnedMeshComponent_GetBoneIndex_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.BoneIsChildOf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ParentBoneName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkinnedMeshComponent::BoneIsChildOf(const FName& BoneName, const FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkinnedMeshComponent.BoneIsChildOf"));

	USkinnedMeshComponent_BoneIsChildOf_Params params;
	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearZLimit"));

	UPhysicsConstraintComponent_SetLinearZLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearYLimit"));

	UPhysicsConstraintComponent_SetLinearYLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearXLimit"));

	UPhysicsConstraintComponent_SetLinearXLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityTarget(const FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget"));

	UPhysicsConstraintComponent_SetLinearVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive"));

	UPhysicsConstraintComponent_SetLinearVelocityDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionTarget(const FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget"));

	UPhysicsConstraintComponent_SetLinearPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive"));

	UPhysicsConstraintComponent_SetLinearPositionDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams"));

	UPhysicsConstraintComponent_SetLinearDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetDisableCollision
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisableCollision              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetDisableCollision"));

	UPhysicsConstraintComponent_SetDisableCollision_Params params;
	params.bDisableCollision = bDisableCollision;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        RefPosition                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const FVector& RefPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition"));

	UPhysicsConstraintComponent_SetConstraintReferencePosition_Params params;
	params.Frame = Frame;
	params.RefPosition = RefPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PriAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        SecAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const FVector& PriAxis, const FVector& SecAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation"));

	UPhysicsConstraintComponent_SetConstraintReferenceOrientation_Params params;
	params.Frame = Frame;
	params.PriAxis = PriAxis;
	params.SecAxis = SecAxis;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     RefFrame                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const FTransform& RefFrame)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame"));

	UPhysicsConstraintComponent_SetConstraintReferenceFrame_Params params;
	params.Frame = Frame;
	params.RefFrame = RefFrame;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component1                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          BoneName1                      (Parm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           Component2                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          BoneName2                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstrainedComponents(UPrimitiveComponent* Component1, const FName& BoneName1, UPrimitiveComponent* Component2, const FName& BoneName2)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents"));

	UPhysicsConstraintComponent_SetConstrainedComponents_Params params;
	params.Component1 = Component1;
	params.BoneName1 = BoneName1;
	params.Component2 = Component2;
	params.BoneName2 = BoneName2;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityTarget(const FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget"));

	UPhysicsConstraintComponent_SetAngularVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive"));

	UPhysicsConstraintComponent_SetAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          TwistLimitAngle                (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit"));

	UPhysicsConstraintComponent_SetAngularTwistLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.TwistLimitAngle = TwistLimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing2LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit"));

	UPhysicsConstraintComponent_SetAngularSwing2Limit_Params params;
	params.MotionType = MotionType;
	params.Swing2LimitAngle = Swing2LimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing1LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit"));

	UPhysicsConstraintComponent_SetAngularSwing1Limit_Params params;
	params.MotionType = MotionType;
	params.Swing1LimitAngle = Swing1LimitAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationTarget(const FRotator& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget"));

	UPhysicsConstraintComponent_SetAngularOrientationTarget_Params params;
	params.InPosTarget = InPosTarget;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive"));

	UPhysicsConstraintComponent_SetAngularOrientationDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams"));

	UPhysicsConstraintComponent_SetAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsConstraintComponent.GetCurrentTwist
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentTwist()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentTwist"));

	UPhysicsConstraintComponent_GetCurrentTwist_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentSwing2()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2"));

	UPhysicsConstraintComponent_GetCurrentSwing2_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsConstraintComponent::GetCurrentSwing1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1"));

	UPhysicsConstraintComponent_GetCurrentSwing1_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.GetConstraintForce
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        OutLinearForce                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        OutAngularForce                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::GetConstraintForce(FVector* OutLinearForce, FVector* OutAngularForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.GetConstraintForce"));

	UPhysicsConstraintComponent_GetConstraintForce_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OutLinearForce != nullptr)
		*OutLinearForce = params.OutLinearForce;
	if (OutAngularForce != nullptr)
		*OutAngularForce = params.OutAngularForce;
}


// Function Engine.PhysicsConstraintComponent.BreakConstraint
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UPhysicsConstraintComponent::BreakConstraint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsConstraintComponent.BreakConstraint"));

	UPhysicsConstraintComponent_BreakConstraint_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Interface_Animatable.GetAnimInstance
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UAnimInstance*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UAnimInstance* UInterface_Animatable::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Interface_Animatable.GetAnimInstance"));

	UInterface_Animatable_GetAnimInstance_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRestoreSimulationSpace        (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent"));

	USkeletalMeshComponent_UnbindClothFromMasterPoseComponent_Params params;
	params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Stop"));

	USkeletalMeshComponent_Stop_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPos                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPosition"));

	USkeletalMeshComponent_SetPosition_Params params;
	params.InPos = InPos;
	params.bFireNotifies = bFireNotifies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPlayRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPlayRate"));

	USkeletalMeshComponent_SetPlayRate_Params params;
	params.Rate = Rate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight"));

	USkeletalMeshComponent_SetPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetMorphTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemoveZeroWeight              (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetMorphTarget(const FName& MorphTargetName, float Value, bool bRemoveZeroWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetMorphTarget"));

	USkeletalMeshComponent_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;
	params.bRemoveZeroWeight = bRemoveZeroWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewBlendPhysics               (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending"));

	USkeletalMeshComponent_SetEnablePhysicsBlending_Params params;
	params.bNewBlendPhysics = bNewBlendPhysics;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale"));

	USkeletalMeshComponent_SetClothMaxDistanceScale_Params params;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimInstanceClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        NewClass                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimInstanceClass(UClass* NewClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimInstanceClass"));

	USkeletalMeshComponent_SetAnimInstanceClass_Params params;
	params.NewClass = NewClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAnimationMode>    InAnimationMode                (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimationMode"));

	USkeletalMeshComponent_SetAnimationMode_Params params;
	params.InAnimationMode = InAnimationMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimationAsset*               NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimation(UAnimationAsset* NewAnimToPlay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAnimation"));

	USkeletalMeshComponent_SetAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive"));

	USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive"));

	USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams"));

	USkeletalMeshComponent_SetAllMotorsAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics"));

	USkeletalMeshComponent_SetAllBodiesSimulatePhysics_Params params;
	params.bNewSimulate = bNewSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight"));

	USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FName                          InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const FName& InBoneName, bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics"));

	USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics_Params params;
	params.InBoneName = InBoneName;
	params.bNewSimulate = bNewSimulate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FName                          InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight"));

	USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ResetClothTeleportMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode"));

	USkeletalMeshComponent_ResetClothTeleportMode_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics"));

	USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.PlayAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UAnimationAsset*               NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.PlayAnimation"));

	USkeletalMeshComponent_PlayAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::Play(bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.Play"));

	USkeletalMeshComponent_Play_Params params;
	params.bLooping = bLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.IsPlaying"));

	USkeletalMeshComponent_IsPlaying_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPosition"));

	USkeletalMeshComponent_GetPosition_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPlayRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetPlayRate"));

	USkeletalMeshComponent_GetPlayRate_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetMorphTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FName                          MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetMorphTarget(const FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetMorphTarget"));

	USkeletalMeshComponent_GetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetClothMaxDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale"));

	USkeletalMeshComponent_GetClothMaxDistanceScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimInstance
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UAnimInstance*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UAnimInstance* USkeletalMeshComponent::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimInstance"));

	USkeletalMeshComponent_GetAnimInstance_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EAnimationMode>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EAnimationMode> USkeletalMeshComponent::GetAnimationMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.GetAnimationMode"));

	USkeletalMeshComponent_GetAnimationMode_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset"));

	USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ForceClothNextUpdateTeleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport"));

	USkeletalMeshComponent_ForceClothNextUpdateTeleport_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.ClearMorphTargets
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.ClearMorphTargets"));

	USkeletalMeshComponent_ClearMorphTargets_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
// (Final, Native, Public, BlueprintCallable)

void USkeletalMeshComponent::BindClothToMasterPoseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent"));

	USkeletalMeshComponent_BindClothToMasterPoseComponent_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FName                          InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AddPhysicsBlendWeight          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight"));

	USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset"));

	ASkeletalMeshActor_OnRep_ReplicatedPhysAsset_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh"));

	ASkeletalMeshActor_OnRep_ReplicatedMesh_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMaterial1()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1"));

	ASkeletalMeshActor_OnRep_ReplicatedMaterial1_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
// (Native, Public)

void ASkeletalMeshActor::OnRep_ReplicatedMaterial0()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0"));

	ASkeletalMeshActor_OnRep_ReplicatedMaterial0_Params params;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UApplicationLifecycleComponent::ApplicationLifetimeDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature"));

	UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AggregatorInterface.UnregisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UAggregatorInterface::UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AggregatorInterface.UnregisterAggregatable"));

	UAggregatorInterface_UnregisterAggregatable_Params params;
	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AggregatorInterface.RegisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UAggregatorInterface::RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AggregatorInterface.RegisterAggregatable"));

	UAggregatorInterface_RegisterAggregatable_Params params;
	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ComponentAggregatorComponent.UnregisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UComponentAggregatorComponent::UnregisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ComponentAggregatorComponent.UnregisterAggregatable"));

	UComponentAggregatorComponent_UnregisterAggregatable_Params params;
	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ComponentAggregatorComponent.RegisterAggregatable
// (Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UAggregatableInterface> InAggregatable                 (Parm, ZeroConstructor, IsPlainOldData)

void UComponentAggregatorComponent::RegisterAggregatable(const TScriptInterface<class UAggregatableInterface>& InAggregatable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ComponentAggregatorComponent.RegisterAggregatable"));

	UComponentAggregatorComponent_RegisterAggregatable_Params params;
	params.InAggregatable = InAggregatable;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InterpToMovementComponent.StopSimulating
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FHitResult                     HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UInterpToMovementComponent::StopSimulating(const FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InterpToMovementComponent.StopSimulating"));

	UInterpToMovementComponent_StopSimulating_Params params;
	params.HitResult = HitResult;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(const FHitResult& ImpactResult, float Time)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature"));

	UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.Time = Time;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.UnregisterNavigationInvoker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        Invoker                        (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::UnregisterNavigationInvoker(AActor* Invoker)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.UnregisterNavigationInvoker"));

	UNavigationSystem_UnregisterNavigationInvoker_Params params;
	params.Invoker = Invoker;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SimpleMoveToLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// AController*                   Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Goal                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UNavigationSystem::SimpleMoveToLocation(AController* Controller, const FVector& Goal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SimpleMoveToLocation"));

	UNavigationSystem_SimpleMoveToLocation_Params params;
	params.Controller = Controller;
	params.Goal = Goal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SimpleMoveToActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// AController*                   Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        Goal                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SimpleMoveToActor(AController* Controller, AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SimpleMoveToActor"));

	UNavigationSystem_SimpleMoveToActor_Params params;
	params.Controller = Controller;
	params.Goal = Goal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaxNumberOfJobs                (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount"));

	UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount_Params params;
	params.MaxNumberOfJobs = MaxNumberOfJobs;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.SetGeometryGatheringMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ENavDataGatheringModeConfig> NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SetGeometryGatheringMode(TEnumAsByte<ENavDataGatheringModeConfig> NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.SetGeometryGatheringMode"));

	UNavigationSystem_SetGeometryGatheringMode_Params params;
	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount
// (Final, Native, Public, BlueprintCallable)

void UNavigationSystem::ResetMaxSimultaneousTileGenerationJobsCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount"));

	UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.RegisterNavigationInvoker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        Invoker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TileGenerationRadius           (Parm, ZeroConstructor, IsPlainOldData)
// float                          TileRemovalRadius              (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::RegisterNavigationInvoker(AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.RegisterNavigationInvoker"));

	UNavigationSystem_RegisterNavigationInvoker_Params params;
	params.Invoker = Invoker;
	params.TileGenerationRadius = TileGenerationRadius;
	params.TileRemovalRadius = TileRemovalRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.ProjectPointToNavigation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        QueryExtent                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavigationSystem::ProjectPointToNavigation(UObject* WorldContext, const FVector& Point, ANavigationData* NavData, UClass* FilterClass, const FVector& QueryExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.ProjectPointToNavigation"));

	UNavigationSystem_ProjectPointToNavigation_Params params;
	params.WorldContext = WorldContext;
	params.Point = Point;
	params.NavData = NavData;
	params.FilterClass = FilterClass;
	params.QueryExtent = QueryExtent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.OnNavigationBoundsUpdated
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ANavMeshBoundsVolume*          NavVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::OnNavigationBoundsUpdated(ANavMeshBoundsVolume* NavVolume)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.OnNavigationBoundsUpdated"));

	UNavigationSystem_OnNavigationBoundsUpdated_Params params;
	params.NavVolume = NavVolume;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationSystem.NavigationRaycast
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        RayStart                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        RayEnd                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   Querier                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::NavigationRaycast(UObject* WorldContext, const FVector& RayStart, const FVector& RayEnd, UClass* FilterClass, AController* Querier, FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.NavigationRaycast"));

	UNavigationSystem_NavigationRaycast_Params params;
	params.WorldContext = WorldContext;
	params.RayStart = RayStart;
	params.RayEnd = RayEnd;
	params.FilterClass = FilterClass;
	params.Querier = Querier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.IsNavigationBeingBuilt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::IsNavigationBeingBuilt(UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.IsNavigationBeingBuilt"));

	UNavigationSystem_IsNavigationBeingBuilt_Params params;
	params.WorldContext = WorldContext;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomReachablePointInRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavigationSystem::GetRandomReachablePointInRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomReachablePointInRadius"));

	UNavigationSystem_GetRandomReachablePointInRadius_Params params;
	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPointInRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavigationSystem::GetRandomPointInRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPointInRadius"));

	UNavigationSystem_GetRandomPointInRadius_Params params;
	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPointInNavigableRadius
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavigationSystem::GetRandomPointInNavigableRadius(UObject* WorldContext, const FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPointInNavigableRadius"));

	UNavigationSystem_GetRandomPointInNavigableRadius_Params params;
	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UNavigationSystem::GetRandomPoint(UObject* WorldContext, ANavigationData* NavData, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetRandomPoint"));

	UNavigationSystem_GetRandomPoint_Params params;
	params.WorldContext = WorldContext;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathLength
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathLength                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathLength(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, ANavigationData* NavData, UClass* FilterClass, float* PathLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetPathLength"));

	UNavigationSystem_GetPathLength_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (PathLength != nullptr)
		*PathLength = params.PathLength;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathCost
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathCost                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// ANavigationData*               NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathCost(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, ANavigationData* NavData, UClass* FilterClass, float* PathCost)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetPathCost"));

	UNavigationSystem_GetPathCost_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (PathCost != nullptr)
		*PathCost = params.PathCost;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetNavigationSystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// UNavigationSystem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UNavigationSystem* UNavigationSystem::GetNavigationSystem(UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetNavigationSystem"));

	UNavigationSystem_GetNavigationSystem_Params params;
	params.WorldContext = WorldContext;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetMainNavData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ANavigationData*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ANavigationData* UNavigationSystem::GetMainNavData()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.GetMainNavData"));

	UNavigationSystem_GetMainNavData_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToLocationSynchronously
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// AActor*                        PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// UNavigationPath*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UNavigationPath* UNavigationSystem::FindPathToLocationSynchronously(UObject* WorldContext, const FVector& PathStart, const FVector& PathEnd, AActor* PathfindingContext, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.FindPathToLocationSynchronously"));

	UNavigationSystem_FindPathToLocationSynchronously_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToActorSynchronously
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// AActor*                        GoalActor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TetherDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// UNavigationPath*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UNavigationPath* UNavigationSystem::FindPathToActorSynchronously(UObject* WorldContext, const FVector& PathStart, AActor* GoalActor, float TetherDistance, AActor* PathfindingContext, UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.FindPathToActorSynchronously"));

	UNavigationSystem_FindPathToActorSynchronously_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.GoalActor = GoalActor;
	params.TetherDistance = TetherDistance;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.DoesMainNavDataHaveValidNavMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::DoesMainNavDataHaveValidNavMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationSystem.DoesMainNavDataHaveValidNavMesh"));

	UNavigationSystem_DoesMainNavDataHaveValidNavMesh_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimSequenceBase.GetPlayLength
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimSequenceBase::GetPlayLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSequenceBase.GetPlayLength"));

	UAnimSequenceBase_GetPlayLength_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ProjectileMovementComponent.StopSimulating
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FHitResult                     HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::StopSimulating(const FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.StopSimulating"));

	UProjectileMovementComponent_StopSimulating_Params params;
	params.HitResult = HitResult;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)

void UProjectileMovementComponent::SetVelocityInLocalSpace(const FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace"));

	UProjectileMovementComponent_SetVelocityInLocalSpace_Params params;
	params.NewVelocity = NewVelocity;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const FHitResult& ImpactResult)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature"));

	UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms, HasDefaults)
// Parameters:
// FHitResult                     ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// FVector                        ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const FHitResult& ImpactResult, const FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature"));

	UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ProjectileMovementComponent.LimitVelocity
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UProjectileMovementComponent::LimitVelocity(const FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ProjectileMovementComponent.LimitVelocity"));

	UProjectileMovementComponent_LimitVelocity_Params params;
	params.NewVelocity = NewVelocity;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavRelevantComponent.SetNavigationRelevancy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRelevant                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavRelevantComponent::SetNavigationRelevancy(bool bRelevant)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavRelevantComponent.SetNavigationRelevancy"));

	UNavRelevantComponent_SetNavigationRelevancy_Params params;
	params.bRelevant = bRelevant;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PawnNoiseEmitterComponent.MakeNoise
// (BlueprintAuthorityOnly, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// AActor*                        NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        NoiseLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPawnNoiseEmitterComponent::MakeNoise(AActor* NoiseMaker, float Loudness, const FVector& NoiseLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PawnNoiseEmitterComponent.MakeNoise"));

	UPawnNoiseEmitterComponent_MakeNoise_Params params;
	params.NoiseMaker = NoiseMaker;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetRotation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetRotation(const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetRotation"));

	UPhysicsHandleComponent_SetTargetRotation_Params params;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation"));

	UPhysicsHandleComponent_SetTargetLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetTargetLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocation(const FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetTargetLocation"));

	UPhysicsHandleComponent_SetTargetLocation_Params params;
	params.NewLocation = NewLocation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetLinearStiffness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLinearStiffness             (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearStiffness"));

	UPhysicsHandleComponent_SetLinearStiffness_Params params;
	params.NewLinearStiffness = NewLinearStiffness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetLinearDamping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLinearDamping               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetLinearDamping"));

	UPhysicsHandleComponent_SetLinearDamping_Params params;
	params.NewLinearDamping = NewLinearDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInterpolationSpeed          (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed"));

	UPhysicsHandleComponent_SetInterpolationSpeed_Params params;
	params.NewInterpolationSpeed = NewInterpolationSpeed;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetAngularStiffness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAngularStiffness            (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularStiffness"));

	UPhysicsHandleComponent_SetAngularStiffness_Params params;
	params.NewAngularStiffness = NewAngularStiffness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.SetAngularDamping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAngularDamping              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.SetAngularDamping"));

	UPhysicsHandleComponent_SetAngularDamping_Params params;
	params.NewAngularDamping = NewAngularDamping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.ReleaseComponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UPhysicsHandleComponent::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.ReleaseComponent"));

	UPhysicsHandleComponent_ReleaseComponent_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.GrabComponent
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          InBoneName                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        GrabLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConstrainRotation             (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GrabComponent(UPrimitiveComponent* Component, const FName& InBoneName, const FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GrabComponent"));

	UPhysicsHandleComponent_GrabComponent_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
// (Final, RequiredAPI, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        TargetLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       TargetRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GetTargetLocationAndRotation(FVector* TargetLocation, FRotator* TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation"));

	UPhysicsHandleComponent_GetTargetLocationAndRotation_Params params;

	UObject::ProcessEvent(fn, &params);

	if (TargetLocation != nullptr)
		*TargetLocation = params.TargetLocation;
	if (TargetRotation != nullptr)
		*TargetRotation = params.TargetRotation;
}


// Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::SupportsConvertibleLaptops()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops"));

	UPlatformEventsComponent_SupportsConvertibleLaptops_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature"));

	UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlatformEventsComponent.IsInTabletMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::IsInTabletMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInTabletMode"));

	UPlatformEventsComponent_IsInTabletMode_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformEventsComponent.IsInLaptopMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlatformEventsComponent::IsInLaptopMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformEventsComponent.IsInLaptopMode"));

	UPlatformEventsComponent_IsInLaptopMode_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AtmosphericFogComponent.StartPrecompute
// (Final, Native, Public, BlueprintCallable)

void UAtmosphericFogComponent::StartPrecompute()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.StartPrecompute"));

	UAtmosphericFogComponent_StartPrecompute_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetSunMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewSunMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetSunMultiplier"));

	UAtmosphericFogComponent_SetSunMultiplier_Params params;
	params.NewSunMultiplier = NewSunMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetStartDistance
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewStartDistance               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetStartDistance"));

	UAtmosphericFogComponent_SetStartDistance_Params params;
	params.NewStartDistance = NewStartDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          DensityHeight                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxScatteringOrder             (Parm, ZeroConstructor, IsPlainOldData)
// int                            InscatterAltitudeSampleNum     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetPrecomputeParams"));

	UAtmosphericFogComponent_SetPrecomputeParams_Params params;
	params.DensityHeight = DensityHeight;
	params.MaxScatteringOrder = MaxScatteringOrder;
	params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetFogMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewFogMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetFogMultiplier"));

	UAtmosphericFogComponent_SetFogMultiplier_Params params;
	params.NewFogMultiplier = NewFogMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDistanceScale
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDistanceScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceScale"));

	UAtmosphericFogComponent_SetDistanceScale_Params params;
	params.NewDistanceScale = NewDistanceScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDistanceOffset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDistanceOffset              (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDistanceOffset"));

	UAtmosphericFogComponent_SetDistanceOffset_Params params;
	params.NewDistanceOffset = NewDistanceOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDensityOffset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDensityOffset               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityOffset"));

	UAtmosphericFogComponent_SetDensityOffset_Params params;
	params.NewDensityOffset = NewDensityOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDensityMultiplier           (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDensityMultiplier"));

	UAtmosphericFogComponent_SetDensityMultiplier_Params params;
	params.NewDensityMultiplier = NewDensityMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultLightColor(const FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultLightColor"));

	UAtmosphericFogComponent_SetDefaultLightColor_Params params;
	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetDefaultBrightness"));

	UAtmosphericFogComponent_SetDefaultBrightness_Params params;
	params.NewBrightness = NewBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.SetAltitudeScale
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAltitudeScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.SetAltitudeScale"));

	UAtmosphericFogComponent_SetAltitudeScale_Params params;
	params.NewAltitudeScale = NewAltitudeScale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.DisableSunDisk
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewSunDisk                     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableSunDisk"));

	UAtmosphericFogComponent_DisableSunDisk_Params params;
	params.NewSunDisk = NewSunDisk;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AtmosphericFogComponent.DisableGroundScattering
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewGroundScattering            (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AtmosphericFogComponent.DisableGroundScattering"));

	UAtmosphericFogComponent_DisableGroundScattering_Params params;
	params.NewGroundScattering = NewGroundScattering;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Stop"));

	UAudioComponent_Stop_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetWaveParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// USoundWave*                    InWave                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetWaveParameter(const FName& InName, USoundWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetWaveParameter"));

	UAudioComponent_SetWaveParameter_Params params;
	params.InName = InName;
	params.InWave = InWave;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetVolumeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewVolumeMultiplier            (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetVolumeMultiplier"));

	UAudioComponent_SetVolumeMultiplier_Params params;
	params.NewVolumeMultiplier = NewVolumeMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetUISound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInUISound                     (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetUISound(bool bInUISound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetUISound"));

	UAudioComponent_SetUISound_Params params;
	params.bInUISound = bInUISound;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// USoundBase*                    NewSound                       (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetSound(USoundBase* NewSound)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetSound"));

	UAudioComponent_SetSound_Params params;
	params.NewSound = NewSound;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetPitchMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPitchMultiplier             (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetPitchMultiplier"));

	UAudioComponent_SetPitchMultiplier_Params params;
	params.NewPitchMultiplier = NewPitchMultiplier;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetIntParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetIntParameter(const FName& InName, int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetIntParameter"));

	UAudioComponent_SetIntParameter_Params params;
	params.InName = InName;
	params.InInt = InInt;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetFloatParameter(const FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetFloatParameter"));

	UAudioComponent_SetFloatParameter_Params params;
	params.InName = InName;
	params.InFloat = InFloat;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.SetBoolParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetBoolParameter(const FName& InName, bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.SetBoolParameter"));

	UAudioComponent_SetBoolParameter_Params params;
	params.InName = InName;
	params.InBool = InBool;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.Play"));

	UAudioComponent_Play_Params params;
	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.IsPlaying"));

	UAudioComponent_IsPlaying_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AudioComponent.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeOut"));

	UAudioComponent_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.FadeIn"));

	UAudioComponent_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.StartTime = StartTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FAttenuationSettings           OutAttenuationSettings         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAudioComponent::BP_GetAttenuationSettingsToApply(FAttenuationSettings* OutAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply"));

	UAudioComponent_BP_GetAttenuationSettingsToApply_Params params;

	UObject::ProcessEvent(fn, &params);

	if (OutAttenuationSettings != nullptr)
		*OutAttenuationSettings = params.OutAttenuationSettings;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.AdjustVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustVolume"));

	UAudioComponent_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AudioComponent.AdjustAttenuation
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FAttenuationSettings           InAttenuationSettings          (ConstParm, Parm, OutParm, ReferenceParm)

void UAudioComponent::AdjustAttenuation(const FAttenuationSettings& InAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AudioComponent.AdjustAttenuation"));

	UAudioComponent_AdjustAttenuation_Params params;
	params.InAttenuationSettings = InAttenuationSettings;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ChildActorComponent.SetChildActorClass
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UClass*                        InClass                        (Parm, ZeroConstructor, IsPlainOldData)

void UChildActorComponent::SetChildActorClass(UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ChildActorComponent.SetChildActorClass"));

	UChildActorComponent_SetChildActorClass_Params params;
	params.InClass = InClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetSortOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetSortOrder(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetSortOrder"));

	UDecalComponent_SetSortOrder_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetLifeSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          LifeSpan                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetLifeSpan(float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetLifeSpan"));

	UDecalComponent_SetLifeSpan_Params params;
	params.LifeSpan = LifeSpan;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.SetDecalMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetDecalMaterial(UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.SetDecalMaterial"));

	UDecalComponent_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DecalComponent.GetDecalMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UMaterialInterface*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetDecalMaterial"));

	UDecalComponent_GetDecalMaterial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetDecalDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UDecalComponent::GetDecalDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.GetDecalDynamicMaterialInstance"));

	UDecalComponent_GetDecalDynamicMaterialInstance_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DecalComponent.CreateDynamicMaterialInstance
// (Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UDecalComponent::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DecalComponent.CreateDynamicMaterialInstance"));

	UDecalComponent_CreateDynamicMaterialInstance_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ExponentialHeightFogComponent.SetStartDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetStartDistance"));

	UExponentialHeightFogComponent_SetStartDistance_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringStartScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetInscatteringStartScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringStartScale"));

	UExponentialHeightFogComponent_SetInscatteringStartScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetInscatteringFarScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetInscatteringFarScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetInscatteringFarScale"));

	UExponentialHeightFogComponent_SetInscatteringFarScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity"));

	UExponentialHeightFogComponent_SetFogMaxOpacity_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogInscatteringColor(const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor"));

	UExponentialHeightFogComponent_SetFogInscatteringColor_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff"));

	UExponentialHeightFogComponent_SetFogHeightFalloff_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFogDensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogDensity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFogDensity"));

	UExponentialHeightFogComponent_SetFogDensity_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetFarInscatteringColour
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFarInscatteringColour(const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetFarInscatteringColour"));

	UExponentialHeightFogComponent_SetFarInscatteringColour_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetExponentialFogFarDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetExponentialFogFarDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetExponentialFogFarDistance"));

	UExponentialHeightFogComponent_SetExponentialFogFarDistance_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartScale"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringStartScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringFarScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringFarScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringFarScale"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringFarScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringExponent_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor"));

	UExponentialHeightFogComponent_SetDirectionalInscatteringColor_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FogVolumeComponent.UpdateFog
// (Final, Native, Public, BlueprintCallable)

void UFogVolumeComponent::UpdateFog()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FogVolumeComponent.UpdateFog"));

	UFogVolumeComponent_UpdateFog_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetTint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewTint                        (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetTint(const FLinearColor& NewTint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetTint"));

	UAmbientLightSourceComponent_SetTint_Params params;
	params.NewTint = NewTint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetRadius"));

	UAmbientLightSourceComponent_SetRadius_Params params;
	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetGroupingPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EAmbientLightClusteringPolicy> Policy                         (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetGroupingPolicy(TEnumAsByte<EAmbientLightClusteringPolicy> Policy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetGroupingPolicy"));

	UAmbientLightSourceComponent_SetGroupingPolicy_Params params;
	params.Policy = Policy;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AmbientLightSourceComponent.SetAmbientIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UAmbientLightSourceComponent::SetAmbientIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AmbientLightSourceComponent.SetAmbientIntensity"));

	UAmbientLightSourceComponent_SetAmbientIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetShadowLastTransitionSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetShadowLastTransitionSize(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowLastTransitionSize"));

	UDirectionalLightComponent_SetShadowLastTransitionSize_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction"));

	UDirectionalLightComponent_SetShadowDistanceFadeoutFraction_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness"));

	UDirectionalLightComponent_SetOcclusionMaskDarkness_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetNormalOffsetBiasScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetNormalOffsetBiasScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetNormalOffsetBiasScale"));

	UDirectionalLightComponent_SetNormalOffsetBiasScale_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetLightShaftOverrideDirection(const FVector& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection"));

	UDirectionalLightComponent_SetLightShaftOverrideDirection_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetFarCascadeUpdateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetFarCascadeUpdateRate(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetFarCascadeUpdateRate"));

	UDirectionalLightComponent_SetFarCascadeUpdateRate_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion"));

	UDirectionalLightComponent_SetEnableLightShaftOcclusion_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight"));

	UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight"));

	UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades"));

	UDirectionalLightComponent_SetDynamicShadowCascades_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCloudsShadowsIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCloudsShadowsIntensity(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCloudsShadowsIntensity"));

	UDirectionalLightComponent_SetCloudsShadowsIntensity_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCloseCascadeUpdateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCloseCascadeUpdateRate(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCloseCascadeUpdateRate"));

	UDirectionalLightComponent_SetCloseCascadeUpdateRate_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction"));

	UDirectionalLightComponent_SetCascadeTransitionFraction_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent"));

	UDirectionalLightComponent_SetCascadeDistributionExponent_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetSourceRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetSourceRadius(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceRadius"));

	UPointLightComponent_SetSourceRadius_Params params;
	params.bNewValue = bNewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetSourceLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetSourceLength(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetSourceLength"));

	UPointLightComponent_SetSourceLength_Params params;
	params.NewValue = NewValue;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetLightFalloffExponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetLightFalloffExponent"));

	UPointLightComponent_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PointLightComponent.SetAttenuationRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetAttenuationRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PointLightComponent.SetAttenuationRadius"));

	UPointLightComponent_SetAttenuationRadius_Params params;
	params.NewRadius = NewRadius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetOuterConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetOuterConeAngle"));

	USpotLightComponent_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetKickBackProportionality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewKickBackRatio               (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetKickBackProportionality(float NewKickBackRatio)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetKickBackProportionality"));

	USpotLightComponent_SetKickBackProportionality_Params params;
	params.NewKickBackRatio = NewKickBackRatio;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SpotLightComponent.SetInnerConeAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SpotLightComponent.SetInnerConeAngle"));

	USpotLightComponent_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetOcclusionTint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FColor                         InTint                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USkyLightComponent::SetOcclusionTint(const FColor& InTint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetOcclusionTint"));

	USkyLightComponent_SetOcclusionTint_Params params;
	params.InTint = InTint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetMinOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InMinOcclusion                 (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetMinOcclusion(float InMinOcclusion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetMinOcclusion"));

	USkyLightComponent_SetMinOcclusion_Params params;
	params.InMinOcclusion = InMinOcclusion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetLightColor(const FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetLightColor"));

	USkyLightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIntensity"));

	USkyLightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetIndirectLightingIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetIndirectLightingIntensity"));

	USkyLightComponent_SetIndirectLightingIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetCubemapBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTextureCube*                  SourceCubemap                  (Parm, ZeroConstructor, IsPlainOldData)
// UTextureCube*                  DestinationCubemap             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InBlendFraction                (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemapBlend"));

	USkyLightComponent_SetCubemapBlend_Params params;
	params.SourceCubemap = SourceCubemap;
	params.DestinationCubemap = DestinationCubemap;
	params.InBlendFraction = InBlendFraction;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.SetCubemap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTextureCube*                  NewCubemap                     (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetCubemap(UTextureCube* NewCubemap)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.SetCubemap"));

	USkyLightComponent_SetCubemap_Params params;
	params.NewCubemap = NewCubemap;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkyLightComponent.RecaptureSky
// (Final, Native, Public, BlueprintCallable)

void USkyLightComponent::RecaptureSky()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkyLightComponent.RecaptureSky"));

	USkyLightComponent_RecaptureSky_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPhysicsSpringComponent::GetSpringRestingPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint"));

	UPhysicsSpringComponent_GetSpringRestingPoint_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPhysicsSpringComponent::GetSpringDirection()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringDirection"));

	UPhysicsSpringComponent_GetSpringDirection_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint"));

	UPhysicsSpringComponent_GetSpringCurrentEndPoint_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsSpringComponent::GetNormalizedCompressionScalar()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar"));

	UPhysicsSpringComponent_GetNormalizedCompressionScalar_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ArrowComponent.SetArrowColor_New
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_New(const FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ArrowComponent.SetArrowColor_New"));

	UArrowComponent_SetArrowColor_New_Params params;
	params.NewColor = NewColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ArrowComponent.SetArrowColor_DEPRECATED
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FColor                         NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_DEPRECATED(const FColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ArrowComponent.SetArrowColor_DEPRECATED"));

	UArrowComponent_SetArrowColor_DEPRECATED_Params params;
	params.NewColor = NewColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetWaterPositionOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      PositionOffset                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetWaterPositionOffset(const FVector2D& PositionOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetWaterPositionOffset"));

	UFFTWaterComponent_SetWaterPositionOffset_Params params;
	params.PositionOffset = PositionOffset;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetWaterColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   WaterColour                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetWaterColour(const FLinearColor& WaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetWaterColour"));

	UFFTWaterComponent_SetWaterColour_Params params;
	params.WaterColour = WaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetSpecularBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpecularBrightness             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetSpecularBrightness(float SpecularBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetSpecularBrightness"));

	UFFTWaterComponent_SetSpecularBrightness_Params params;
	params.SpecularBrightness = SpecularBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetShallowWaterColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   ShallowWaterColour             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetShallowWaterColour(const FLinearColor& ShallowWaterColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetShallowWaterColour"));

	UFFTWaterComponent_SetShallowWaterColour_Params params;
	params.ShallowWaterColour = ShallowWaterColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetReflectionBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReflectionBrightness           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetReflectionBrightness(float ReflectionBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetReflectionBrightness"));

	UFFTWaterComponent_SetReflectionBrightness_Params params;
	params.ReflectionBrightness = ReflectionBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetMurkyRegion
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FMurkyRegion                   MurkyRegion                    (ConstParm, Parm, OutParm, ReferenceParm)

void UFFTWaterComponent::SetMurkyRegion(const FMurkyRegion& MurkyRegion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetMurkyRegion"));

	UFFTWaterComponent_SetMurkyRegion_Params params;
	params.MurkyRegion = MurkyRegion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFresnelPower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FresnelPower                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetFresnelPower(float FresnelPower)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFresnelPower"));

	UFFTWaterComponent_SetFresnelPower_Params params;
	params.FresnelPower = FresnelPower;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamHighlightColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   FoamHighlightColour            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetFoamHighlightColour(const FLinearColor& FoamHighlightColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamHighlightColour"));

	UFFTWaterComponent_SetFoamHighlightColour_Params params;
	params.FoamHighlightColour = FoamHighlightColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   FoamColour                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetFoamColour(const FLinearColor& FoamColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamColour"));

	UFFTWaterComponent_SetFoamColour_Params params;
	params.FoamColour = FoamColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetFoamBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FoamBrightness                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetFoamBrightness(float FoamBrightness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetFoamBrightness"));

	UFFTWaterComponent_SetFoamBrightness_Params params;
	params.FoamBrightness = FoamBrightness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetCarrierWaveParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Amplitude                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          WaveLength                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          PropagationSpeed               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::SetCarrierWaveParams(float Amplitude, float WaveLength, float PropagationSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetCarrierWaveParams"));

	UFFTWaterComponent_SetCarrierWaveParams_Params params;
	params.Amplitude = Amplitude;
	params.WaveLength = WaveLength;
	params.PropagationSpeed = PropagationSpeed;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetBackLitColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   BackLitColour                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetBackLitColour(const FLinearColor& BackLitColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetBackLitColour"));

	UFFTWaterComponent_SetBackLitColour_Params params;
	params.BackLitColour = BackLitColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.SetAmbientColour
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   AmbientColour                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UFFTWaterComponent::SetAmbientColour(const FLinearColor& AmbientColour)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.SetAmbientColour"));

	UFFTWaterComponent_SetAmbientColour_Params params;
	params.AmbientColour = AmbientColour;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FFTWaterComponent.GetWaterPositionOffset
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      PositionOffset                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UFFTWaterComponent::GetWaterPositionOffset(FVector2D* PositionOffset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterComponent.GetWaterPositionOffset"));

	UFFTWaterComponent_GetWaterPositionOffset_Params params;

	UObject::ProcessEvent(fn, &params);

	if (PositionOffset != nullptr)
		*PositionOffset = params.PositionOffset;
}


// Function Engine.FFTWaterExtendedPlaneComponent.SetMurkyRegion
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FMurkyRegion                   MurkyRegion                    (ConstParm, Parm, OutParm, ReferenceParm)

void UFFTWaterExtendedPlaneComponent::SetMurkyRegion(const FMurkyRegion& MurkyRegion)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FFTWaterExtendedPlaneComponent.SetMurkyRegion"));

	UFFTWaterExtendedPlaneComponent_SetMurkyRegion_Params params;
	params.MurkyRegion = MurkyRegion;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetUV
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetUV"));

	UBillboardComponent_SetUV_Params params;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetSpriteAndUV
// (Native, Public, BlueprintCallable)
// Parameters:
// UTexture2D*                    NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSpriteAndUV(UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSpriteAndUV"));

	UBillboardComponent_SetSpriteAndUV_Params params;
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BillboardComponent.SetSprite
// (Native, Public, BlueprintCallable)
// Parameters:
// UTexture2D*                    NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSprite(UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BillboardComponent.SetSprite"));

	UBillboardComponent_SetSprite_Params params;
	params.NewSprite = NewSprite;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialBillboardComponent.AddElement
// (Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)
// UCurveFloat*                   DistanceToOpacityCurve         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSizeIsInScreenSpace           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeX                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeY                      (Parm, ZeroConstructor, IsPlainOldData)
// UCurveFloat*                   DistanceToSizeCurve            (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialBillboardComponent::AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialBillboardComponent.AddElement"));

	UMaterialBillboardComponent_AddElement_Params params;
	params.Material = Material;
	params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	params.BaseSizeX = BaseSizeX;
	params.BaseSizeY = BaseSizeY;
	params.DistanceToSizeCurve = DistanceToSizeCurve;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.StaticMesh.GetNumUVChannels
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            LodLevel                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStaticMesh::GetNumUVChannels(int LodLevel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumUVChannels"));

	UStaticMesh_GetNumUVChannels_Params params;
	params.LodLevel = LodLevel;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetNumLODsBP
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStaticMesh::GetNumLODsBP()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetNumLODsBP"));

	UStaticMesh_GetNumLODsBP_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.StaticMesh.GetBoundingBox
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FBox                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FBox UStaticMesh::GetBoundingBox()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.StaticMesh.GetBoundingBox"));

	UStaticMesh_GetBoundingBox_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MergedCollisionComponent.GetStaticMeshByInstanceBodyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceBodyIndex              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// UStaticMesh*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UStaticMesh* UMergedCollisionComponent::GetStaticMeshByInstanceBodyIndex(int InstanceBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MergedCollisionComponent.GetStaticMeshByInstanceBodyIndex"));

	UMergedCollisionComponent_GetStaticMeshByInstanceBodyIndex_Params params;
	params.InstanceBodyIndex = InstanceBodyIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MergedCollisionComponent.GetOwningActorCrc32ByInstanceBodyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            InstanceBodyIndex              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMergedCollisionComponent::GetOwningActorCrc32ByInstanceBodyIndex(int InstanceBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MergedCollisionComponent.GetOwningActorCrc32ByInstanceBodyIndex"));

	UMergedCollisionComponent_GetOwningActorCrc32ByInstanceBodyIndex_Params params;
	params.InstanceBodyIndex = InstanceBodyIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DestructibleComponent.SetDestructibleMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UDestructibleMesh*             NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::SetDestructibleMesh(UDestructibleMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.SetDestructibleMesh"));

	UDestructibleComponent_SetDestructibleMesh_Params params;
	params.NewMesh = NewMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DestructibleComponent.GetDestructibleMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UDestructibleMesh*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UDestructibleMesh* UDestructibleComponent::GetDestructibleMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.GetDestructibleMesh"));

	UDestructibleComponent_GetDestructibleMesh_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DestructibleComponent.ApplyRadiusDamage
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HurtOrigin                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFullDamage                    (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyRadiusDamage(float BaseDamage, const FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.ApplyRadiusDamage"));

	UDestructibleComponent_ApplyRadiusDamage_Params params;
	params.BaseDamage = BaseDamage;
	params.HurtOrigin = HurtOrigin;
	params.DamageRadius = DamageRadius;
	params.ImpulseStrength = ImpulseStrength;
	params.bFullDamage = bFullDamage;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.DestructibleComponent.ApplyDamage
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        ImpulseDir                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyDamage(float DamageAmount, const FVector& HitLocation, const FVector& ImpulseDir, float ImpulseStrength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DestructibleComponent.ApplyDamage"));

	UDestructibleComponent_ApplyDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.HitLocation = HitLocation;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseStrength = ImpulseStrength;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneTransformByName
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneTransformByName(const FName& BoneName, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneTransformByName"));

	UPoseableMeshComponent_SetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InScale3D                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneScaleByName(const FName& BoneName, const FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneScaleByName"));

	UPoseableMeshComponent_SetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.InScale3D = InScale3D;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneRotationByName(const FName& BoneName, const FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneRotationByName"));

	UPoseableMeshComponent_SetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.InRotation = InRotation;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.SetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneLocationByName(const FName& BoneName, const FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.SetBoneLocationByName"));

	UPoseableMeshComponent_SetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.InLocation = InLocation;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.ResetBoneTransformByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::ResetBoneTransformByName(const FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.ResetBoneTransformByName"));

	UPoseableMeshComponent_ResetBoneTransformByName_Params params;
	params.BoneName = BoneName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableMeshComponent.GetBoneTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UPoseableMeshComponent::GetBoneTransformByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneTransformByName"));

	UPoseableMeshComponent_GetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneScaleByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPoseableMeshComponent::GetBoneScaleByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneScaleByName"));

	UPoseableMeshComponent_GetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneRotationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UPoseableMeshComponent::GetBoneRotationByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneRotationByName"));

	UPoseableMeshComponent_GetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneLocationByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UPoseableMeshComponent::GetBoneLocationByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableMeshComponent.GetBoneLocationByName"));

	UPoseableMeshComponent_GetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PoseableSkeletalMeshComponent.SwitchPoseMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPoseableAnimMode> NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SwitchPoseMode(TEnumAsByte<EPoseableAnimMode> NewMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SwitchPoseMode"));

	UPoseableSkeletalMeshComponent_SwitchPoseMode_Params params;
	params.NewMode = NewMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByName
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SetBoneTransformByName(const FName& BoneName, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByName"));

	UPoseableSkeletalMeshComponent_SetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByIndex
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableSkeletalMeshComponent::SetBoneTransformByIndex(int BoneIndex, const FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.SetBoneTransformByIndex"));

	UPoseableSkeletalMeshComponent_SetBoneTransformByIndex_Params params;
	params.BoneIndex = BoneIndex;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PoseableSkeletalMeshComponent.GetBoneTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRefPose                  (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UPoseableSkeletalMeshComponent::GetBoneTransformByName(const FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PoseableSkeletalMeshComponent.GetBoneTransformByName"));

	UPoseableSkeletalMeshComponent_GetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;
	params.bApplyRefPose = bApplyRefPose;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.FlatWaterMeshComponent.UpdateBoundary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        BoundaryActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::UpdateBoundary(AActor* BoundaryActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.UpdateBoundary"));

	UFlatWaterMeshComponent_UpdateBoundary_Params params;
	params.BoundaryActor = BoundaryActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.SetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Name                           (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      Texture                        (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::SetTexture(int MaterialIndex, const FName& Name, UTexture* Texture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.SetTexture"));

	UFlatWaterMeshComponent_SetTexture_Params params;
	params.MaterialIndex = MaterialIndex;
	params.Name = Name;
	params.Texture = Texture;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.SetScalarValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Name                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::SetScalarValue(int MaterialIndex, const FName& Name, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.SetScalarValue"));

	UFlatWaterMeshComponent_SetScalarValue_Params params;
	params.MaterialIndex = MaterialIndex;
	params.Name = Name;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.PlaceDrop
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::PlaceDrop(const FVector2D& Position, float Size, float Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.PlaceDrop"));

	UFlatWaterMeshComponent_PlaceDrop_Params params;
	params.Position = Position;
	params.Size = Size;
	params.Height = Height;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.FlatWaterMeshComponent.CreateBoundaryMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        BoundaryActor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZNearDistance                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ZFarDistance                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            TextureSize                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UFlatWaterMeshComponent::CreateBoundaryMap(AActor* BoundaryActor, float ZNearDistance, float ZFarDistance, int TextureSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FlatWaterMeshComponent.CreateBoundaryMap"));

	UFlatWaterMeshComponent_CreateBoundaryMap_Params params;
	params.BoundaryActor = BoundaryActor;
	params.ZNearDistance = ZNearDistance;
	params.ZFarDistance = ZFarDistance;
	params.TextureSize = TextureSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedCoverageMeshComponent.SetBaseMeshComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UStaticMeshComponent*          BaseMeshComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UInstancedCoverageMeshComponent::SetBaseMeshComponent(UStaticMeshComponent* BaseMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedCoverageMeshComponent.SetBaseMeshComponent"));

	UInstancedCoverageMeshComponent_SetBaseMeshComponent_Params params;
	params.BaseMeshComponent = BaseMeshComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.InstancedCoverageMeshComponent.BaseMeshComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// UStaticMeshComponent*          ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UStaticMeshComponent* UInstancedCoverageMeshComponent::BaseMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.InstancedCoverageMeshComponent.BaseMeshComponent"));

	UInstancedCoverageMeshComponent_BaseMeshComponent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MobileInstancedStaticMeshComponent.AddInstance
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FTransform                     Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMobileInstancedStaticMeshComponent::AddInstance(const FTransform& Transform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MobileInstancedStaticMeshComponent.AddInstance"));

	UMobileInstancedStaticMeshComponent_AddInstance_Params params;
	params.Transform = Transform;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.UpdateMesh
// (Final, Native, Public, BlueprintCallable)

void USplineMeshComponent::UpdateMesh()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.UpdateMesh"));

	USplineMeshComponent_UpdateMesh_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartTangent(const FVector& StartTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartTangent"));

	USplineMeshComponent_SetStartTangent_Params params;
	params.StartTangent = StartTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      StartScale                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartScale(const FVector2D& StartScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartScale"));

	USplineMeshComponent_SetStartScale_Params params;
	params.StartScale = StartScale;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartRoll                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartRoll"));

	USplineMeshComponent_SetStartRoll_Params params;
	params.StartRoll = StartRoll;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        StartPos                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartPosition(const FVector& StartPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartPosition"));

	USplineMeshComponent_SetStartPosition_Params params;
	params.StartPos = StartPos;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      StartOffset                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartOffset(const FVector2D& StartOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartOffset"));

	USplineMeshComponent_SetStartOffset_Params params;
	params.StartOffset = StartOffset;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetStartAndEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        StartPos                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        EndPos                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartAndEnd(const FVector& StartPos, const FVector& StartTangent, const FVector& EndPos, const FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetStartAndEnd"));

	USplineMeshComponent_SetStartAndEnd_Params params;
	params.StartPos = StartPos;
	params.StartTangent = StartTangent;
	params.EndPos = EndPos;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetSplineUpDir
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InSplineUpDir                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetSplineUpDir(const FVector& InSplineUpDir, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetSplineUpDir"));

	USplineMeshComponent_SetSplineUpDir_Params params;
	params.InSplineUpDir = InSplineUpDir;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetForwardAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ESplineMeshAxis>   InForwardAxis                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetForwardAxis"));

	USplineMeshComponent_SetForwardAxis_Params params;
	params.InForwardAxis = InForwardAxis;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndTangent(const FVector& EndTangent, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndTangent"));

	USplineMeshComponent_SetEndTangent_Params params;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      EndScale                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndScale(const FVector2D& EndScale, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndScale"));

	USplineMeshComponent_SetEndScale_Params params;
	params.EndScale = EndScale;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          EndRoll                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndRoll"));

	USplineMeshComponent_SetEndRoll_Params params;
	params.EndRoll = EndRoll;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        EndPos                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndPosition(const FVector& EndPos, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndPosition"));

	USplineMeshComponent_SetEndPosition_Params params;
	params.EndPos = EndPos;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetEndOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      EndOffset                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndOffset(const FVector2D& EndOffset, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetEndOffset"));

	USplineMeshComponent_SetEndOffset_Params params;
	params.EndOffset = EndOffset;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetBoundaryMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBoundaryMin                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMin"));

	USplineMeshComponent_SetBoundaryMin_Params params;
	params.InBoundaryMin = InBoundaryMin;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.SetBoundaryMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InBoundaryMax                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateMesh                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.SetBoundaryMax"));

	USplineMeshComponent_SetBoundaryMax_Params params;
	params.InBoundaryMax = InBoundaryMax;
	params.bUpdateMesh = bUpdateMesh;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SplineMeshComponent.GetStartTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineMeshComponent::GetStartTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartTangent"));

	USplineMeshComponent_GetStartTangent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D USplineMeshComponent::GetStartScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartScale"));

	USplineMeshComponent_GetStartScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetStartRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartRoll"));

	USplineMeshComponent_GetStartRoll_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineMeshComponent::GetStartPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartPosition"));

	USplineMeshComponent_GetStartPosition_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D USplineMeshComponent::GetStartOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetStartOffset"));

	USplineMeshComponent_GetStartOffset_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetSplineUpDir
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineMeshComponent::GetSplineUpDir()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetSplineUpDir"));

	USplineMeshComponent_GetSplineUpDir_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetForwardAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ESplineMeshAxis>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESplineMeshAxis> USplineMeshComponent::GetForwardAxis()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetForwardAxis"));

	USplineMeshComponent_GetForwardAxis_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineMeshComponent::GetEndTangent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndTangent"));

	USplineMeshComponent_GetEndTangent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D USplineMeshComponent::GetEndScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndScale"));

	USplineMeshComponent_GetEndScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetEndRoll()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndRoll"));

	USplineMeshComponent_GetEndRoll_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USplineMeshComponent::GetEndPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndPosition"));

	USplineMeshComponent_GetEndPosition_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D USplineMeshComponent::GetEndOffset()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetEndOffset"));

	USplineMeshComponent_GetEndOffset_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetBoundaryMin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMin"));

	USplineMeshComponent_GetBoundaryMin_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetBoundaryMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetBoundaryMax()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SplineMeshComponent.GetBoundaryMax"));

	USplineMeshComponent_GetBoundaryMax_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BoxComponent.SetBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InBoxExtent                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UBoxComponent::SetBoxExtent(const FVector& InBoxExtent, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.SetBoxExtent"));

	UBoxComponent_SetBoxExtent_Params params;
	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.BoxComponent.GetUnscaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UBoxComponent::GetUnscaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetUnscaledBoxExtent"));

	UBoxComponent_GetUnscaledBoxExtent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.BoxComponent.GetScaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UBoxComponent::GetScaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.BoxComponent.GetScaledBoxExtent"));

	UBoxComponent_GetScaledBoxExtent_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.SetSphereRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSphereRadius                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.SetSphereRadius"));

	USphereComponent_SetSphereRadius_Params params;
	params.InSphereRadius = InSphereRadius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SphereComponent.GetUnscaledSphereRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetUnscaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetUnscaledSphereRadius"));

	USphereComponent_GetUnscaledSphereRadius_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetShapeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetShapeScale"));

	USphereComponent_GetShapeScale_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetScaledSphereRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetScaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SphereComponent.GetScaledSphereRadius"));

	USphereComponent_GetScaledSphereRadius_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.SetYScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetYScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetYScale"));

	UTextRenderComponent_SetYScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetXScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetXScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetXScale"));

	UTextRenderComponent_SetXScale_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetWorldSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetWorldSize(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetWorldSize"));

	UTextRenderComponent_SetWorldSize_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetTextRenderColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FColor                         Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextRenderColor(const FColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextRenderColor"));

	UTextRenderComponent_SetTextRenderColor_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetTextMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextMaterial(UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetTextMaterial"));

	UTextRenderComponent_SetTextMaterial_Params params;
	params.Material = Material;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FString                        Value                          (Parm, ZeroConstructor)

void UTextRenderComponent::SetText(const FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetText"));

	UTextRenderComponent_SetText_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizSpacingAdjust(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizSpacingAdjust"));

	UTextRenderComponent_SetHorizSpacingAdjust_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EHorizTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetHorizontalAlignment"));

	UTextRenderComponent_SetHorizontalAlignment_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UFont*                         Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetFont(UFont* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.SetFont"));

	UTextRenderComponent_SetFont_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.K2_SetText
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FText                          Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UTextRenderComponent::K2_SetText(const FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.K2_SetText"));

	UTextRenderComponent_K2_SetText_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TextRenderComponent.GetTextWorldSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UTextRenderComponent::GetTextWorldSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextWorldSize"));

	UTextRenderComponent_GetTextWorldSize_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.GetTextLocalSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UTextRenderComponent::GetTextLocalSize()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TextRenderComponent.GetTextLocalSize"));

	UTextRenderComponent_GetTextLocalSize_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.VectorFieldComponent.SetIntensity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UVectorFieldComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VectorFieldComponent.SetIntensity"));

	UVectorFieldComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect"));

	URadialForceComponent_RemoveObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.FireImpulse
// (Native, Public, BlueprintCallable)

void URadialForceComponent::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.FireImpulse"));

	URadialForceComponent_FireImpulse_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.RadialForceComponent.AddObjectTypeToAffect
// (Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.RadialForceComponent.AddObjectTypeToAffect"));

	URadialForceComponent_AddObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.UpdateReflectionCapture
// (Final, Native, Public, BlueprintCallable)

void UReflectionCaptureComponent::UpdateReflectionCapture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.UpdateReflectionCapture"));

	UReflectionCaptureComponent_UpdateReflectionCapture_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.UpdateAllReflectionCaptures
// (Final, Native, Public, BlueprintCallable)

void UReflectionCaptureComponent::UpdateAllReflectionCaptures()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.UpdateAllReflectionCaptures"));

	UReflectionCaptureComponent_UpdateAllReflectionCaptures_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetTint
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FLinearColor                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetTint(const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetTint"));

	UReflectionCaptureComponent_SetTint_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetShadowBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetShadowBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetShadowBrightness"));

	UReflectionCaptureComponent_SetShadowBrightness_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetLPVOcclusionBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetLPVOcclusionBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetLPVOcclusionBrightness"));

	UReflectionCaptureComponent_SetLPVOcclusionBrightness_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.ReflectionCaptureComponent.SetBrightness
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetBrightness(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ReflectionCaptureComponent.SetBrightness"));

	UReflectionCaptureComponent_SetBrightness_Params params;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent.HideComponent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USceneCaptureComponent::HideComponent(UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideComponent"));

	USceneCaptureComponent_HideComponent_Params params;
	params.InComponent = InComponent;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent.HideActorComponents
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// AActor*                        InActor                        (Parm, ZeroConstructor, IsPlainOldData)

void USceneCaptureComponent::HideActorComponents(AActor* InActor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent.HideActorComponents"));

	USceneCaptureComponent_HideActorComponents_Params params;
	params.InActor = InActor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent2D.UpdateContent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void USceneCaptureComponent2D::UpdateContent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.UpdateContent"));

	USceneCaptureComponent2D_UpdateContent_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UBlendableInterface> InBlendableObject              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWeight                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneCaptureComponent2D::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable"));

	USceneCaptureComponent2D_AddOrUpdateBlendable_Params params;
	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SceneCaptureComponentCube.UpdateContent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void USceneCaptureComponentCube::UpdateContent()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SceneCaptureComponentCube.UpdateContent"));

	USceneCaptureComponentCube_UpdateContent_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Stop
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Stop"));

	UTimelineComponent_Stop_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetTimelineLengthMode
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETimelineLengthMode> NewLengthMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLengthMode"));

	UTimelineComponent_SetTimelineLengthMode_Params params;
	params.NewLengthMode = NewLengthMode;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetTimelineLength
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLength                      (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLength(float NewLength)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetTimelineLength"));

	UTimelineComponent_SetTimelineLength_Params params;
	params.NewLength = NewLength;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetPlayRate
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewRate                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlayRate(float NewRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlayRate"));

	UTimelineComponent_SetPlayRate_Params params;
	params.NewRate = NewRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetPlaybackPosition
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireEvents                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireUpdate                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetPlaybackPosition"));

	UTimelineComponent_SetPlaybackPosition_Params params;
	params.NewPosition = NewPosition;
	params.bFireEvents = bFireEvents;
	params.bFireUpdate = bFireUpdate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetNewTime
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetNewTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetNewTime"));

	UTimelineComponent_SetNewTime_Params params;
	params.NewTime = NewTime;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.SetLooping
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetLooping(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.SetLooping"));

	UTimelineComponent_SetLooping_Params params;
	params.bNewLooping = bNewLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.ReverseFromEnd
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::ReverseFromEnd()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.ReverseFromEnd"));

	UTimelineComponent_ReverseFromEnd_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Reverse
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Reverse"));

	UTimelineComponent_Reverse_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.PlayFromStart
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::PlayFromStart()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.PlayFromStart"));

	UTimelineComponent_PlayFromStart_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.Play
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UTimelineComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.Play"));

	UTimelineComponent_Play_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.OnRep_Timeline
// (Final, Native, Public)

void UTimelineComponent::OnRep_Timeline()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.OnRep_Timeline"));

	UTimelineComponent_OnRep_Timeline_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TimelineComponent.IsReversing
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsReversing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsReversing"));

	UTimelineComponent_IsReversing_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsPlaying
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsPlaying"));

	UTimelineComponent_IsPlaying_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsLooping
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsLooping()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.IsLooping"));

	UTimelineComponent_IsLooping_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetTimelineLength
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetTimelineLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetTimelineLength"));

	UTimelineComponent_GetTimelineLength_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlayRate
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlayRate"));

	UTimelineComponent_GetPlayRate_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlaybackPosition
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlaybackPosition()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TimelineComponent.GetPlaybackPosition"));

	UTimelineComponent_GetPlaybackPosition_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimSingleNodeInstance.StopAnim
// (Final, Native, Public, BlueprintCallable)

void UAnimSingleNodeInstance::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.StopAnim"));

	UAnimSingleNodeInstance_StopAnim_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetVertexAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UVertexAnimation*              NewVertexAnim                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetVertexAnimation(UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetVertexAnimation"));

	UAnimSingleNodeInstance_SetVertexAnimation_Params params;
	params.NewVertexAnim = NewVertexAnim;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetReverse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInReverse                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetReverse(bool bInReverse)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetReverse"));

	UAnimSingleNodeInstance_SetReverse_Params params;
	params.bInReverse = bInReverse;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPosition"));

	UAnimSingleNodeInstance_SetPosition_Params params;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlayRate"));

	UAnimSingleNodeInstance_SetPlayRate_Params params;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsPlaying                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetPlaying"));

	UAnimSingleNodeInstance_SetPlaying_Params params;
	params.bIsPlaying = bIsPlaying;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetLooping(bool bIsLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetLooping"));

	UAnimSingleNodeInstance_SetLooping_Params params;
	params.bIsLooping = bIsLooping;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        InBlendInput                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UAnimSingleNodeInstance::SetBlendSpaceInput(const FVector& InBlendInput)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput"));

	UAnimSingleNodeInstance_SetBlendSpaceInput_Params params;
	params.InBlendInput = InBlendInput;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// UAnimationAsset*               NewAsset                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.SetAnimationAsset"));

	UAnimSingleNodeInstance_SetAnimationAsset_Params params;
	params.NewAsset = NewAsset;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.PlayAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InStartPosition                (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.PlayAnim"));

	UAnimSingleNodeInstance_PlayAnim_Params params;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;
	params.InStartPosition = InStartPosition;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.AnimSingleNodeInstance.GetLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimSingleNodeInstance::GetLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimSingleNodeInstance.GetLength"));

	UAnimSingleNodeInstance_GetLength_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState_Trail.OverridePSTemplate
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// USkeletalMeshComponent*        MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// UAnimSequenceBase*             Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// UParticleSystem*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UParticleSystem* UAnimNotifyState_Trail::OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AnimNotifyState_Trail.OverridePSTemplate"));

	UAnimNotifyState_Trail_OverridePSTemplate_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.RegisterMovementComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMovementComponent*            MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          AvoidanceWeight                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAvoidanceManager::RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.RegisterMovementComponent"));

	UAvoidanceManager_RegisterMovementComponent_Params params;
	params.MovementComp = MovementComp;
	params.AvoidanceWeight = AvoidanceWeight;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetObjectCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetObjectCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetObjectCount"));

	UAvoidanceManager_GetObjectCount_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetNewAvoidanceUID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetNewAvoidanceUID()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetNewAvoidanceUID"));

	UAvoidanceManager_GetNewAvoidanceUID_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FNavAvoidanceData              AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            IgnoreThisUID                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UAvoidanceManager::GetAvoidanceVelocityIgnoringUID(const FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID"));

	UAvoidanceManager_GetAvoidanceVelocityIgnoringUID_Params params;
	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;
	params.IgnoreThisUID = IgnoreThisUID;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UMovementComponent*            MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent"));

	UAvoidanceManager_GetAvoidanceVelocityForComponent_Params params;
	params.MovementComp = MovementComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocity
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FNavAvoidanceData              AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UAvoidanceManager::GetAvoidanceVelocity(const FNavAvoidanceData& AvoidanceData, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.AvoidanceManager.GetAvoidanceVelocity"));

	UAvoidanceManager_GetAvoidanceVelocity_Params params;
	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UDataTable*                    Table                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FName>                  OutRowNames                    (Parm, OutParm, ZeroConstructor)

void UDataTableFunctionLibrary::GetDataTableRowNames(UDataTable* Table, TArray<FName>* OutRowNames)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowNames"));

	UDataTableFunctionLibrary_GetDataTableRowNames_Params params;
	params.Table = Table;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRowNames != nullptr)
		*OutRowNames = params.OutRowNames;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UDataTable*                    Table                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// FTableRowBase                  OutRow                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDataTableFunctionLibrary::GetDataTableRowFromName(UDataTable* Table, const FName& RowName, FTableRowBase* OutRow)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName"));

	UDataTableFunctionLibrary_GetDataTableRowFromName_Params params;
	params.Table = Table;
	params.RowName = RowName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRow != nullptr)
		*OutRow = params.OutRow;

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UCurveTable*                   CurveTable                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InXY                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEvaluateCurveTableResult> OutResult                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutXY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UDataTableFunctionLibrary::EvaluateCurveTableRow(UCurveTable* CurveTable, const FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow"));

	UDataTableFunctionLibrary_EvaluateCurveTableRow_Params params;
	params.CurveTable = CurveTable;
	params.RowName = RowName;
	params.InXY = InXY;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutResult != nullptr)
		*OutResult = params.OutResult;
	if (OutXY != nullptr)
		*OutXY = params.OutXY;
}


// Function Engine.DeformablesBlueprintFunctionLibrary.ApplyWorldForceToDeformables
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// USkinnedMeshComponent*         SkinnedMeshComp                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        WorldSpaceForce                (Parm, ZeroConstructor, IsPlainOldData)

void UDeformablesBlueprintFunctionLibrary::ApplyWorldForceToDeformables(USkinnedMeshComponent* SkinnedMeshComp, const FVector& WorldSpaceForce)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.DeformablesBlueprintFunctionLibrary.ApplyWorldForceToDeformables"));

	UDeformablesBlueprintFunctionLibrary_ApplyWorldForceToDeformables_Params params;
	params.SkinnedMeshComp = SkinnedMeshComp;
	params.WorldSpaceForce = WorldSpaceForce;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.FeatureConfigBlueprintFunctionLibrary.IsFeatureEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          FeatureName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UFeatureConfigBlueprintFunctionLibrary::IsFeatureEnabled(const FName& FeatureName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.FeatureConfigBlueprintFunctionLibrary.IsFeatureEnabled"));

	UFeatureConfigBlueprintFunctionLibrary_IsFeatureEnabled_Params params;
	params.FeatureName = FeatureName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.UnloadStreamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void UGameplayStatics::UnloadStreamLevel(UObject* WorldContextObject, const FName& LevelName, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.UnloadStreamLevel"));

	UGameplayStatics_UnloadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SpawnSoundAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// USceneComponent*               AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAttached"));

	UGameplayStatics_SpawnSoundAttached_Params params;
	params.Sound = Sound;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSoundAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSoundAtLocation"));

	UGameplayStatics_SpawnSoundAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnSound2D
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnSound2D"));

	UGameplayStatics_SpawnSound2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UClass*                        ObjectClass                    (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UObject* UGameplayStatics::SpawnObject(UClass* ObjectClass, UObject* Outer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnObject"));

	UGameplayStatics_SpawnObject_Params params;
	params.ObjectClass = ObjectClass;
	params.Outer = Outer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UParticleSystem*               EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// USceneComponent*               AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// UParticleSystemComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UParticleSystemComponent* UGameplayStatics::SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAttached"));

	UGameplayStatics_SpawnEmitterAttached_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bAutoDestroy = bAutoDestroy;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UParticleSystem*               EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// UParticleSystemComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UParticleSystemComponent* UGameplayStatics::SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, const FVector& Location, const FRotator& Rotation, bool bAutoDestroy)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnEmitterAtLocation"));

	UGameplayStatics_SpawnEmitterAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.EmitterTemplate = EmitterTemplate;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bAutoDestroy = bAutoDestroy;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAttached
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UDialogueWave*                 Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// FDialogueContext               Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// USceneComponent*               AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnDialogueAttached(UDialogueWave* Dialogue, const FDialogueContext& Context, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAttached"));

	UGameplayStatics_SpawnDialogueAttached_Params params;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogueAtLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UDialogueWave*                 Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// FDialogueContext               Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogueAtLocation"));

	UGameplayStatics_SpawnDialogueAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDialogue2D
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UDialogueWave*                 Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// FDialogueContext               Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// UAudioComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UAudioComponent* UGameplayStatics::SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDialogue2D"));

	UGameplayStatics_SpawnDialogue2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UMaterialInterface*            DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// USceneComponent*               AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// UDecalComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UDecalComponent* UGameplayStatics::SpawnDecalAttached(UMaterialInterface* DecalMaterial, const FVector& DecalSize, USceneComponent* AttachToComponent, const FName& AttachPointName, const FVector& Location, const FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAttached"));

	UGameplayStatics_SpawnDecalAttached_Params params;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.LifeSpan = LifeSpan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// UDecalComponent*               ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

UDecalComponent* UGameplayStatics::SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& DecalSize, const FVector& Location, const FRotator& Rotation, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SpawnDecalAtLocation"));

	UGameplayStatics_SpawnDecalAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LifeSpan = LifeSpan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetWorldOriginLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FIntVector                     NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetWorldOriginLocation(UObject* WorldContextObject, const FIntVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetWorldOriginLocation"));

	UGameplayStatics_SetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NewLocation = NewLocation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SetGlobalTimeDilation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeDilation                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGlobalTimeDilation"));

	UGameplayStatics_SetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TimeDilation = TimeDilation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SetGamePaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPaused                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SetGamePaused(UObject* WorldContextObject, bool bPaused)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetGamePaused"));

	UGameplayStatics_SetGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bPaused = bPaused;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetBaseSoundMix
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundMix*                     InSoundMix                     (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SetBaseSoundMix"));

	UGameplayStatics_SetBaseSoundMix_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMix = InSoundMix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.SaveGameToSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// USaveGame*                     SaveGameObject                 (Parm, ZeroConstructor, IsPlainOldData)
// FString                        SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SaveGameToSlot(USaveGame* SaveGameObject, const FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.SaveGameToSlot"));

	UGameplayStatics_SaveGameToSlot_Params params;
	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.RemovePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// APlayerController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDestroyPawn                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::RemovePlayer(APlayerController* Player, bool bDestroyPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.RemovePlayer"));

	UGameplayStatics_RemovePlayer_Params params;
	params.Player = Player;
	params.bDestroyPawn = bDestroyPawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PushSoundMixModifier
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundMix*                     InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PushSoundMixModifier"));

	UGameplayStatics_PushSoundMixModifier_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ProjectWorldToScreen
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// APlayerController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldPosition                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector2D                      ScreenPosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ProjectWorldToScreen(APlayerController* Player, const FVector& WorldPosition, FVector2D* ScreenPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ProjectWorldToScreen"));

	UGameplayStatics_ProjectWorldToScreen_Params params;
	params.Player = Player;
	params.WorldPosition = WorldPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PopSoundMixModifier
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundMix*                     InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PopSoundMixModifier"));

	UGameplayStatics_PopSoundMixModifier_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayWorldCameraShake
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Epicenter                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InnerRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OuterRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOrientShakeTowardsEpicenter   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayWorldCameraShake(UObject* WorldContextObject, UClass* Shake, const FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayWorldCameraShake"));

	UGameplayStatics_PlayWorldCameraShake_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Shake = Shake;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlaySoundAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySoundAtLocation"));

	UGameplayStatics_PlaySoundAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlaySound2D
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// USoundBase*                    Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlaySound2D"));

	UGameplayStatics_PlaySound2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayDialogueAtLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UDialogueWave*                 Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// FDialogueContext               Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// USoundAttenuation*             AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, const FVector& Location, const FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogueAtLocation"));

	UGameplayStatics_PlayDialogueAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.PlayDialogue2D
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UDialogueWave*                 Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// FDialogueContext               Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.PlayDialogue2D"));

	UGameplayStatics_PlayDialogue2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ParseOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Options                        (Parm, ZeroConstructor)
// FString                        Key                            (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UGameplayStatics::ParseOption(const FString& Options, const FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ParseOption"));

	UGameplayStatics_ParseOption_Params params;
	params.Options = Options;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.OpenLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Options                        (Parm, ZeroConstructor)

void UGameplayStatics::OpenLevel(UObject* WorldContextObject, const FName& LevelName, bool bAbsolute, const FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.OpenLevel"));

	UGameplayStatics_OpenLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.LoadStreamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMakeVisibleAfterLoad          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldBlockOnLoad             (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void UGameplayStatics::LoadStreamLevel(UObject* WorldContextObject, const FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadStreamLevel"));

	UGameplayStatics_LoadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.LoadGameFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// USaveGame*                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USaveGame* UGameplayStatics::LoadGameFromSlot(const FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.LoadGameFromSlot"));

	UGameplayStatics_LoadGameFromSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsGamePaused
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::IsGamePaused(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.IsGamePaused"));

	UGameplayStatics_IsGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.HasOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Options                        (Parm, ZeroConstructor)
// FString                        InKey                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::HasOption(const FString& Options, const FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.HasOption"));

	UGameplayStatics_HasOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GrassOverlappingSphereCount
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UStaticMesh*                   StaticMesh                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        CenterPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UGameplayStatics::GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, const FVector& CenterPosition, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GrassOverlappingSphereCount"));

	UGameplayStatics_GrassOverlappingSphereCount_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StaticMesh = StaticMesh;
	params.CenterPosition = CenterPosition;
	params.Radius = Radius;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldOriginLocation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FIntVector                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FIntVector UGameplayStatics::GetWorldOriginLocation(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldOriginLocation"));

	UGameplayStatics_GetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldDeltaSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetWorldDeltaSeconds(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetWorldDeltaSeconds"));

	UGameplayStatics_GetWorldDeltaSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetSurfaceType
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FHitResult                     Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<EPhysicalSurface>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPhysicalSurface> UGameplayStatics::GetSurfaceType(const FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetSurfaceType"));

	UGameplayStatics_GetSurfaceType_Params params;
	params.Hit = Hit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetStreamingLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// ULevelStreaming*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ULevelStreaming* UGameplayStatics::GetStreamingLevel(UObject* WorldContextObject, const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetStreamingLevel"));

	UGameplayStatics_GetStreamingLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetRealTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetRealTimeSeconds(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetRealTimeSeconds"));

	UGameplayStatics_GetRealTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// APawn*                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APawn* UGameplayStatics::GetPlayerPawn(UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerPawn"));

	UGameplayStatics_GetPlayerPawn_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// APlayerController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerController* UGameplayStatics::GetPlayerController(UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerController"));

	UGameplayStatics_GetPlayerController_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCharacter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// ACharacter*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ACharacter* UGameplayStatics::GetPlayerCharacter(UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCharacter"));

	UGameplayStatics_GetPlayerCharacter_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCameraManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// APlayerCameraManager*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerCameraManager* UGameplayStatics::GetPlayerCameraManager(UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlayerCameraManager"));

	UGameplayStatics_GetPlayerCameraManager_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlatformName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UGameplayStatics::GetPlatformName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetPlatformName"));

	UGameplayStatics_GetPlatformName_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetObjectClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UClass* UGameplayStatics::GetObjectClass(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetObjectClass"));

	UGameplayStatics_GetObjectClass_Params params;
	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetKeyValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Pair                           (Parm, ZeroConstructor)
// FString                        Key                            (Parm, OutParm, ZeroConstructor)
// FString                        Value                          (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetKeyValue(const FString& Pair, FString* Key, FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetKeyValue"));

	UGameplayStatics_GetKeyValue_Params params;
	params.Pair = Pair;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameplayStatics.GetIntOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Options                        (Parm, ZeroConstructor)
// FString                        Key                            (Parm, ZeroConstructor)
// int                            DefaultValue                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UGameplayStatics::GetIntOption(const FString& Options, const FString& Key, int DefaultValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetIntOption"));

	UGameplayStatics_GetIntOption_Params params;
	params.Options = Options;
	params.Key = Key;
	params.DefaultValue = DefaultValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGlobalTimeDilation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetGlobalTimeDilation(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGlobalTimeDilation"));

	UGameplayStatics_GetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// AGameState*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AGameState* UGameplayStatics::GetGameState(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameState"));

	UGameplayStatics_GetGameState_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// AGameMode*                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AGameMode* UGameplayStatics::GetGameMode(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameMode"));

	UGameplayStatics_GetGameMode_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UGameInstance*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UGameInstance* UGameplayStatics::GetGameInstance(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetGameInstance"));

	UGameplayStatics_GetGameInstance_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetCurrentLevelName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemovePrefixString            (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UGameplayStatics::GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetCurrentLevelName"));

	UGameplayStatics_GetCurrentLevelName_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bRemovePrefixString = bRemovePrefixString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAudioTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetAudioTimeSeconds(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAudioTimeSeconds"));

	UGameplayStatics_GetAudioTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAllActorsWithInterface
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsWithInterface(UObject* WorldContextObject, UClass* Interface, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsWithInterface"));

	UGameplayStatics_GetAllActorsWithInterface_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetAllActorsOfClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsOfClass(UObject* WorldContextObject, UClass* ActorClass, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAllActorsOfClass"));

	UGameplayStatics_GetAllActorsOfClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetActorArrayBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<AActor*>                Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Center                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetActorArrayBounds(TArray<AActor*> Actors, bool bOnlyCollidingComponents, FVector* Center, FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayBounds"));

	UGameplayStatics_GetActorArrayBounds_Params params;
	params.Actors = Actors;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Center != nullptr)
		*Center = params.Center;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.GameplayStatics.GetActorArrayAverageLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<AActor*>                Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UGameplayStatics::GetActorArrayAverageLocation(TArray<AActor*> Actors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetActorArrayAverageLocation"));

	UGameplayStatics_GetActorArrayAverageLocation_Params params;
	params.Actors = Actors;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAccurateRealTime
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          PartialSeconds                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetAccurateRealTime(UObject* WorldContextObject, int* Seconds, float* PartialSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.GetAccurateRealTime"));

	UGameplayStatics_GetAccurateRealTime_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (PartialSeconds != nullptr)
		*PartialSeconds = params.PartialSeconds;
}


// Function Engine.GameplayStatics.FlushLevelStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::FlushLevelStreaming(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FlushLevelStreaming"));

	UGameplayStatics_FlushLevelStreaming_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.FinishSpawningActor
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// AActor*                        Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UGameplayStatics::FinishSpawningActor(AActor* Actor, const FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.FinishSpawningActor"));

	UGameplayStatics_FinishSpawningActor_Params params;
	params.Actor = Actor;
	params.SpawnTransform = SpawnTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.EnableLiveStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::EnableLiveStreaming(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.EnableLiveStreaming"));

	UGameplayStatics_EnableLiveStreaming_Params params;
	params.Enable = Enable;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.DoesSaveGameExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DoesSaveGameExist(const FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DoesSaveGameExist"));

	UGameplayStatics_DoesSaveGameExist_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeprojectScreenToWorld
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// APlayerController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPosition                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DeprojectScreenToWorld(APlayerController* Player, const FVector2D& ScreenPosition, FVector* WorldPosition, FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeprojectScreenToWorld"));

	UGameplayStatics_DeprojectScreenToWorld_Params params;
	params.Player = Player;
	params.ScreenPosition = ScreenPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeleteGameInSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DeleteGameInSlot(const FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeleteGameInSlot"));

	UGameplayStatics_DeleteGameInSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeactivateReverbEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          TagName                        (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::DeactivateReverbEffect(UObject* WorldContextObject, const FName& TagName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.DeactivateReverbEffect"));

	UGameplayStatics_DeactivateReverbEffect_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TagName = TagName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UBlueprint*                    SaveGameBlueprint              (Parm, ZeroConstructor, IsPlainOldData)
// USaveGame*                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USaveGame* UGameplayStatics::CreateSaveGameObjectFromBlueprint(UBlueprint* SaveGameBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint"));

	UGameplayStatics_CreateSaveGameObjectFromBlueprint_Params params;
	params.SaveGameBlueprint = SaveGameBlueprint;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreateSaveGameObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UClass*                        SaveGameClass                  (Parm, ZeroConstructor, IsPlainOldData)
// USaveGame*                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USaveGame* UGameplayStatics::CreateSaveGameObject(UClass* SaveGameClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreateSaveGameObject"));

	UGameplayStatics_CreateSaveGameObject_Params params;
	params.SaveGameClass = SaveGameClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreatePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSpawnPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// APlayerController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

APlayerController* UGameplayStatics::CreatePlayer(UObject* WorldContextObject, int ControllerId, bool bSpawnPawn)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.CreatePlayer"));

	UGameplayStatics_CreatePlayer_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;
	params.bSpawnPawn = bSpawnPawn;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ClearSoundMixModifiers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ClearSoundMixModifiers(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ClearSoundMixModifiers"));

	UGameplayStatics_ClearSoundMixModifiers_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.BreakHitResult
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FHitResult                     Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bBlockingHit                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bInitialOverlap                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        ImpactPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        ImpactNormal                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// UPhysicalMaterial*             PhysMat                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// AActor*                        HitActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// UPrimitiveComponent*           HitComponent                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FName                          HitBoneName                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            HitItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        TraceStart                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        TraceEnd                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::BreakHitResult(const FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, FVector* Location, FVector* ImpactPoint, FVector* Normal, FVector* ImpactNormal, UPhysicalMaterial** PhysMat, AActor** HitActor, UPrimitiveComponent** HitComponent, FName* HitBoneName, int* HitItem, FVector* TraceStart, FVector* TraceEnd)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BreakHitResult"));

	UGameplayStatics_BreakHitResult_Params params;
	params.Hit = Hit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (bBlockingHit != nullptr)
		*bBlockingHit = params.bBlockingHit;
	if (bInitialOverlap != nullptr)
		*bInitialOverlap = params.bInitialOverlap;
	if (Time != nullptr)
		*Time = params.Time;
	if (Location != nullptr)
		*Location = params.Location;
	if (ImpactPoint != nullptr)
		*ImpactPoint = params.ImpactPoint;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (ImpactNormal != nullptr)
		*ImpactNormal = params.ImpactNormal;
	if (PhysMat != nullptr)
		*PhysMat = params.PhysMat;
	if (HitActor != nullptr)
		*HitActor = params.HitActor;
	if (HitComponent != nullptr)
		*HitComponent = params.HitComponent;
	if (HitBoneName != nullptr)
		*HitBoneName = params.HitBoneName;
	if (HitItem != nullptr)
		*HitItem = params.HitItem;
	if (TraceStart != nullptr)
		*TraceStart = params.TraceStart;
	if (TraceEnd != nullptr)
		*TraceEnd = params.TraceEnd;
}


// Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        TossVelocity                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        StartLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        EndLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LaunchSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          CollisionRadius                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFavorHighArc                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, const FVector& StartLocation, const FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity"));

	UGameplayStatics_BlueprintSuggestProjectileVelocity_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.LaunchSpeed = LaunchSpeed;
	params.OverrideGravityZ = OverrideGravityZ;
	params.TraceOption = TraceOption;
	params.CollisionRadius = CollisionRadius;
	params.bFavorHighArc = bFavorHighArc;
	params.bDrawDebug = bDrawDebug;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromClass
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UGameplayStatics::BeginSpawningActorFromClass(UObject* WorldContextObject, UClass* ActorClass, const FTransform& SpawnTransform, bool bNoCollisionFail, AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromClass"));

	UGameplayStatics_BeginSpawningActorFromClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;
	params.Owner = Owner;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UBlueprint*                    Blueprint                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UGameplayStatics::BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, const FTransform& SpawnTransform, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint"));

	UGameplayStatics_BeginSpawningActorFromBlueprint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Blueprint = Blueprint;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride      (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

AActor* UGameplayStatics::BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, UClass* ActorClass, const FTransform& SpawnTransform, TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass"));

	UGameplayStatics_BeginDeferredActorSpawnFromClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.CollisionHandlingOverride = CollisionHandlingOverride;
	params.Owner = Owner;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AreAnyListenersWithinRange
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaximumRange                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::AreAnyListenersWithinRange(UObject* WorldContextObject, const FVector& Location, float MaximumRange)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.AreAnyListenersWithinRange"));

	UGameplayStatics_AreAnyListenersWithinRange_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.MaximumRange = MaximumRange;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinimumDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageInnerRadius              (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageOuterRadius              (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageFalloff                  (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff"));

	UGameplayStatics_ApplyRadialDamageWithFalloff_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.MinimumDamage = MinimumDamage;
	params.Origin = Origin;
	params.DamageInnerRadius = DamageInnerRadius;
	params.DamageOuterRadius = DamageOuterRadius;
	params.DamageFalloff = DamageFalloff;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.DamagePreventionChannel = DamagePreventionChannel;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoFullDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, const FVector& Origin, float DamageRadius, UClass* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyRadialDamage"));

	UGameplayStatics_ApplyRadialDamage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyPointDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// AActor*                        DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HitFromDirection               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FHitResult                     HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// AController*                   EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyPointDamage(AActor* DamagedActor, float BaseDamage, const FVector& HitFromDirection, const FHitResult& HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyPointDamage"));

	UGameplayStatics_ApplyPointDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.HitFromDirection = HitFromDirection;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ApplyDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// AActor*                        DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// AController*                   EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// AActor*                        DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ApplyDamage"));

	UGameplayStatics_ApplyDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GameplayStatics.ActivateReverbEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UReverbEffect*                 ReverbEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// FName                          TagName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, const FName& TagName, float Priority, float Volume, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GameplayStatics.ActivateReverbEffect"));

	UGameplayStatics_ActivateReverbEffect_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ReverbEffect = ReverbEffect;
	params.TagName = TagName;
	params.Priority = Priority;
	params.Volume = Volume;
	params.FadeTime = FadeTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.GPUSortTestLibrary.ValidateGPUTransposeForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// UGPUSortDestData*              TestData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGPUSortTestLibrary::ValidateGPUTransposeForSize(UObject* WorldContext, UGPUSortDestData* TestData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.ValidateGPUTransposeForSize"));

	UGPUSortTestLibrary_ValidateGPUTransposeForSize_Params params;
	params.WorldContext = WorldContext;
	params.TestData = TestData;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.ValidateGPUSortForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// UGPUSortDestData*              TestData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGPUSortTestLibrary::ValidateGPUSortForSize(UObject* WorldContext, UGPUSortDestData* TestData)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.ValidateGPUSortForSize"));

	UGPUSortTestLibrary_ValidateGPUSortForSize_Params params;
	params.WorldContext = WorldContext;
	params.TestData = TestData;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.TestGPUTransposeForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)
// UGPUSortDestData*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UGPUSortDestData* UGPUSortTestLibrary::TestGPUTransposeForSize(UObject* WorldContext, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.TestGPUTransposeForSize"));

	UGPUSortTestLibrary_TestGPUTransposeForSize_Params params;
	params.WorldContext = WorldContext;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.GPUSortTestLibrary.TestGPUSortForSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)
// UGPUSortDestData*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UGPUSortDestData* UGPUSortTestLibrary::TestGPUSortForSize(UObject* WorldContext, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.GPUSortTestLibrary.TestGPUSortForSize"));

	UGPUSortTestLibrary_TestGPUSortForSize_Params params;
	params.WorldContext = WorldContext;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.SetArrayPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::SetArrayPropertyByName(UObject* Object, const FName& PropertyName, TArray<int> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.SetArrayPropertyByName"));

	UKismetArrayLibrary_SetArrayPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.FilterArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<AActor*>                TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                FilteredArray                  (Parm, OutParm, ZeroConstructor)

void UKismetArrayLibrary::FilterArray(TArray<AActor*> TargetArray, UClass* FilterClass, TArray<AActor*>* FilteredArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.FilterArray"));

	UKismetArrayLibrary_FilterArray_Params params;
	params.TargetArray = TargetArray;
	params.FilterClass = FilterClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (FilteredArray != nullptr)
		*FilteredArray = params.FilteredArray;
}


// Function Engine.KismetArrayLibrary.Array_Shuffle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Shuffle(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Shuffle"));

	UKismetArrayLibrary_Array_Shuffle_Params params;
	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Set
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bSizeToFit                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Set"));

	UKismetArrayLibrary_Array_Set_Params params;
	params.TargetArray = TargetArray;
	params.Index = Index;
	params.Item = Item;
	params.bSizeToFit = bSizeToFit;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Resize
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Resize(TArray<int> TargetArray, int Size)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Resize"));

	UKismetArrayLibrary_Array_Resize_Params params;
	params.TargetArray = TargetArray;
	params.Size = Size;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_RemoveItem
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_RemoveItem(TArray<int> TargetArray, int Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_RemoveItem"));

	UKismetArrayLibrary_Array_RemoveItem_Params params;
	params.TargetArray = TargetArray;
	params.Item = Item;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Remove
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexToRemove                  (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Remove(TArray<int> TargetArray, int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Remove"));

	UKismetArrayLibrary_Array_Remove_Params params;
	params.TargetArray = TargetArray;
	params.IndexToRemove = IndexToRemove;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Length
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Length(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Length"));

	UKismetArrayLibrary_Array_Length_Params params;
	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_LastIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_LastIndex(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_LastIndex"));

	UKismetArrayLibrary_Array_LastIndex_Params params;
	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Insert
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Insert(TArray<int> TargetArray, int NewItem, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Insert"));

	UKismetArrayLibrary_Array_Insert_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Get
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Get(TArray<int> TargetArray, int Index, int* Item)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Get"));

	UKismetArrayLibrary_Array_Get_Params params;
	params.TargetArray = TargetArray;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Item != nullptr)
		*Item = params.Item;
}


// Function Engine.KismetArrayLibrary.Array_Find
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Find(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Find"));

	UKismetArrayLibrary_Array_Find_Params params;
	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Contains
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_Contains(TArray<int> TargetArray, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Contains"));

	UKismetArrayLibrary_Array_Contains_Params params;
	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Clear
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Clear(TArray<int> TargetArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Clear"));

	UKismetArrayLibrary_Array_Clear_Params params;
	params.TargetArray = TargetArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_Append
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int>                    SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::Array_Append(TArray<int> TargetArray, TArray<int> SourceArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Append"));

	UKismetArrayLibrary_Array_Append_Params params;
	params.TargetArray = TargetArray;
	params.SourceArray = SourceArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetArrayLibrary.Array_AddUnique
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_AddUnique(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_AddUnique"));

	UKismetArrayLibrary_Array_AddUnique_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Add
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Add(TArray<int> TargetArray, int NewItem)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetArrayLibrary.Array_Add"));

	UKismetArrayLibrary_Array_Add_Params params;
	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Parse_StringToGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        GuidString                     (Parm, ZeroConstructor)
// FGuid                          OutGuid                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Success                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetGuidLibrary::Parse_StringToGuid(const FString& GuidString, FGuid* OutGuid, bool* Success)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Parse_StringToGuid"));

	UKismetGuidLibrary_Parse_StringToGuid_Params params;
	params.GuidString = GuidString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutGuid != nullptr)
		*OutGuid = params.OutGuid;
	if (Success != nullptr)
		*Success = params.Success;
}


// Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FGuid                          A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FGuid                          B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::NotEqual_GuidGuid(const FGuid& A, const FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NotEqual_GuidGuid"));

	UKismetGuidLibrary_NotEqual_GuidGuid_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.NewGuid
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FGuid                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FGuid UKismetGuidLibrary::NewGuid()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.NewGuid"));

	UKismetGuidLibrary_NewGuid_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.IsValid_Guid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FGuid                          InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::IsValid_Guid(const FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.IsValid_Guid"));

	UKismetGuidLibrary_IsValid_Guid_Params params;
	params.InGuid = InGuid;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Invalidate_Guid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FGuid                          InGuid                         (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetGuidLibrary::Invalidate_Guid(FGuid* InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Invalidate_Guid"));

	UKismetGuidLibrary_Invalidate_Guid_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InGuid != nullptr)
		*InGuid = params.InGuid;
}


// Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FGuid                          A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FGuid                          B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetGuidLibrary::EqualEqual_GuidGuid(const FGuid& A, const FGuid& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid"));

	UKismetGuidLibrary_EqualEqual_GuidGuid_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetGuidLibrary.Conv_GuidToString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FGuid                          InGuid                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetGuidLibrary::Conv_GuidToString(const FGuid& InGuid)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetGuidLibrary.Conv_GuidToString"));

	UKismetGuidLibrary_Conv_GuidToString_Params params;
	params.InGuid = InGuid;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsTouchEvent(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent"));

	UKismetInputLibrary_PointerEvent_IsTouchEvent_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FKey                           MouseButton                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsMouseButtonDown(const FPointerEvent& Input, const FKey& MouseButton)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown"));

	UKismetInputLibrary_PointerEvent_IsMouseButtonDown_Params params;
	params.Input = Input;
	params.MouseButton = MouseButton;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::PointerEvent_GetWheelDelta(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta"));

	UKismetInputLibrary_PointerEvent_GetWheelDelta_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetUserIndex(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex"));

	UKismetInputLibrary_PointerEvent_GetUserIndex_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetTouchpadIndex(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex"));

	UKismetInputLibrary_PointerEvent_GetTouchpadIndex_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition"));

	UKismetInputLibrary_PointerEvent_GetScreenSpacePosition_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetPointerIndex(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex"));

	UKismetInputLibrary_PointerEvent_GetPointerIndex_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition"));

	UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetInputLibrary::PointerEvent_GetGestureDelta(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta"));

	UKismetInputLibrary_PointerEvent_GetGestureDelta_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FKey                           ReturnValue                    (Parm, OutParm, ReturnParm)

FKey UKismetInputLibrary::PointerEvent_GetEffectingButton(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton"));

	UKismetInputLibrary_PointerEvent_GetEffectingButton_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FPointerEvent                  Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetInputLibrary::PointerEvent_GetCursorDelta(const FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta"));

	UKismetInputLibrary_PointerEvent_GetCursorDelta_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsVectorAxis
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsVectorAxis(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsVectorAxis"));

	UKismetInputLibrary_Key_IsVectorAxis_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsMouseButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsMouseButton(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsMouseButton"));

	UKismetInputLibrary_Key_IsMouseButton_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsModifierKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsModifierKey(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsModifierKey"));

	UKismetInputLibrary_Key_IsModifierKey_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsKeyboardKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsKeyboardKey(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsKeyboardKey"));

	UKismetInputLibrary_Key_IsKeyboardKey_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsGamepadKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsGamepadKey(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsGamepadKey"));

	UKismetInputLibrary_Key_IsGamepadKey_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_IsFloatAxis
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::Key_IsFloatAxis(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_IsFloatAxis"));

	UKismetInputLibrary_Key_IsFloatAxis_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.Key_GetDisplayName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetInputLibrary::Key_GetDisplayName(const FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.Key_GetDisplayName"));

	UKismetInputLibrary_Key_GetDisplayName_Params params;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsShiftDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsShiftDown"));

	UKismetInputLibrary_InputEvent_IsShiftDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightShiftDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown"));

	UKismetInputLibrary_InputEvent_IsRightShiftDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightControlDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown"));

	UKismetInputLibrary_InputEvent_IsRightControlDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightCommandDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown"));

	UKismetInputLibrary_InputEvent_IsRightCommandDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightAltDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown"));

	UKismetInputLibrary_InputEvent_IsRightAltDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRepeat
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRepeat(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsRepeat"));

	UKismetInputLibrary_InputEvent_IsRepeat_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftShiftDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown"));

	UKismetInputLibrary_InputEvent_IsLeftShiftDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftControlDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown"));

	UKismetInputLibrary_InputEvent_IsLeftControlDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftCommandDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown"));

	UKismetInputLibrary_InputEvent_IsLeftCommandDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftAltDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown"));

	UKismetInputLibrary_InputEvent_IsLeftAltDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsControlDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsControlDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsControlDown"));

	UKismetInputLibrary_InputEvent_IsControlDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsCommandDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsCommandDown"));

	UKismetInputLibrary_InputEvent_IsCommandDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsAltDown
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FInputEvent                    Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsAltDown(const FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.InputEvent_IsAltDown"));

	UKismetInputLibrary_InputEvent_IsAltDown_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FKeyEvent                      Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::GetUserIndex(const FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetUserIndex"));

	UKismetInputLibrary_GetUserIndex_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetKey
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FKeyEvent                      Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FKey                           ReturnValue                    (Parm, OutParm, ReturnParm)

FKey UKismetInputLibrary::GetKey(const FKeyEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetKey"));

	UKismetInputLibrary_GetKey_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetAnalogValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FAnalogInputEvent              Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::GetAnalogValue(const FAnalogInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.GetAnalogValue"));

	UKismetInputLibrary_GetAnalogValue_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.EqualEqual_KeyKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FKey                           A                              (Parm)
// FKey                           B                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::EqualEqual_KeyKey(const FKey& A, const FKey& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.EqualEqual_KeyKey"));

	UKismetInputLibrary_EqualEqual_KeyKey_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FControllerEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::ControllerEvent_GetUserIndex(const FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex"));

	UKismetInputLibrary_ControllerEvent_GetUserIndex_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FControllerEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// FKey                           ReturnValue                    (Parm, OutParm, ReturnParm)

FKey UKismetInputLibrary::ControllerEvent_GetEffectingButton(const FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton"));

	UKismetInputLibrary_ControllerEvent_GetEffectingButton_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FControllerEvent               Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::ControllerEvent_GetAnalogValue(const FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue"));

	UKismetInputLibrary_ControllerEvent_GetAnalogValue_Params params;
	params.Input = Input;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.CalibrateTilt
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetInputLibrary::CalibrateTilt()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetInputLibrary.CalibrateTilt"));

	UKismetInputLibrary_CalibrateTilt_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.SetVectorParameterValue
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialParameterCollection*  Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ParameterValue                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetMaterialLibrary::SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName, const FLinearColor& ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetVectorParameterValue"));

	UKismetMaterialLibrary_SetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.SetScalarParameterValue
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialParameterCollection*  Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ParameterValue                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMaterialLibrary::SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName, float ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.SetScalarParameterValue"));

	UKismetMaterialLibrary_SetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMaterialLibrary.GetVectorParameterValue
// (Final, RequiredAPI, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialParameterCollection*  Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMaterialLibrary::GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetVectorParameterValue"));

	UKismetMaterialLibrary_GetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.GetScalarParameterValue
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialParameterCollection*  Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMaterialLibrary::GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, const FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.GetScalarParameterValue"));

	UKismetMaterialLibrary_GetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInterface*            Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstanceDynamic*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaterialInstanceDynamic* UKismetMaterialLibrary::CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance"));

	UKismetMaterialLibrary_CreateDynamicMaterialInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Parent = Parent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Xor_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Xor_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Xor_IntInt"));

	UKismetMathLibrary_Xor_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeSquared
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSizeSquared(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSizeSquared"));

	UKismetMathLibrary_VSizeSquared_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2DSquared
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize2DSquared(const FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2DSquared"));

	UKismetMathLibrary_VSize2DSquared_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize2D(const FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize2D"));

	UKismetMathLibrary_VSize2D_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VSize"));

	UKismetMathLibrary_VSize_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::VLerp(const FVector& A, const FVector& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VLerp"));

	UKismetMathLibrary_VLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::VInterpTo_Constant(const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo_Constant"));

	UKismetMathLibrary_VInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::VInterpTo(const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VInterpTo"));

	UKismetMathLibrary_VInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Vector2DInterpTo_Constant(const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant"));

	UKismetMathLibrary_Vector2DInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Vector2DInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Vector2DInterpTo(const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Vector2DInterpTo"));

	UKismetMathLibrary_Vector2DInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VEase
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::VEase(const FVector& A, const FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.VEase"));

	UKismetMathLibrary_VEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.UtcNow
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::UtcNow()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.UtcNow"));

	UKismetMathLibrary_UtcNow_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::TransformLocation(const FTransform& T, const FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformLocation"));

	UKismetMathLibrary_TransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformDirection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector                        Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::TransformDirection(const FTransform& T, const FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TransformDirection"));

	UKismetMathLibrary_TransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Today
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::Today()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Today"));

	UKismetMathLibrary_Today_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TLerp
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::TLerp(const FTransform& A, const FTransform& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TLerp"));

	UKismetMathLibrary_TLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TInterpTo
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     Current                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::TInterpTo(const FTransform& Current, const FTransform& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TInterpTo"));

	UKismetMathLibrary_TInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanZeroValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::TimespanZeroValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanZeroValue"));

	UKismetMathLibrary_TimespanZeroValue_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanRatio
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::TimespanRatio(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanRatio"));

	UKismetMathLibrary_TimespanRatio_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMinValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::TimespanMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMinValue"));

	UKismetMathLibrary_TimespanMinValue_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMaxValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::TimespanMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanMaxValue"));

	UKismetMathLibrary_TimespanMaxValue_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanFromString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        TimespanString                 (Parm, ZeroConstructor)
// FTimespan                      Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::TimespanFromString(const FString& TimespanString, FTimespan* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TimespanFromString"));

	UKismetMathLibrary_TimespanFromString_Params params;
	params.TimespanString = TimespanString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TEase
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::TEase(const FTransform& A, const FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.TEase"));

	UKismetMathLibrary_TEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Tan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Tan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Tan"));

	UKismetMathLibrary_Tan_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Subtract_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorVector"));

	UKismetMathLibrary_Subtract_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Subtract_VectorInt(const FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorInt"));

	UKismetMathLibrary_Subtract_VectorInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Subtract_VectorFloat(const FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_VectorFloat"));

	UKismetMathLibrary_Subtract_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(const FVector2D& A, const FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D"));

	UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(const FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat"));

	UKismetMathLibrary_Subtract_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan"));

	UKismetMathLibrary_Subtract_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Subtract_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_IntInt"));

	UKismetMathLibrary_Subtract_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Subtract_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_FloatFloat"));

	UKismetMathLibrary_Subtract_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(const FDateTime& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan"));

	UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::Subtract_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime"));

	UKismetMathLibrary_Subtract_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Subtract_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Subtract_ByteByte"));

	UKismetMathLibrary_Subtract_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Square
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Square(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Square"));

	UKismetMathLibrary_Square_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sqrt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sqrt(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sqrt"));

	UKismetMathLibrary_Sqrt_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Sin"));

	UKismetMathLibrary_Sin_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SignOfInteger(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfInteger"));

	UKismetMathLibrary_SignOfInteger_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SignOfFloat(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SignOfFloat"));

	UKismetMathLibrary_SignOfFloat_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SetRandomStreamSeed
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRandomStream                  Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewSeed                        (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::SetRandomStreamSeed(int NewSeed, FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SetRandomStreamSeed"));

	UKismetMathLibrary_SetRandomStreamSeed_Params params;
	params.NewSeed = NewSeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.SelectVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::SelectVector(const FVector& A, const FVector& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectVector"));

	UKismetMathLibrary_SelectVector_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::SelectTransform(const FTransform& A, const FTransform& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectTransform"));

	UKismetMathLibrary_SelectTransform_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetMathLibrary::SelectString(const FString& A, const FString& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectString"));

	UKismetMathLibrary_SelectString_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::SelectRotator(const FRotator& A, const FRotator& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectRotator"));

	UKismetMathLibrary_SelectRotator_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UObject* UKismetMathLibrary::SelectObject(UObject* A, UObject* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectObject"));

	UKismetMathLibrary_SelectObject_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SelectInt(int A, int B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectInt"));

	UKismetMathLibrary_SelectInt_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectFloat"));

	UKismetMathLibrary_SelectFloat_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::SelectColor(const FLinearColor& A, const FLinearColor& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectColor"));

	UKismetMathLibrary_SelectColor_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UClass* UKismetMathLibrary::SelectClass(UClass* A, UClass* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SelectClass"));

	UKismetMathLibrary_SelectClass_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SeedRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRandomStream                  Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::SeedRandomStream(FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.SeedRandomStream"));

	UKismetMathLibrary_SeedRandomStream_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.Round
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Round(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Round"));

	UKismetMathLibrary_Round_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(const FVector& Axis, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle"));

	UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;
	params.Axis = Axis;
	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotateAngleAxis
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleDeg                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RotateAngleAxis(const FVector& InVect, float AngleDeg, const FVector& Axis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RotateAngleAxis"));

	UKismetMathLibrary_RotateAngleAxis_Params params;
	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.Axis = Axis;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RLerp(const FRotator& A, const FRotator& B, float Alpha, bool bShortestPath)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RLerp"));

	UKismetMathLibrary_RLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_Constant
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RInterpTo_Constant(const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo_Constant"));

	UKismetMathLibrary_RInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RInterpTo(const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RInterpTo"));

	UKismetMathLibrary_RInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RGBToHSV_Vector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   RGB                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   HSV                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV_Vector(const FLinearColor& RGB, FLinearColor* HSV)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV_Vector"));

	UKismetMathLibrary_RGBToHSV_Vector_Params params;
	params.RGB = RGB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (HSV != nullptr)
		*HSV = params.HSV;
}


// Function Engine.KismetMathLibrary.RGBToHSV
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          H                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV(const FLinearColor& InColor, float* H, float* S, float* V, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RGBToHSV"));

	UKismetMathLibrary_RGBToHSV_Params params;
	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (H != nullptr)
		*H = params.H;
	if (S != nullptr)
		*S = params.S;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.ResetRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::ResetRandomStream(const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ResetRandomStream"));

	UKismetMathLibrary_ResetRandomStream_Params params;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetMathLibrary.REase
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::REase(const FRotator& A, const FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.REase"));

	UKismetMathLibrary_REase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        ConeDir                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxYawInDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxPitchInDegrees              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RandomUnitVectorInConeWithYawAndPitch(const FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch"));

	UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch_Params params;
	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInCone
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        ConeDir                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ConeHalfAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RandomUnitVectorInCone(const FVector& ConeDir, float ConeHalfAngle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorInCone"));

	UKismetMathLibrary_RandomUnitVectorInCone_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngle = ConeHalfAngle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RandomUnitVectorFromStream(const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream"));

	UKismetMathLibrary_RandomUnitVectorFromStream_Params params;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RandomUnitVector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomUnitVector"));

	UKismetMathLibrary_RandomUnitVector_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotatorFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotatorFromStream"));

	UKismetMathLibrary_RandomRotatorFromStream_Params params;
	params.bRoll = bRoll;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::RandomRotator(bool bRoll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomRotator"));

	UKismetMathLibrary_RandomRotator_Params params;
	params.bRoll = bRoll;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomPointInBoundingBox
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        BoxExtent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::RandomPointInBoundingBox(const FVector& Origin, const FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomPointInBoundingBox"));

	UKismetMathLibrary_RandomPointInBoundingBox_Params params;
	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRangeFromStream(int Min, int Max, const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream"));

	UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRange(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerInRange"));

	UKismetMathLibrary_RandomIntegerInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerFromStream(int Max, const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomIntegerFromStream"));

	UKismetMathLibrary_RandomIntegerFromStream_Params params;
	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomInteger(int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomInteger"));

	UKismetMathLibrary_RandomInteger_Params params;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream"));

	UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRange(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatInRange"));

	UKismetMathLibrary_RandomFloatInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatFromStream(const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloatFromStream"));

	UKismetMathLibrary_RandomFloatFromStream_Params params;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloat()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomFloat"));

	UKismetMathLibrary_RandomFloat_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolFromStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRandomStream                  Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBoolFromStream(const FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBoolFromStream"));

	UKismetMathLibrary_RandomBoolFromStream_Params params;
	params.Stream = Stream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBool()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RandomBool"));

	UKismetMathLibrary_RandomBool_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RadiansToDegrees
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RadiansToDegrees(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.RadiansToDegrees"));

	UKismetMathLibrary_RadiansToDegrees_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        V                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Target                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::ProjectVectorOnToVector(const FVector& V, const FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToVector"));

	UKismetMathLibrary_ProjectVectorOnToVector_Params params;
	params.V = V;
	params.Target = Target;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        V                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::ProjectVectorOnToPlane(const FVector& V, const FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane"));

	UKismetMathLibrary_ProjectVectorOnToPlane_Params params;
	params.V = V;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectPointOnToPlane
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Point                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PlaneBase                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::ProjectPointOnToPlane(const FVector& Point, const FVector& PlaneBase, const FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ProjectPointOnToPlane"));

	UKismetMathLibrary_ProjectPointOnToPlane_Params params;
	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.PointsAreCoplanar
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<FVector>                Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::PointsAreCoplanar(TArray<FVector> Points, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.PointsAreCoplanar"));

	UKismetMathLibrary_PointsAreCoplanar_Params params;
	params.Points = Points;
	params.Tolerance = Tolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Percent_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_IntInt"));

	UKismetMathLibrary_Percent_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Percent_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_FloatFloat"));

	UKismetMathLibrary_Percent_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Percent_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Percent_ByteByte"));

	UKismetMathLibrary_Percent_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Or_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Or_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Or_IntInt"));

	UKismetMathLibrary_Or_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Now
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::Now()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Now"));

	UKismetMathLibrary_Now_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_VectorVector(const FVector& A, const FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_VectorVector"));

	UKismetMathLibrary_NotEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan"));

	UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_RotatorRotator(const FRotator& A, const FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator"));

	UKismetMathLibrary_NotEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ObjectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ObjectObject(UObject* A, UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ObjectObject"));

	UKismetMathLibrary_NotEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_NameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// FName                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_NameName(const FName& A, const FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_NameName"));

	UKismetMathLibrary_NotEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_IntInt"));

	UKismetMathLibrary_NotEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_FloatFloat"));

	UKismetMathLibrary_NotEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime"));

	UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ClassClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ClassClass(UClass* A, UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ClassClass"));

	UKismetMathLibrary_NotEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_ByteByte"));

	UKismetMathLibrary_NotEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_BoolBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NotEqual_BoolBool"));

	UKismetMathLibrary_NotEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_PreBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Not_PreBool(bool A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Not_PreBool"));

	UKismetMathLibrary_Not_PreBool_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeToRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMin                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMax                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeToRange"));

	UKismetMathLibrary_NormalizeToRange_Params params;
	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizedDeltaRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::NormalizedDeltaRotator(const FRotator& A, const FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizedDeltaRotator"));

	UKismetMathLibrary_NormalizedDeltaRotator_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::NormalizeAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NormalizeAxis"));

	UKismetMathLibrary_NormalizeAxis_Params params;
	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Normal2D(const FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal2D"));

	UKismetMathLibrary_Normal2D_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Normal(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Normal"));

	UKismetMathLibrary_Normal_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::NegateVector(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateVector"));

	UKismetMathLibrary_NegateVector_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::NegateRotator(const FRotator& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NegateRotator"));

	UKismetMathLibrary_NegateRotator_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LocationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale3DTolerance               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_TransformTransform(const FTransform& A, const FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform"));

	UKismetMathLibrary_NearlyEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;
	params.LocationTolerance = LocationTolerance;
	params.RotationTolerance = RotationTolerance;
	params.Scale3DTolerance = Scale3DTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat"));

	UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Base                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat"));

	UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;
	params.Base = Base;
	params.Exp = Exp;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyByPi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyByPi(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MultiplyByPi"));

	UKismetMathLibrary_MultiplyByPi_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Multiply_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorVector"));

	UKismetMathLibrary_Multiply_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Multiply_VectorInt(const FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorInt"));

	UKismetMathLibrary_Multiply_VectorInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Multiply_VectorFloat(const FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_VectorFloat"));

	UKismetMathLibrary_Multiply_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(const FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat"));

	UKismetMathLibrary_Multiply_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_TimespanFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::Multiply_TimespanFloat(const FTimespan& A, float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_TimespanFloat"));

	UKismetMathLibrary_Multiply_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::Multiply_RotatorInt(const FRotator& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorInt"));

	UKismetMathLibrary_Multiply_RotatorInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::Multiply_RotatorFloat(const FRotator& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_RotatorFloat"));

	UKismetMathLibrary_Multiply_RotatorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(const FLinearColor& A, const FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor"));

	UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(const FLinearColor& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat"));

	UKismetMathLibrary_Multiply_LinearColorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Multiply_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntInt"));

	UKismetMathLibrary_Multiply_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_IntFloat(int A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_IntFloat"));

	UKismetMathLibrary_Multiply_IntFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_FloatFloat"));

	UKismetMathLibrary_Multiply_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Multiply_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Multiply_ByteByte"));

	UKismetMathLibrary_Multiply_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MirrorVectorByNormal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        InNormal                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::MirrorVectorByNormal(const FVector& InVect, const FVector& InNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MirrorVectorByNormal"));

	UKismetMathLibrary_MirrorVectorByNormal_Params params;
	params.InVect = InVect;
	params.InNormal = InNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MinOfIntArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfIntArray"));

	UKismetMathLibrary_MinOfIntArray_Params params;
	params.IntArray = IntArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfFloatArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfFloatArray"));

	UKismetMathLibrary_MinOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfByteArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinOfByteArray"));

	UKismetMathLibrary_MinOfByteArray_Params params;
	params.ByteArray = ByteArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinimumAreaRectangle
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FVector>                InVerts                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FVector                        SampleSurfaceNormal            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        OutRectCenter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       OutRectRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthX                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthY                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinimumAreaRectangle(UObject* WorldContextObject, TArray<FVector> InVerts, const FVector& SampleSurfaceNormal, bool bDebugDraw, FVector* OutRectCenter, FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MinimumAreaRectangle"));

	UKismetMathLibrary_MinimumAreaRectangle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutRectCenter != nullptr)
		*OutRectCenter = params.OutRectCenter;
	if (OutRectRotation != nullptr)
		*OutRectRotation = params.OutRectRotation;
	if (OutSideLengthX != nullptr)
		*OutSideLengthX = params.OutSideLengthX;
	if (OutSideLengthY != nullptr)
		*OutSideLengthY = params.OutSideLengthY;
}


// Function Engine.KismetMathLibrary.Min
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Min(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Min"));

	UKismetMathLibrary_Min_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MaxOfIntArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfIntArray"));

	UKismetMathLibrary_MaxOfIntArray_Params params;
	params.IntArray = IntArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfFloatArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfFloatArray"));

	UKismetMathLibrary_MaxOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfByteArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MaxOfByteArray"));

	UKismetMathLibrary_MaxOfByteArray_Params params;
	params.ByteArray = ByteArray;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.Max
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Max(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Max"));

	UKismetMathLibrary_Max_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeUnclamped
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeUnclamped"));

	UKismetMathLibrary_MapRangeUnclamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRangeClamped
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MapRangeClamped"));

	UKismetMathLibrary_MapRangeClamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector2D"));

	UKismetMathLibrary_MakeVector2D_Params params;
	params.X = X;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeVector"));

	UKismetMathLibrary_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::MakeTransform(const FVector& Location, const FRotator& Rotation, const FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTransform"));

	UKismetMathLibrary_MakeTransform_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Days                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Hours                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Minutes                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeTimespan"));

	UKismetMathLibrary_MakeTimespan_Params params;
	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.Milliseconds = Milliseconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromZY(const FVector& Z, const FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZY"));

	UKismetMathLibrary_MakeRotFromZY_Params params;
	params.Z = Z;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromZX(const FVector& Z, const FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZX"));

	UKismetMathLibrary_MakeRotFromZX_Params params;
	params.Z = Z;
	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromZ(const FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromZ"));

	UKismetMathLibrary_MakeRotFromZ_Params params;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromYZ(const FVector& Y, const FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYZ"));

	UKismetMathLibrary_MakeRotFromYZ_Params params;
	params.Y = Y;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromYX(const FVector& Y, const FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromYX"));

	UKismetMathLibrary_MakeRotFromYX_Params params;
	params.Y = Y;
	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromY(const FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromY"));

	UKismetMathLibrary_MakeRotFromY_Params params;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromXZ(const FVector& X, const FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXZ"));

	UKismetMathLibrary_MakeRotFromXZ_Params params;
	params.X = X;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromXY(const FVector& X, const FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromXY"));

	UKismetMathLibrary_MakeRotFromXY_Params params;
	params.X = X;
	params.Y = Y;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotFromX(const FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotFromX"));

	UKismetMathLibrary_MakeRotFromX_Params params;
	params.X = X;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotator(float Roll, float Pitch, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotator"));

	UKismetMathLibrary_MakeRotator_Params params;
	params.Roll = Roll;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotationFromAxes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Right                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Up                             (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::MakeRotationFromAxes(const FVector& Forward, const FVector& Right, const FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRotationFromAxes"));

	UKismetMathLibrary_MakeRotationFromAxes_Params params;
	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRandomStream
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InitialSeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FRandomStream                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FRandomStream UKismetMathLibrary::MakeRandomStream(int InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeRandomStream"));

	UKismetMathLibrary_MakeRandomStream_Params params;
	params.InitialSeed = InitialSeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakePulsatingValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InCurrentTime                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPulsesPerSecond              (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPhase                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakePulsatingValue"));

	UKismetMathLibrary_MakePulsatingValue_Params params;
	params.InCurrentTime = InCurrentTime;
	params.InPulsesPerSecond = InPulsesPerSecond;
	params.InPhase = InPhase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Day                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Hour                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Minute                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Second                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Millisecond                    (Parm, ZeroConstructor, IsPlainOldData)
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeDateTime"));

	UKismetMathLibrary_MakeDateTime_Params params;
	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;
	params.Millisecond = Millisecond;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.MakeColor"));

	UKismetMathLibrary_MakeColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Loge
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Loge(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Loge"));

	UKismetMathLibrary_Loge_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const FVector& LineStart, const FVector& LineEnd, const FVector& PlaneOrigin, const FVector& PlaneNormal, float* T, FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal"));

	UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FPlane                         APlane                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection(const FVector& LineStart, const FVector& LineEnd, const FPlane& APlane, float* T, FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinePlaneIntersection"));

	UKismetMathLibrary_LinePlaneIntersection_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::LinearColorLerpUsingHSV(const FLinearColor& A, const FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV"));

	UKismetMathLibrary_LinearColorLerpUsingHSV_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::LinearColorLerp(const FLinearColor& A, const FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LinearColorLerp"));

	UKismetMathLibrary_LinearColorLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessLess_VectorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::LessLess_VectorRotator(const FVector& A, const FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessLess_VectorRotator"));

	UKismetMathLibrary_LessLess_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan"));

	UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_IntInt"));

	UKismetMathLibrary_LessEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_FloatFloat"));

	UKismetMathLibrary_LessEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime"));

	UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.LessEqual_ByteByte"));

	UKismetMathLibrary_LessEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_TimespanTimespan"));

	UKismetMathLibrary_Less_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_IntInt"));

	UKismetMathLibrary_Less_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_FloatFloat"));

	UKismetMathLibrary_Less_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_DateTimeDateTime"));

	UKismetMathLibrary_Less_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Less_ByteByte"));

	UKismetMathLibrary_Less_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Lerp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Lerp(float A, float B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Lerp"));

	UKismetMathLibrary_Lerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsPointInBox
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FBox                           Box                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsPointInBox(const FVector& Point, const FBox& Box)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsPointInBox"));

	UKismetMathLibrary_IsPointInBox_Params params;
	params.Point = Point;
	params.Box = Box;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsMorning
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsMorning(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsMorning"));

	UKismetMathLibrary_IsMorning_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsLeapYear
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsLeapYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsLeapYear"));

	UKismetMathLibrary_IsLeapYear_Params params;
	params.Year = Year;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsAfternoon
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsAfternoon(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.IsAfternoon"));

	UKismetMathLibrary_IsAfternoon_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InvertTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::InvertTransform(const FTransform& T)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InvertTransform"));

	UKismetMathLibrary_InvertTransform_Params params;
	params.T = T;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::InverseTransformLocation(const FTransform& T, const FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformLocation"));

	UKismetMathLibrary_InverseTransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformDirection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector                        Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::InverseTransformDirection(const FTransform& T, const FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseTransformDirection"));

	UKismetMathLibrary_InverseTransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseLerp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::InverseLerp(float A, float B, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InverseLerp"));

	UKismetMathLibrary_InverseLerp_Params params;
	params.A = A;
	params.B = B;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.InRange_FloatFloat"));

	UKismetMathLibrary_InRange_FloatFloat_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Hypotenuse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Width                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Hypotenuse(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Hypotenuse"));

	UKismetMathLibrary_Hypotenuse_Params params;
	params.Width = Width;
	params.Height = Height;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.HSVToRGB_Vector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   HSV                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RGB                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::HSVToRGB_Vector(const FLinearColor& HSV, FLinearColor* RGB)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB_Vector"));

	UKismetMathLibrary_HSVToRGB_Vector_Params params;
	params.HSV = HSV;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (RGB != nullptr)
		*RGB = params.RGB;
}


// Function Engine.KismetMathLibrary.HSVToRGB
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          H                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.HSVToRGB"));

	UKismetMathLibrary_HSVToRGB_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GridSnap_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          GridSize                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GridSnap_Float(float Location, float GridSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GridSnap_Float"));

	UKismetMathLibrary_GridSnap_Float_Params params;
	params.Location = Location;
	params.GridSize = GridSize;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GreaterGreater_VectorRotator(const FVector& A, const FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator"));

	UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan"));

	UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_IntInt"));

	UKismetMathLibrary_GreaterEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat"));

	UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime"));

	UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte"));

	UKismetMathLibrary_GreaterEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_TimespanTimespan"));

	UKismetMathLibrary_Greater_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_IntInt"));

	UKismetMathLibrary_Greater_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_FloatFloat"));

	UKismetMathLibrary_Greater_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime"));

	UKismetMathLibrary_Greater_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Greater_ByteByte"));

	UKismetMathLibrary_Greater_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYear
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetYear(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYear"));

	UKismetMathLibrary_GetYear_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYawPitchFromVector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::GetYawPitchFromVector(const FVector& InVec, float* Yaw, float* Pitch)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYawPitchFromVector"));

	UKismetMathLibrary_GetYawPitchFromVector_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
}


// Function Engine.KismetMathLibrary.GetYawFromVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetYawFromVector(const FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetYawFromVector"));

	UKismetMathLibrary_GetYawFromVector_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetVectorArrayAverage
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<FVector>                Vectors                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GetVectorArrayAverage(TArray<FVector> Vectors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetVectorArrayAverage"));

	UKismetMathLibrary_GetVectorArrayAverage_Params params;
	params.Vectors = Vectors;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetUpVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GetUpVector(const FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetUpVector"));

	UKismetMathLibrary_GetUpVector_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalSeconds(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalSeconds"));

	UKismetMathLibrary_GetTotalSeconds_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMinutes(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMinutes"));

	UKismetMathLibrary_GetTotalMinutes_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMilliseconds(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalMilliseconds"));

	UKismetMathLibrary_GetTotalMilliseconds_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalHours(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalHours"));

	UKismetMathLibrary_GetTotalHours_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalDays(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTotalDays"));

	UKismetMathLibrary_GetTotalDays_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTimeOfDay
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::GetTimeOfDay(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetTimeOfDay"));

	UKismetMathLibrary_GetTimeOfDay_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSeconds(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSeconds"));

	UKismetMathLibrary_GetSeconds_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSecond
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSecond(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetSecond"));

	UKismetMathLibrary_GetSecond_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetRightVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GetRightVector(const FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetRightVector"));

	UKismetMathLibrary_GetRightVector_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPI
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetPI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetPI"));

	UKismetMathLibrary_GetPI_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMonth
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMonth(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMonth"));

	UKismetMathLibrary_GetMonth_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinutes(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinutes"));

	UKismetMathLibrary_GetMinutes_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinute
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinute(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinute"));

	UKismetMathLibrary_GetMinute_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinElement
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMinElement(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMinElement"));

	UKismetMathLibrary_GetMinElement_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMilliseconds(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMilliseconds"));

	UKismetMathLibrary_GetMilliseconds_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMillisecond
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMillisecond(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMillisecond"));

	UKismetMathLibrary_GetMillisecond_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMaxElement
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMaxElement(const FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetMaxElement"));

	UKismetMathLibrary_GetMaxElement_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHours(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHours"));

	UKismetMathLibrary_GetHours_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour12
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour12(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour12"));

	UKismetMathLibrary_GetHour12_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetHour"));

	UKismetMathLibrary_GetHour_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetForwardVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GetForwardVector(const FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetForwardVector"));

	UKismetMathLibrary_GetForwardVector_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDuration
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::GetDuration(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDuration"));

	UKismetMathLibrary_GetDuration_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDirectionVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        From                           (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        To                             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::GetDirectionVector(const FVector& From, const FVector& To)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDirectionVector"));

	UKismetMathLibrary_GetDirectionVector_Params params;
	params.From = From;
	params.To = To;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDays(const FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDays"));

	UKismetMathLibrary_GetDays_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDayOfYear
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDayOfYear(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDayOfYear"));

	UKismetMathLibrary_GetDayOfYear_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDay
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDay(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDay"));

	UKismetMathLibrary_GetDay_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDate
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::GetDate(const FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetDate"));

	UKismetMathLibrary_GetDate_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetAxes
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::GetAxes(const FRotator& A, FVector* X, FVector* Y, FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.GetAxes"));

	UKismetMathLibrary_GetAxes_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.FTrunc
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FTrunc(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FTrunc"));

	UKismetMathLibrary_FTrunc_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::FromSeconds(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromSeconds"));

	UKismetMathLibrary_FromSeconds_Params params;
	params.Seconds = Seconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMinutes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Minutes                        (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::FromMinutes(float Minutes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMinutes"));

	UKismetMathLibrary_FromMinutes_Params params;
	params.Minutes = Minutes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMilliseconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromMilliseconds"));

	UKismetMathLibrary_FromMilliseconds_Params params;
	params.Milliseconds = Milliseconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromHours
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Hours                          (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::FromHours(float Hours)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromHours"));

	UKismetMathLibrary_FromHours_Params params;
	params.Hours = Hours;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromDays
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Days                           (Parm, ZeroConstructor, IsPlainOldData)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::FromDays(float Days)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FromDays"));

	UKismetMathLibrary_FromDays_Params params;
	params.Days = Days;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Fraction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Fraction(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Fraction"));

	UKismetMathLibrary_Fraction_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMod
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Dividend                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Divisor                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Remainder                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMod"));

	UKismetMathLibrary_FMod_Params params;
	params.Dividend = Dividend;
	params.Divisor = Divisor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Remainder != nullptr)
		*Remainder = params.Remainder;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMin(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMin"));

	UKismetMathLibrary_FMin_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMax
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMax(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FMax"));

	UKismetMathLibrary_FMax_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FixedTurn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InCurrent                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDesired                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDeltaRate                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FixedTurn(float InCurrent, float InDesired, float InDeltaRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FixedTurn"));

	UKismetMathLibrary_FixedTurn_Params params;
	params.InCurrent = InCurrent;
	params.InDesired = InDesired;
	params.InDeltaRate = InDeltaRate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo_Constant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo_Constant"));

	UKismetMathLibrary_FInterpTo_Constant_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpTo"));

	UKismetMathLibrary_FInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpEaseInOut
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exponent                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FInterpEaseInOut"));

	UKismetMathLibrary_FInterpEaseInOut_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindLookAtRotation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Target                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::FindLookAtRotation(const FVector& Start, const FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FindLookAtRotation"));

	UKismetMathLibrary_FindLookAtRotation_Params params;
	params.Start = Start;
	params.Target = Target;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FFloor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FFloor(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FFloor"));

	UKismetMathLibrary_FFloor_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FClamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FClamp(float Value, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FClamp"));

	UKismetMathLibrary_FClamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FCeil
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FCeil(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.FCeil"));

	UKismetMathLibrary_FCeil_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Exp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Exp(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Exp"));

	UKismetMathLibrary_Exp_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_VectorVector(const FVector& A, const FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_VectorVector"));

	UKismetMathLibrary_EqualEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_TransformTransform(const FTransform& A, const FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TransformTransform"));

	UKismetMathLibrary_EqualEqual_TransformTransform_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan"));

	UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_RotatorRotator(const FRotator& A, const FRotator& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator"));

	UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ObjectObject(UObject* A, UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject"));

	UKismetMathLibrary_EqualEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_NameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// FName                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_NameName(const FName& A, const FName& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_NameName"));

	UKismetMathLibrary_EqualEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_IntInt"));

	UKismetMathLibrary_EqualEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat"));

	UKismetMathLibrary_EqualEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FDateTime                      B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(const FDateTime& A, const FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime"));

	UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ClassClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ClassClass(UClass* A, UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ClassClass"));

	UKismetMathLibrary_EqualEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_ByteByte"));

	UKismetMathLibrary_EqualEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_BoolBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.EqualEqual_BoolBool"));

	UKismetMathLibrary_EqualEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Ease
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Ease"));

	UKismetMathLibrary_Ease_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DotProduct2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DotProduct2D(const FVector2D& A, const FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DotProduct2D"));

	UKismetMathLibrary_DotProduct2D_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Dot_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Dot_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Dot_VectorVector"));

	UKismetMathLibrary_Dot_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Divide_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorVector"));

	UKismetMathLibrary_Divide_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Divide_VectorInt(const FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorInt"));

	UKismetMathLibrary_Divide_VectorInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Divide_VectorFloat(const FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_VectorFloat"));

	UKismetMathLibrary_Divide_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Divide_Vector2DFloat(const FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_Vector2DFloat"));

	UKismetMathLibrary_Divide_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Divide_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_IntInt"));

	UKismetMathLibrary_Divide_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Divide_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_FloatFloat"));

	UKismetMathLibrary_Divide_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Divide_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Divide_ByteByte"));

	UKismetMathLibrary_Divide_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegTan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegTan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegTan"));

	UKismetMathLibrary_DegTan_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegSin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegSin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegSin"));

	UKismetMathLibrary_DegSin_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegreesToRadians
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegreesToRadians(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegreesToRadians"));

	UKismetMathLibrary_DegreesToRadians_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegCos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegCos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegCos"));

	UKismetMathLibrary_DegCos_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAtan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan2"));

	UKismetMathLibrary_DegAtan2_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAtan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAtan"));

	UKismetMathLibrary_DegAtan_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAsin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAsin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAsin"));

	UKismetMathLibrary_DegAsin_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAcos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAcos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DegAcos"));

	UKismetMathLibrary_DegAcos_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInYear
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInYear"));

	UKismetMathLibrary_DaysInYear_Params params;
	params.Year = Year;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInMonth
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInMonth(int Year, int Month)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DaysInMonth"));

	UKismetMathLibrary_DaysInMonth_Params params;
	params.Year = Year;
	params.Month = Month;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMinValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::DateTimeMinValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMinValue"));

	UKismetMathLibrary_DateTimeMinValue_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMaxValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::DateTimeMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeMaxValue"));

	UKismetMathLibrary_DateTimeMaxValue_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        DateTimeString                 (Parm, ZeroConstructor)
// FDateTime                      Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::DateTimeFromString(const FString& DateTimeString, FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromString"));

	UKismetMathLibrary_DateTimeFromString_Params params;
	params.DateTimeString = DateTimeString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeFromIsoString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        IsoString                      (Parm, ZeroConstructor)
// FDateTime                      Result                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::DateTimeFromIsoString(const FString& IsoString, FDateTime* Result)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.DateTimeFromIsoString"));

	UKismetMathLibrary_DateTimeFromIsoString_Params params;
	params.IsoString = IsoString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CrossProduct2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::CrossProduct2D(const FVector2D& A, const FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CrossProduct2D"));

	UKismetMathLibrary_CrossProduct2D_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cross_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Cross_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cross_VectorVector"));

	UKismetMathLibrary_Cross_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CreateVectorFromYawPitch"));

	UKismetMathLibrary_CreateVectorFromYawPitch_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Length = Length;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Cos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Cos"));

	UKismetMathLibrary_Cos_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ConvertTransformToRelative
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     ParentTransform                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::ConvertTransformToRelative(const FTransform& Transform, const FTransform& ParentTransform)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ConvertTransformToRelative"));

	UKismetMathLibrary_ConvertTransformToRelative_Params params;
	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Conv_VectorToVector2D(const FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToVector2D"));

	UKismetMathLibrary_Conv_VectorToVector2D_Params params;
	params.InVector = InVector;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::Conv_VectorToTransform(const FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToTransform"));

	UKismetMathLibrary_Conv_VectorToTransform_Params params;
	params.InLocation = InLocation;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::Conv_VectorToRotator(const FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToRotator"));

	UKismetMathLibrary_Conv_VectorToRotator_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(const FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor"));

	UKismetMathLibrary_Conv_VectorToLinearColor_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector2DToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Conv_Vector2DToVector(const FVector2D& InVector2D, float Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_Vector2DToVector"));

	UKismetMathLibrary_Conv_Vector2DToVector_Params params;
	params.InVector2D = InVector2D;
	params.Z = Z;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_RotatorToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Conv_RotatorToVector(const FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_RotatorToVector"));

	UKismetMathLibrary_Conv_RotatorToVector_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Conv_LinearColorToVector(const FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToVector"));

	UKismetMathLibrary_Conv_LinearColorToVector_Params params;
	params.InLinearColor = InLinearColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// FColor                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FColor UKismetMathLibrary::Conv_LinearColorToColor(const FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_LinearColorToColor"));

	UKismetMathLibrary_Conv_LinearColorToColor_Params params;
	params.InLinearColor = InLinearColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_IntToFloat(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToFloat"));

	UKismetMathLibrary_Conv_IntToFloat_Params params;
	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_IntToByte(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToByte"));

	UKismetMathLibrary_Conv_IntToByte_Params params;
	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Conv_IntToBool(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_IntToBool"));

	UKismetMathLibrary_Conv_IntToBool_Params params;
	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToVector"));

	UKismetMathLibrary_Conv_FloatToVector_Params params;
	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor"));

	UKismetMathLibrary_Conv_FloatToLinearColor_Params params;
	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FColor                         InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(const FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor"));

	UKismetMathLibrary_Conv_ColorToLinearColor_Params params;
	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToInt"));

	UKismetMathLibrary_Conv_ByteToInt_Params params;
	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_ByteToFloat"));

	UKismetMathLibrary_Conv_ByteToFloat_Params params;
	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_BoolToInt(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToInt"));

	UKismetMathLibrary_Conv_BoolToInt_Params params;
	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_BoolToFloat(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToFloat"));

	UKismetMathLibrary_Conv_BoolToFloat_Params params;
	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_BoolToByte(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Conv_BoolToByte"));

	UKismetMathLibrary_Conv_BoolToByte_Params params;
	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeTransforms
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FTransform                     ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

FTransform UKismetMathLibrary::ComposeTransforms(const FTransform& A, const FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeTransforms"));

	UKismetMathLibrary_ComposeTransforms_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeRotators
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       A                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       B                              (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FRotator UKismetMathLibrary::ComposeRotators(const FRotator& A, const FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ComposeRotators"));

	UKismetMathLibrary_ComposeRotators_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClassIsChildOf
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        TestClass                      (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ParentClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::ClassIsChildOf(UClass* TestClass, UClass* ParentClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClassIsChildOf"));

	UKismetMathLibrary_ClassIsChildOf_Params params;
	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampVectorSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::ClampVectorSize(const FVector& A, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampVectorSize"));

	UKismetMathLibrary_ClampVectorSize_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::ClampAxis(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAxis"));

	UKismetMathLibrary_ClampAxis_Params params;
	params.Angle = Angle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.ClampAngle"));

	UKismetMathLibrary_ClampAngle_Params params;
	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Clamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Clamp(int Value, int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Clamp"));

	UKismetMathLibrary_Clamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CInterpTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   Current                        (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UKismetMathLibrary::CInterpTo(const FLinearColor& Current, const FLinearColor& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.CInterpTo"));

	UKismetMathLibrary_CInterpTo_Params params;
	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BreakVector2D
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector2D(const FVector2D& InVec, float* X, float* Y)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector2D"));

	UKismetMathLibrary_BreakVector2D_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.KismetMathLibrary.BreakVector
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector(const FVector& InVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakVector"));

	UKismetMathLibrary_BreakVector_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector                        Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Scale                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakTransform(const FTransform& InTransform, FVector* Location, FRotator* Rotation, FVector* Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTransform"));

	UKismetMathLibrary_BreakTransform_Params params;
	params.InTransform = InTransform;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
	if (Scale != nullptr)
		*Scale = params.Scale;
}


// Function Engine.KismetMathLibrary.BreakTimespan
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      InTimespan                     (Parm, ZeroConstructor)
// int                            Days                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Hours                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Minutes                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Milliseconds                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakTimespan(const FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakTimespan"));

	UKismetMathLibrary_BreakTimespan_Params params;
	params.InTimespan = InTimespan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Days != nullptr)
		*Days = params.Days;
	if (Hours != nullptr)
		*Hours = params.Hours;
	if (Minutes != nullptr)
		*Minutes = params.Minutes;
	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (Milliseconds != nullptr)
		*Milliseconds = params.Milliseconds;
}


// Function Engine.KismetMathLibrary.BreakRotIntoAxes
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRotIntoAxes(const FRotator& InRot, FVector* X, FVector* Y, FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotIntoAxes"));

	UKismetMathLibrary_BreakRotIntoAxes_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakRotator
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRotator(const FRotator& InRot, float* Roll, float* Pitch, float* Yaw)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRotator"));

	UKismetMathLibrary_BreakRotator_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Roll != nullptr)
		*Roll = params.Roll;
	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
}


// Function Engine.KismetMathLibrary.BreakRandomStream
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRandomStream                  InRandomStream                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            InitialSeed                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRandomStream(const FRandomStream& InRandomStream, int* InitialSeed)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakRandomStream"));

	UKismetMathLibrary_BreakRandomStream_Params params;
	params.InRandomStream = InRandomStream;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InitialSeed != nullptr)
		*InitialSeed = params.InitialSeed;
}


// Function Engine.KismetMathLibrary.BreakDateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      InDateTime                     (Parm, ZeroConstructor)
// int                            Year                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Day                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Hour                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Minute                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Second                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Millisecond                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakDateTime(const FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakDateTime"));

	UKismetMathLibrary_BreakDateTime_Params params;
	params.InDateTime = InDateTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Year != nullptr)
		*Year = params.Year;
	if (Month != nullptr)
		*Month = params.Month;
	if (Day != nullptr)
		*Day = params.Day;
	if (Hour != nullptr)
		*Hour = params.Hour;
	if (Minute != nullptr)
		*Minute = params.Minute;
	if (Second != nullptr)
		*Second = params.Second;
	if (Millisecond != nullptr)
		*Millisecond = params.Millisecond;
}


// Function Engine.KismetMathLibrary.BreakColor
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          R                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakColor(const FLinearColor& InColor, float* R, float* G, float* B, float* A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BreakColor"));

	UKismetMathLibrary_BreakColor_Params params;
	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (R != nullptr)
		*R = params.R;
	if (G != nullptr)
		*G = params.G;
	if (B != nullptr)
		*B = params.B;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.BooleanXOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanXOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanXOR"));

	UKismetMathLibrary_BooleanXOR_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanOR"));

	UKismetMathLibrary_BooleanOR_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNOR
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanNOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNOR"));

	UKismetMathLibrary_BooleanNOR_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanNAND
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanNAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanNAND"));

	UKismetMathLibrary_BooleanNAND_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanAND
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.BooleanAND"));

	UKismetMathLibrary_BooleanAND_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Atan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan2"));

	UKismetMathLibrary_Atan2_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Atan(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Atan"));

	UKismetMathLibrary_Atan_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Asin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Asin(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Asin"));

	UKismetMathLibrary_Asin_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.And_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::And_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.And_IntInt"));

	UKismetMathLibrary_And_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Add_VectorVector(const FVector& A, const FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorVector"));

	UKismetMathLibrary_Add_VectorVector_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Add_VectorInt(const FVector& A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorInt"));

	UKismetMathLibrary_Add_VectorInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UKismetMathLibrary::Add_VectorFloat(const FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_VectorFloat"));

	UKismetMathLibrary_Add_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Add_Vector2DVector2D(const FVector2D& A, const FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DVector2D"));

	UKismetMathLibrary_Add_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DFloat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UKismetMathLibrary::Add_Vector2DFloat(const FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_Vector2DFloat"));

	UKismetMathLibrary_Add_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_TimespanTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// FTimespan                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FTimespan UKismetMathLibrary::Add_TimespanTimespan(const FTimespan& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_TimespanTimespan"));

	UKismetMathLibrary_Add_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Add_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_IntInt"));

	UKismetMathLibrary_Add_IntInt_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_FloatFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Add_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_FloatFloat"));

	UKismetMathLibrary_Add_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DateTimeTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      A                              (Parm, ZeroConstructor)
// FTimespan                      B                              (Parm, ZeroConstructor)
// FDateTime                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FDateTime UKismetMathLibrary::Add_DateTimeTimespan(const FDateTime& A, const FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_DateTimeTimespan"));

	UKismetMathLibrary_Add_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_ByteByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Add_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Add_ByteByte"));

	UKismetMathLibrary_Add_ByteByte_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Acos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Acos(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Acos"));

	UKismetMathLibrary_Acos_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Abs_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs_Int"));

	UKismetMathLibrary_Abs_Int_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Abs(float A)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetMathLibrary.Abs"));

	UKismetMathLibrary_Abs_Params params;
	params.A = A;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.MarkBit
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::MarkBit(int Index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.MarkBit"));

	UKismetNodeHelperLibrary_MarkBit_Params params;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasUnmarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit"));

	UKismetNodeHelperLibrary_HasUnmarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.HasMarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasMarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.HasMarkedBit"));

	UKismetNodeHelperLibrary_HasMarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetValidIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UEnum*                         Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetNodeHelperLibrary::GetValidIndex(UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetValidIndex"));

	UKismetNodeHelperLibrary_GetValidIndex_Params params;
	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandom                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit"));

	UKismetNodeHelperLibrary_GetUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;
	params.bRandom = bRandom;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit"));

	UKismetNodeHelperLibrary_GetRandomUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit"));

	UKismetNodeHelperLibrary_GetFirstUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UEnum*                         Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName"));

	UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName_Params params;
	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UEnum*                         Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorValue                (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UKismetNodeHelperLibrary::GetEnumeratorName(UEnum* Enum, unsigned char EnumeratorValue)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.GetEnumeratorName"));

	UKismetNodeHelperLibrary_GetEnumeratorName_Params params;
	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.ClearBit
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearBit(int Index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearBit"));

	UKismetNodeHelperLibrary_ClearBit_Params params;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.ClearAllBits
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearAllBits(int* Data)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.ClearAllBits"));

	UKismetNodeHelperLibrary_ClearAllBits_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.BitIsMarked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::BitIsMarked(int Data, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetNodeHelperLibrary.BitIsMarked"));

	UKismetNodeHelperLibrary_BitIsMarked_Params params;
	params.Data = Data;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.TrimTrailing
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::TrimTrailing(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TrimTrailing"));

	UKismetStringLibrary_TrimTrailing_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Trim
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Trim(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Trim"));

	UKismetStringLibrary_Trim_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToUpper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::ToUpper(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToUpper"));

	UKismetStringLibrary_ToUpper_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToLower
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::ToLower(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ToLower"));

	UKismetStringLibrary_ToLower_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.TimeSecondsToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InSeconds                      (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::TimeSecondsToString(float InSeconds)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.TimeSecondsToString"));

	UKismetStringLibrary_TimeSecondsToString_Params params;
	params.InSeconds = InSeconds;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.StartsWith
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        InPrefix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::StartsWith(const FString& SourceString, const FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.StartsWith"));

	UKismetStringLibrary_StartsWith_Params params;
	params.SourceString = SourceString;
	params.InPrefix = InPrefix;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Split
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        InStr                          (Parm, ZeroConstructor)
// FString                        LeftS                          (Parm, OutParm, ZeroConstructor)
// FString                        RightS                         (Parm, OutParm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESearchDir>        SearchDir                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::Split(const FString& SourceString, const FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, FString* LeftS, FString* RightS)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Split"));

	UKismetStringLibrary_Split_Params params;
	params.SourceString = SourceString;
	params.InStr = InStr;
	params.SearchCase = SearchCase;
	params.SearchDir = SearchDir;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (LeftS != nullptr)
		*LeftS = params.LeftS;
	if (RightS != nullptr)
		*RightS = params.RightS;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightPad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::RightPad(const FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightPad"));

	UKismetStringLibrary_RightPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightChop
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::RightChop(const FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.RightChop"));

	UKismetStringLibrary_RightChop_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Right
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Right(const FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Right"));

	UKismetStringLibrary_Right_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Reverse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Reverse(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Reverse"));

	UKismetStringLibrary_Reverse_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ReplaceInline
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FString                        SourceString                   (Parm, OutParm, ZeroConstructor, ReferenceParm)
// FString                        SearchText                     (Parm, ZeroConstructor)
// FString                        ReplacementText                (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::ReplaceInline(const FString& SearchText, const FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, FString* SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ReplaceInline"));

	UKismetStringLibrary_ReplaceInline_Params params;
	params.SearchText = SearchText;
	params.ReplacementText = ReplacementText;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (SourceString != nullptr)
		*SourceString = params.SourceString;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Replace
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        From                           (Parm, ZeroConstructor)
// FString                        To                             (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Replace(const FString& SourceString, const FString& From, const FString& To, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Replace"));

	UKismetStringLibrary_Replace_Params params;
	params.SourceString = SourceString;
	params.From = From;
	params.To = To;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ParseIntoArray
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        Delimiter                      (Parm, ZeroConstructor)
// bool                           CullEmptyStrings               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UKismetStringLibrary::ParseIntoArray(const FString& SourceString, const FString& Delimiter, bool CullEmptyStrings)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.ParseIntoArray"));

	UKismetStringLibrary_ParseIntoArray_Params params;
	params.SourceString = SourceString;
	params.Delimiter = Delimiter;
	params.CullEmptyStrings = CullEmptyStrings;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StrStr(const FString& A, const FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StrStr"));

	UKismetStringLibrary_NotEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StriStri
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StriStri(const FString& A, const FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.NotEqual_StriStri"));

	UKismetStringLibrary_NotEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Mid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Start                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Mid(const FString& SourceString, int Start, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Mid"));

	UKismetStringLibrary_Mid_Params params;
	params.SourceString = SourceString;
	params.Start = Start;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.MatchesWildcard
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        Wildcard                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::MatchesWildcard(const FString& SourceString, const FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.MatchesWildcard"));

	UKismetStringLibrary_MatchesWildcard_Params params;
	params.SourceString = SourceString;
	params.Wildcard = Wildcard;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Len
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        S                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Len(const FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Len"));

	UKismetStringLibrary_Len_Params params;
	params.S = S;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftPad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::LeftPad(const FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftPad"));

	UKismetStringLibrary_LeftPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftChop
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::LeftChop(const FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.LeftChop"));

	UKismetStringLibrary_LeftChop_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Left
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Left(const FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Left"));

	UKismetStringLibrary_Left_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.JoinStringArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<FString>                SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FString                        Separator                      (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::JoinStringArray(TArray<FString> SourceArray, const FString& Separator)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.JoinStringArray"));

	UKismetStringLibrary_JoinStringArray_Params params;
	params.SourceArray = SourceArray;
	params.Separator = Separator;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.IsNumeric
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::IsNumeric(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.IsNumeric"));

	UKismetStringLibrary_IsNumeric_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetSubstring
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            StartIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::GetSubstring(const FString& SourceString, int StartIndex, int Length)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetSubstring"));

	UKismetStringLibrary_GetSubstring_Params params;
	params.SourceString = SourceString;
	params.StartIndex = StartIndex;
	params.Length = Length;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterAsNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::GetCharacterAsNumber(const FString& SourceString, int Index)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterAsNumber"));

	UKismetStringLibrary_GetCharacterAsNumber_Params params;
	params.SourceString = SourceString;
	params.Index = Index;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterArrayFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UKismetStringLibrary::GetCharacterArrayFromString(const FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.GetCharacterArrayFromString"));

	UKismetStringLibrary_GetCharacterArrayFromString_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.FindSubstring
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SearchIn                       (Parm, ZeroConstructor)
// FString                        Substring                      (Parm, ZeroConstructor)
// bool                           bUseCase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSearchFromEnd                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartPosition                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::FindSubstring(const FString& SearchIn, const FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.FindSubstring"));

	UKismetStringLibrary_FindSubstring_Params params;
	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;
	params.StartPosition = StartPosition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StrStr(const FString& A, const FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StrStr"));

	UKismetStringLibrary_EqualEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StriStri
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StriStri(const FString& A, const FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EqualEqual_StriStri"));

	UKismetStringLibrary_EqualEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EndsWith
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// FString                        InSuffix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EndsWith(const FString& SourceString, const FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.EndsWith"));

	UKismetStringLibrary_EndsWith_Params params;
	params.SourceString = SourceString;
	params.InSuffix = InSuffix;
	params.SearchCase = SearchCase;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.CullArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        SourceString                   (Parm, ZeroConstructor)
// TArray<FString>                InArray                        (Parm, OutParm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::CullArray(const FString& SourceString, TArray<FString>* InArray)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.CullArray"));

	UKismetStringLibrary_CullArray_Params params;
	params.SourceString = SourceString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (InArray != nullptr)
		*InArray = params.InArray;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_VectorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector                        InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_VectorToString(const FVector& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_VectorToString"));

	UKismetStringLibrary_Conv_VectorToString_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_Vector2dToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FVector2D                      InVec                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_Vector2dToString(const FVector2D& InVec)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_Vector2dToString"));

	UKismetStringLibrary_Conv_Vector2dToString_Params params;
	params.InVec = InVec;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_TransformToString
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTransform                     InTrans                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_TransformToString(const FTransform& InTrans)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_TransformToString"));

	UKismetStringLibrary_Conv_TransformToString_Params params;
	params.InTrans = InTrans;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        InString                       (Parm, ZeroConstructor)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UKismetStringLibrary::Conv_StringToName(const FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToName"));

	UKismetStringLibrary_Conv_StringToName_Params params;
	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        InString                       (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Conv_StringToInt(const FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToInt"));

	UKismetStringLibrary_Conv_StringToInt_Params params;
	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        InString                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetStringLibrary::Conv_StringToFloat(const FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_StringToFloat"));

	UKismetStringLibrary_Conv_StringToFloat_Params params;
	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_RotatorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_RotatorToString(const FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_RotatorToString"));

	UKismetStringLibrary_Conv_RotatorToString_Params params;
	params.InRot = InRot;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ObjectToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_ObjectToString(UObject* InObj)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ObjectToString"));

	UKismetStringLibrary_Conv_ObjectToString_Params params;
	params.InObj = InObj;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_NameToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_NameToString(const FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_NameToString"));

	UKismetStringLibrary_Conv_NameToString_Params params;
	params.InName = InName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_IntToString(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_IntToString"));

	UKismetStringLibrary_Conv_IntToString_Params params;
	params.InInt = InInt;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_FloatToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_FloatToString"));

	UKismetStringLibrary_Conv_FloatToString_Params params;
	params.InFloat = InFloat;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ColorToString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FLinearColor                   InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_ColorToString(const FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ColorToString"));

	UKismetStringLibrary_Conv_ColorToString_Params params;
	params.InColor = InColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ByteToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_ByteToString(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_ByteToString"));

	UKismetStringLibrary_Conv_ByteToString_Params params;
	params.InByte = InByte;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_BoolToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Conv_BoolToString"));

	UKismetStringLibrary_Conv_BoolToString_Params params;
	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Concat_StrStr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        A                              (Parm, ZeroConstructor)
// FString                        B                              (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::Concat_StrStr(const FString& A, const FString& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.Concat_StrStr"));

	UKismetStringLibrary_Concat_StrStr_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector2d
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// FVector2D                      InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Vector2d(const FString& AppendTo, const FString& Prefix, const FVector2D& InVector2D, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector2d"));

	UKismetStringLibrary_BuildString_Vector2d_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector2D = InVector2D;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// FVector                        InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Vector(const FString& AppendTo, const FString& Prefix, const FVector& InVector, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Vector"));

	UKismetStringLibrary_BuildString_Vector_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector = InVector;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Rotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// FRotator                       InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Rotator(const FString& AppendTo, const FString& Prefix, const FRotator& InRot, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Rotator"));

	UKismetStringLibrary_BuildString_Rotator_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InRot = InRot;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Object
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// UObject*                       InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Object(const FString& AppendTo, const FString& Prefix, UObject* InObj, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Object"));

	UKismetStringLibrary_BuildString_Object_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InObj = InObj;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Name
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Name(const FString& AppendTo, const FString& Prefix, const FName& InName, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Name"));

	UKismetStringLibrary_BuildString_Name_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InName = InName;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Int(const FString& AppendTo, const FString& Prefix, int InInt, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Int"));

	UKismetStringLibrary_BuildString_Int_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InInt = InInt;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Float(const FString& AppendTo, const FString& Prefix, float InFloat, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Float"));

	UKismetStringLibrary_BuildString_Float_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InFloat = InFloat;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Color
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// FLinearColor                   InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Color(const FString& AppendTo, const FString& Prefix, const FLinearColor& InColor, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Color"));

	UKismetStringLibrary_BuildString_Color_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InColor = InColor;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Bool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        AppendTo                       (Parm, ZeroConstructor)
// FString                        Prefix                         (Parm, ZeroConstructor)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Suffix                         (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetStringLibrary::BuildString_Bool(const FString& AppendTo, const FString& Prefix, bool InBool, const FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetStringLibrary.BuildString_Bool"));

	UKismetStringLibrary_BuildString_Bool_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InBool = InBool;
	params.Suffix = Suffix;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.StackTrace
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::StackTrace()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.StackTrace"));

	UKismetSystemLibrary_StackTrace_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects"));

	UKismetSystemLibrary_SphereTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED"));

	UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW"));

	UKismetSystemLibrary_SphereTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED"));

	UKismetSystemLibrary_SphereTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects"));

	UKismetSystemLibrary_SphereTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED"));

	UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW"));

	UKismetSystemLibrary_SphereTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED"));

	UKismetSystemLibrary_SphereTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_NEW(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW"));

	UKismetSystemLibrary_SphereOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED"));

	UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_NEW(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW"));

	UKismetSystemLibrary_SphereOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED"));

	UKismetSystemLibrary_SphereOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        CategoryName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(const FString& CategoryName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen"));

	UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen_Params params;
	params.CategoryName = CategoryName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// APlayerController*             SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen"));

	UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_Params params;
	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ShowAdBanner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            AdIdIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowOnBottomOfScreen          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ShowAdBanner"));

	UKismetSystemLibrary_ShowAdBanner_Params params;
	params.AdIdIndex = AdIdIndex;
	params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetWindowTitle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FText                          Title                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetWindowTitle(const FText& Title)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetWindowTitle"));

	UKismetSystemLibrary_SetWindowTitle_Params params;
	params.Title = Title;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem"));

	UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_Params params;
	params.bEnabled = bEnabled;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetVectorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetVectorPropertyByName(UObject* Object, const FName& PropertyName, const FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetVectorPropertyByName"));

	UKismetSystemLibrary_SetVectorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetTransformPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     Value                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetTransformPropertyByName(UObject* Object, const FName& PropertyName, const FTransform& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTransformPropertyByName"));

	UKismetSystemLibrary_SetTransformPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetTextPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FText                          Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetTextPropertyByName(UObject* Object, const FName& PropertyName, const FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetTextPropertyByName"));

	UKismetSystemLibrary_SetTextPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bState                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetSupressViewportTransitionMessage(UObject* WorldContextObject, bool bState)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage"));

	UKismetSystemLibrary_SetSupressViewportTransitionMessage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bState = bState;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetStructurePropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FGenericStruct                 Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetStructurePropertyByName(UObject* Object, const FName& PropertyName, const FGenericStruct& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStructurePropertyByName"));

	UKismetSystemLibrary_SetStructurePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetStringPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Value                          (Parm, ZeroConstructor)

void UKismetSystemLibrary::SetStringPropertyByName(UObject* Object, const FName& PropertyName, const FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetStringPropertyByName"));

	UKismetSystemLibrary_SetStringPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetRotatorPropertyByName(UObject* Object, const FName& PropertyName, const FRotator& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetRotatorPropertyByName"));

	UKismetSystemLibrary_SetRotatorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetObjectPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// UObject*                       Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetObjectPropertyByName(UObject* Object, const FName& PropertyName, UObject* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetObjectPropertyByName"));

	UKismetSystemLibrary_SetObjectPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetNamePropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FName                          Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetNamePropertyByName(UObject* Object, const FName& PropertyName, const FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetNamePropertyByName"));

	UKismetSystemLibrary_SetNamePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetLinearColorPropertyByName(UObject* Object, const FName& PropertyName, const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName"));

	UKismetSystemLibrary_SetLinearColorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetIntPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetIntPropertyByName(UObject* Object, const FName& PropertyName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetIntPropertyByName"));

	UKismetSystemLibrary_SetIntPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetFloatPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetFloatPropertyByName(UObject* Object, const FName& PropertyName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetFloatPropertyByName"));

	UKismetSystemLibrary_SetFloatPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// FCollisionProfileName          Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetCollisionProfileNameProperty(UObject* Object, const FName& PropertyName, const FCollisionProfileName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty"));

	UKismetSystemLibrary_SetCollisionProfileNameProperty_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetClassPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetClassPropertyByName(UObject* Object, const FName& PropertyName, UClass* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetClassPropertyByName"));

	UKismetSystemLibrary_SetClassPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetBytePropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBytePropertyByName(UObject* Object, const FName& PropertyName, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBytePropertyByName"));

	UKismetSystemLibrary_SetBytePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetBoolPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBoolPropertyByName(UObject* Object, const FName& PropertyName, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetBoolPropertyByName"));

	UKismetSystemLibrary_SetBoolPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetAssetPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UObject>       Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetAssetPropertyByName(UObject* Object, const FName& PropertyName, TAssetPtr<class UObject> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetAssetPropertyByName"));

	UKismetSystemLibrary_SetAssetPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UClass>        Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetAssetClassPropertyByName(UObject* Object, const FName& PropertyName, TAssetPtr<class UClass> Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName"));

	UKismetSystemLibrary_SetAssetClassPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.RetriggerableDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void UKismetSystemLibrary::RetriggerableDelay(UObject* WorldContextObject, float Duration, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RetriggerableDelay"));

	UKismetSystemLibrary_RetriggerableDelay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ResetGamepadAssignmentToController(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController"));

	UKismetSystemLibrary_ResetGamepadAssignmentToController_Params params;
	params.ControllerId = ControllerId;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ResetGamepadAssignments
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::ResetGamepadAssignments()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ResetGamepadAssignments"));

	UKismetSystemLibrary_ResetGamepadAssignments_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::RegisterForRemoteNotifications()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications"));

	UKismetSystemLibrary_RegisterForRemoteNotifications_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.QuitGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// APlayerController*             SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EQuitPreference>   QuitPreference                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.QuitGame"));

	UKismetSystemLibrary_QuitGame_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpecificPlayer = SpecificPlayer;
	params.QuitPreference = QuitPreference;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintWarning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        InString                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::PrintWarning(const FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintWarning"));

	UKismetSystemLibrary_PrintWarning_Params params;
	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintText
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FText                          InText                         (ConstParm, Parm)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::PrintText(UObject* WorldContextObject, const FText& InText, bool bPrintToScreen, bool bPrintToLog, const FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintText"));

	UKismetSystemLibrary_PrintText_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InText = InText;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.PrintString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FString                        InString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::PrintString(UObject* WorldContextObject, const FString& InString, bool bPrintToScreen, bool bPrintToLog, const FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.PrintString"));

	UKismetSystemLibrary_PrintString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InString = InString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
// (Public, Delegate)
// Parameters:
// UObject*                       Loaded                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::OnAssetLoaded__DelegateSignature(UObject* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature"));

	UKismetSystemLibrary_OnAssetLoaded__DelegateSignature_Params params;
	params.Loaded = Loaded;

	UObject::ProcessEvent(fn, &params);
}


// DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
// (Public, Delegate)
// Parameters:
// UClass*                        Loaded                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::OnAssetClassLoaded__DelegateSignature(UClass* Loaded)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature"));

	UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature_Params params;
	params.Loaded = Loaded;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.MoveComponentTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// USceneComponent*               Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        TargetRelativeLocation         (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       TargetRelativeRotation         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseOut                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseIn                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverTime                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMoveComponentAction> MoveAction                     (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void UKismetSystemLibrary::MoveComponentTo(USceneComponent* Component, const FVector& TargetRelativeLocation, const FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<EMoveComponentAction> MoveAction, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MoveComponentTo"));

	UKismetSystemLibrary_MoveComponentTo_Params params;
	params.Component = Component;
	params.TargetRelativeLocation = TargetRelativeLocation;
	params.TargetRelativeRotation = TargetRelativeRotation;
	params.bEaseOut = bEaseOut;
	params.bEaseIn = bEaseIn;
	params.OverTime = OverTime;
	params.MoveAction = MoveAction;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.MakeLiteralText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          Value                          (Parm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetSystemLibrary::MakeLiteralText(const FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralText"));

	UKismetSystemLibrary_MakeLiteralText_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Value                          (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::MakeLiteralString(const FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralString"));

	UKismetSystemLibrary_MakeLiteralString_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// FName                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FName UKismetSystemLibrary::MakeLiteralName(const FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralName"));

	UKismetSystemLibrary_MakeLiteralName_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::MakeLiteralInt(int Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralInt"));

	UKismetSystemLibrary_MakeLiteralInt_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::MakeLiteralFloat(float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralFloat"));

	UKismetSystemLibrary_MakeLiteralFloat_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetSystemLibrary::MakeLiteralByte(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralByte"));

	UKismetSystemLibrary_MakeLiteralByte_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::MakeLiteralBool(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.MakeLiteralBool"));

	UKismetSystemLibrary_MakeLiteralBool_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LoadAssetClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UClass>        AssetClass                     (ConstParm, Parm, OutParm, ReferenceParm)
// FScriptDelegate                OnLoaded                       (Parm, ZeroConstructor)
// FLatentActionInfo              LatentInfo                     (Parm)

void UKismetSystemLibrary::LoadAssetClass(UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const FScriptDelegate& OnLoaded, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAssetClass"));

	UKismetSystemLibrary_LoadAssetClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.AssetClass = AssetClass;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.LoadAsset
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TAssetPtr<class UObject>       Asset                          (ConstParm, Parm, OutParm, ReferenceParm)
// FScriptDelegate                OnLoaded                       (Parm, ZeroConstructor)
// FLatentActionInfo              LatentInfo                     (Parm)

void UKismetSystemLibrary::LoadAsset(UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const FScriptDelegate& OnLoaded, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LoadAsset"));

	UKismetSystemLibrary_LoadAsset_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Asset = Asset;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleForObjects"));

	UKismetSystemLibrary_LineTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED"));

	UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingle_NEW"));

	UKismetSystemLibrary_LineTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED"));

	UKismetSystemLibrary_LineTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiForObjects"));

	UKismetSystemLibrary_LineTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED"));

	UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMulti_NEW"));

	UKismetSystemLibrary_LineTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED"));

	UKismetSystemLibrary_LineTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LaunchURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)

void UKismetSystemLibrary::LaunchURL(const FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.LaunchURL"));

	UKismetSystemLibrary_LaunchURL_Params params;
	params.URL = URL;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)

void UKismetSystemLibrary::K2_UnPauseTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle"));

	UKismetSystemLibrary_K2_UnPauseTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_UnPauseTimerDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate"));

	UKismetSystemLibrary_K2_UnPauseTimerDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_UnPauseTimer(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_UnPauseTimer"));

	UKismetSystemLibrary_K2_UnPauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExistsHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsHandle"));

	UKismetSystemLibrary_K2_TimerExistsHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExistsDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate"));

	UKismetSystemLibrary_K2_TimerExistsDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_TimerExists
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExists(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_TimerExists"));

	UKismetSystemLibrary_K2_TimerExists_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   ReturnValue                    (Parm, OutParm, ReturnParm)

FTimerHandle UKismetSystemLibrary::K2_SetTimerDelegate(const FScriptDelegate& Delegate, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimerDelegate"));

	UKismetSystemLibrary_K2_SetTimerDelegate_Params params;
	params.Delegate = Delegate;
	params.Time = Time;
	params.bLooping = bLooping;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   ReturnValue                    (Parm, OutParm, ReturnParm)

FTimerHandle UKismetSystemLibrary::K2_SetTimer(UObject* Object, const FString& FunctionName, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_SetTimer"));

	UKismetSystemLibrary_K2_SetTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;
	params.Time = Time;
	params.bLooping = bLooping;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)

void UKismetSystemLibrary::K2_PauseTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerHandle"));

	UKismetSystemLibrary_K2_PauseTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_PauseTimerDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate"));

	UKismetSystemLibrary_K2_PauseTimerDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_PauseTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_PauseTimer(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_PauseTimer"));

	UKismetSystemLibrary_K2_PauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimerHandle                   Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsValidTimerHandle(const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle"));

	UKismetSystemLibrary_K2_IsValidTimerHandle_Params params;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPausedHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle"));

	UKismetSystemLibrary_K2_IsTimerPausedHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPausedDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate"));

	UKismetSystemLibrary_K2_IsTimerPausedDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPaused
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPaused(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerPaused"));

	UKismetSystemLibrary_K2_IsTimerPaused_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActiveHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle"));

	UKismetSystemLibrary_K2_IsTimerActiveHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActiveDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate"));

	UKismetSystemLibrary_K2_IsTimerActiveDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActive(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_IsTimerActive"));

	UKismetSystemLibrary_K2_IsTimerActive_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// FTimerHandle                   Handle                         (Parm, OutParm, ReferenceParm)
// FTimerHandle                   ReturnValue                    (Parm, OutParm, ReturnParm)

FTimerHandle UKismetSystemLibrary::K2_InvalidateTimerHandle(FTimerHandle* Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle"));

	UKismetSystemLibrary_K2_InvalidateTimerHandle_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Handle != nullptr)
		*Handle = params.Handle;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle"));

	UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTimeDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate"));

	UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTime(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime"));

	UKismetSystemLibrary_K2_GetTimerRemainingTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle"));

	UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTimeDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate"));

	UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTime(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime"));

	UKismetSystemLibrary_K2_GetTimerElapsedTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTimerHandle                   Handle                         (Parm)

void UKismetSystemLibrary::K2_ClearTimerHandle(UObject* WorldContextObject, const FTimerHandle& Handle)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerHandle"));

	UKismetSystemLibrary_K2_ClearTimerHandle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FScriptDelegate                Delegate                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_ClearTimerDelegate(const FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate"));

	UKismetSystemLibrary_K2_ClearTimerDelegate_Params params;
	params.Delegate = Delegate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.K2_ClearTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FString                        FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_ClearTimer(UObject* Object, const FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.K2_ClearTimer"));

	UKismetSystemLibrary_K2_ClearTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.IsValidClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        Class                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsValidClass(UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValidClass"));

	UKismetSystemLibrary_IsValidClass_Params params;
	params.Class = Class;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsValid(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsValid"));

	UKismetSystemLibrary_IsValid_Params params;
	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsServer(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsServer"));

	UKismetSystemLibrary_IsServer_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsPackagedForDistribution
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsPackagedForDistribution()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsPackagedForDistribution"));

	UKismetSystemLibrary_IsPackagedForDistribution_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsLoggedIn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// APlayerController*             SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsLoggedIn(APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsLoggedIn"));

	UKismetSystemLibrary_IsLoggedIn_Params params;
	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsDedicatedServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsDedicatedServer(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsDedicatedServer"));

	UKismetSystemLibrary_IsDedicatedServer_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsControllerAssignedToGamepad(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad"));

	UKismetSystemLibrary_IsControllerAssignedToGamepad_Params params;
	params.ControllerId = ControllerId;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.HideAdBanner
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::HideAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.HideAdBanner"));

	UKismetSystemLibrary_HideAdBanner_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::GetVolumeButtonsHandledBySystem()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem"));

	UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetUniqueDeviceId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetUniqueDeviceId()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetUniqueDeviceId"));

	UKismetSystemLibrary_GetUniqueDeviceId_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<FIntPoint>              Resolutions                    (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::GetSupportedFullscreenResolutions(TArray<FIntPoint>* Resolutions)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions"));

	UKismetSystemLibrary_GetSupportedFullscreenResolutions_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Resolutions != nullptr)
		*Resolutions = params.Resolutions;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingMaterialQualityLevel()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel"));

	UKismetSystemLibrary_GetRenderingMaterialQualityLevel_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingDetailMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetRenderingDetailMode"));

	UKismetSystemLibrary_GetRenderingDetailMode_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPreferredLanguages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UKismetSystemLibrary::GetPreferredLanguages()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPreferredLanguages"));

	UKismetSystemLibrary_GetPreferredLanguages_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPlatformUserName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetPlatformUserName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetPlatformUserName"));

	UKismetSystemLibrary_GetPlatformUserName_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectNameAsCrc32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetObjectNameAsCrc32(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectNameAsCrc32"));

	UKismetSystemLibrary_GetObjectNameAsCrc32_Params params;
	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetObjectName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetObjectName(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetObjectName"));

	UKismetSystemLibrary_GetObjectName_Params params;
	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetMaxShadowCascades
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetMaxShadowCascades()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetMaxShadowCascades"));

	UKismetSystemLibrary_GetMaxShadowCascades_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetLocalCurrencySymbol()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol"));

	UKismetSystemLibrary_GetLocalCurrencySymbol_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetLocalCurrencyCode()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetLocalCurrencyCode"));

	UKismetSystemLibrary_GetLocalCurrencyCode_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::GetGameTimeInSeconds(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameTimeInSeconds"));

	UKismetSystemLibrary_GetGameTimeInSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetGameName()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetGameName"));

	UKismetSystemLibrary_GetGameName_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetEngineVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetEngineVersion()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetEngineVersion"));

	UKismetSystemLibrary_GetEngineVersion_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetDisplayName(UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetDisplayName"));

	UKismetSystemLibrary_GetDisplayName_Params params;
	params.Object = Object;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetComponentBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// USceneComponent*               Component                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetComponentBounds(USceneComponent* Component, FVector* Origin, FVector* BoxExtent, float* SphereRadius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetComponentBounds"));

	UKismetSystemLibrary_GetComponentBounds_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
	if (SphereRadius != nullptr)
		*SphereRadius = params.SphereRadius;
}


// Function Engine.KismetSystemLibrary.GetClassDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UClass*                        Class                          (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetSystemLibrary::GetClassDisplayName(UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetClassDisplayName"));

	UKismetSystemLibrary_GetClassDisplayName_Params params;
	params.Class = Class;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetAdIDCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetAdIDCount()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetAdIDCount"));

	UKismetSystemLibrary_GetAdIDCount_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetActorListFromComponentList
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<UPrimitiveComponent*>   ComponentList                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                OutActorList                   (Parm, OutParm, ZeroConstructor)

void UKismetSystemLibrary::GetActorListFromComponentList(TArray<UPrimitiveComponent*> ComponentList, UClass* ActorClassFilter, TArray<AActor*>* OutActorList)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorListFromComponentList"));

	UKismetSystemLibrary_GetActorListFromComponentList_Params params;
	params.ComponentList = ComponentList;
	params.ActorClassFilter = ActorClassFilter;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActorList != nullptr)
		*OutActorList = params.OutActorList;
}


// Function Engine.KismetSystemLibrary.GetActorBounds
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// AActor*                        Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetActorBounds(AActor* Actor, FVector* Origin, FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.GetActorBounds"));

	UKismetSystemLibrary_GetActorBounds_Params params;
	params.Actor = Actor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.KismetSystemLibrary.ForceCloseAdBanner
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::ForceCloseAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ForceCloseAdBanner"));

	UKismetSystemLibrary_ForceCloseAdBanner_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushPersistentDebugLines(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushPersistentDebugLines"));

	UKismetSystemLibrary_FlushPersistentDebugLines_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.FlushDebugStrings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushDebugStrings(UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.FlushDebugStrings"));

	UKismetSystemLibrary_FlushDebugStrings_Params params;
	params.WorldContextObject = WorldContextObject;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Command                        (Parm, ZeroConstructor)
// APlayerController*             SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ExecuteConsoleCommand(UObject* WorldContextObject, const FString& Command, APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ExecuteConsoleCommand"));

	UKismetSystemLibrary_ExecuteConsoleCommand_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Command = Command;
	params.SpecificPlayer = SpecificPlayer;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugString
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FString                        Text                           (Parm, ZeroConstructor)
// AActor*                        TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugString(UObject* WorldContextObject, const FVector& TextLocation, const FString& Text, AActor* TestBaseActor, const FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugString"));

	UKismetSystemLibrary_DrawDebugString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugSphere
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugSphere(UObject* WorldContextObject, const FVector& Center, float Radius, int Segments, const FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugSphere"));

	UKismetSystemLibrary_DrawDebugSphere_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPoint(UObject* WorldContextObject, const FVector& Position, float Size, const FLinearColor& PointColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPoint"));

	UKismetSystemLibrary_DrawDebugPoint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugPlane
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FPlane                         PlaneCoordinates               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// FVector                        Location                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   PlaneColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPlane(UObject* WorldContextObject, const FPlane& PlaneCoordinates, const FVector& Location, float Size, const FLinearColor& PlaneColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugPlane"));

	UKismetSystemLibrary_DrawDebugPlane_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugLine
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugLine(UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, const FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugLine"));

	UKismetSystemLibrary_DrawDebugLine_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFrustum
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FTransform                     FrustumTransform               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FLinearColor                   FrustumColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFrustum(UObject* WorldContextObject, const FTransform& FrustumTransform, const FLinearColor& FrustumColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFrustum"));

	UKismetSystemLibrary_DrawDebugFrustum_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FrustumTransform = FrustumTransform;
	params.FrustumColor = FrustumColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FDebugFloatHistory             FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// FTransform                     DrawTransform                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// FVector2D                      DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryTransform(UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, const FTransform& DrawTransform, const FVector2D& DrawSize, const FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform"));

	UKismetSystemLibrary_DrawDebugFloatHistoryTransform_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawTransform = DrawTransform;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FDebugFloatHistory             FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// FVector                        DrawLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryLocation(UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, const FVector& DrawLocation, const FVector2D& DrawSize, const FLinearColor& DrawColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation"));

	UKismetSystemLibrary_DrawDebugFloatHistoryLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawLocation = DrawLocation;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCylinder
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCylinder(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, int Segments, const FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCylinder"));

	UKismetSystemLibrary_DrawDebugCylinder_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCoordinateSystem(UObject* WorldContextObject, const FVector& AxisLoc, const FRotator& AxisRot, float Scale, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem"));

	UKismetSystemLibrary_DrawDebugCoordinateSystem_Params params;
	params.WorldContextObject = WorldContextObject;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugConeInDegrees(UObject* WorldContextObject, const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees"));

	UKismetSystemLibrary_DrawDebugConeInDegrees_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCone
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCone(UObject* WorldContextObject, const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const FLinearColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCone"));

	UKismetSystemLibrary_DrawDebugCone_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCircle
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Center                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSegments                    (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        YAxis                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ZAxis                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawAxis                      (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCircle(UObject* WorldContextObject, const FVector& Center, float Radius, int NumSegments, const FLinearColor& LineColor, float Duration, float Thickness, const FVector& YAxis, const FVector& ZAxis, bool bDrawAxis)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCircle"));

	UKismetSystemLibrary_DrawDebugCircle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.NumSegments = NumSegments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.YAxis = YAxis;
	params.ZAxis = ZAxis;
	params.bDrawAxis = bDrawAxis;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCapsule
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCapsule(UObject* WorldContextObject, const FVector& Center, float HalfHeight, float Radius, const FRotator& Rotation, const FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCapsule"));

	UKismetSystemLibrary_DrawDebugCapsule_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugCamera
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// ACameraActor*                  CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   CameraColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCamera(ACameraActor* CameraActor, const FLinearColor& CameraColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugCamera"));

	UKismetSystemLibrary_DrawDebugCamera_Params params;
	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugBox(UObject* WorldContextObject, const FVector& Center, const FVector& Extent, const FLinearColor& LineColor, const FRotator& Rotation, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugBox"));

	UKismetSystemLibrary_DrawDebugBox_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DrawDebugArrow
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugArrow(UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, float ArrowSize, const FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DrawDebugArrow"));

	UKismetSystemLibrary_DrawDebugArrow_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.DoesImplementInterface
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       TestObject                     (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::DoesImplementInterface(UObject* TestObject, UClass* Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.DoesImplementInterface"));

	UKismetSystemLibrary_DoesImplementInterface_Params params;
	params.TestObject = TestObject;
	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Delay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// FLatentActionInfo              LatentInfo                     (Parm)

void UKismetSystemLibrary::Delay(UObject* WorldContextObject, float Duration, const FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Delay"));

	UKismetSystemLibrary_Delay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       ObjectToModify                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::CreateCopyForUndoBuffer(UObject* ObjectToModify)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer"));

	UKismetSystemLibrary_CreateCopyForUndoBuffer_Params params;
	params.ObjectToModify = ObjectToModify;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TScriptInterface<class UInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// UObject*                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UObject* UKismetSystemLibrary::Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_InterfaceToObject"));

	UKismetSystemLibrary_Conv_InterfaceToObject_Params params;
	params.Interface = Interface;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_AssetToObject
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TAssetPtr<class UObject>       Asset                          (ConstParm, Parm, OutParm, ReferenceParm)
// UObject*                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UObject* UKismetSystemLibrary::Conv_AssetToObject(TAssetPtr<class UObject> Asset)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_AssetToObject"));

	UKismetSystemLibrary_Conv_AssetToObject_Params params;
	params.Asset = Asset;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Conv_AssetClassToClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TAssetPtr<class UClass>        AssetClass                     (ConstParm, Parm, OutParm, ReferenceParm)
// UClass*                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UClass* UKismetSystemLibrary::Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.Conv_AssetClassToClass"));

	UKismetSystemLibrary_Conv_AssetClassToClass_Params params;
	params.AssetClass = AssetClass;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ControlScreensaver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bAllowScreenSaver              (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ControlScreensaver"));

	UKismetSystemLibrary_ControlScreensaver_Params params;
	params.bAllowScreenSaver = bAllowScreenSaver;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FTransform                     ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_NEW(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW"));

	UKismetSystemLibrary_ComponentOverlapComponents_NEW_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FTransform                     ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_DEPRECATED(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED"));

	UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FTransform                     ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_NEW(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW"));

	UKismetSystemLibrary_ComponentOverlapActors_NEW_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UPrimitiveComponent*           Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FTransform                     ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_DEPRECATED(UPrimitiveComponent* Component, const FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED"));

	UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CollectGarbage
// (Final, Native, Static, Public, BlueprintCallable)

void UKismetSystemLibrary::CollectGarbage()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CollectGarbage"));

	UKismetSystemLibrary_CollectGarbage_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects"));

	UKismetSystemLibrary_CapsuleTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED"));

	UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW"));

	UKismetSystemLibrary_CapsuleTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED"));

	UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects"));

	UKismetSystemLibrary_CapsuleTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiByObject_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED"));

	UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_NEW(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW"));

	UKismetSystemLibrary_CapsuleTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_DEPRECATED(UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED"));

	UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_NEW(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW"));

	UKismetSystemLibrary_CapsuleOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED"));

	UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_NEW(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW"));

	UKismetSystemLibrary_CapsuleOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED"));

	UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingleForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects"));

	UKismetSystemLibrary_BoxTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingle
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// FHitResult                     OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingle(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceSingle"));

	UKismetSystemLibrary_BoxTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMultiForObjects(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects"));

	UKismetSystemLibrary_BoxTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMulti
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        HalfSize                       (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FHitResult>             OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMulti(UObject* WorldContextObject, const FVector& Start, const FVector& End, const FVector& HalfSize, const FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxTraceMulti"));

	UKismetSystemLibrary_BoxTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_NEW(UObject* WorldContextObject, const FVector& BoxPos, const FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW"));

	UKismetSystemLibrary_BoxOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<UPrimitiveComponent*>   OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_DEPRECATED(UObject* WorldContextObject, const FVector& BoxPos, const FVector& Extent, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED"));

	UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_NEW(UObject* WorldContextObject, const FVector& BoxPos, const FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW"));

	UKismetSystemLibrary_BoxOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// FVector                        BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<AActor*>                ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<AActor*>                OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector& BoxPos, const FVector& BoxExtent, TEnumAsByte<EOverlapFilterOption> Filter, UClass* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED"));

	UKismetSystemLibrary_BoxOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.AddFloatHistorySample
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// FDebugFloatHistory             FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// FDebugFloatHistory             ReturnValue                    (Parm, OutParm, ReturnParm)

FDebugFloatHistory UKismetSystemLibrary::AddFloatHistorySample(float Value, const FDebugFloatHistory& FloatHistory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetSystemLibrary.AddFloatHistorySample"));

	UKismetSystemLibrary_AddFloatHistorySample_Params params;
	params.Value = Value;
	params.FloatHistory = FloatHistory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimTrailing
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::TextTrimTrailing(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimTrailing"));

	UKismetTextLibrary_TextTrimTrailing_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::TextTrimPrecedingAndTrailing(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing"));

	UKismetTextLibrary_TextTrimPrecedingAndTrailing_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPreceding
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::TextTrimPreceding(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextTrimPreceding"));

	UKismetTextLibrary_TextTrimPreceding_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsTransient
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsTransient(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsTransient"));

	UKismetTextLibrary_TextIsTransient_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsEmpty
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsEmpty(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsEmpty"));

	UKismetTextLibrary_TextIsEmpty_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsCultureInvariant
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsCultureInvariant(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.TextIsCultureInvariant"));

	UKismetTextLibrary_TextIsCultureInvariant_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          A                              (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_TextText(const FText& A, const FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_TextText"));

	UKismetTextLibrary_NotEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          A                              (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_IgnoreCase_TextText(const FText& A, const FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText"));

	UKismetTextLibrary_NotEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.GetEmptyText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::GetEmptyText()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.GetEmptyText"));

	UKismetTextLibrary_GetEmptyText_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Format
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InPattern                      (Parm)
// TArray<FFormatTextArgument>    InArgs                         (Parm, ZeroConstructor)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Format(const FText& InPattern, TArray<FFormatTextArgument> InArgs)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Format"));

	UKismetTextLibrary_Format_Params params;
	params.InPattern = InPattern;
	params.InArgs = InArgs;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.FindTextInLocalizationTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        Namespace                      (Parm, ZeroConstructor)
// FString                        Key                            (Parm, ZeroConstructor)
// FText                          OutText                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::FindTextInLocalizationTable(const FString& Namespace, const FString& Key, FText* OutText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.FindTextInLocalizationTable"));

	UKismetTextLibrary_FindTextInLocalizationTable_Params params;
	params.Namespace = Namespace;
	params.Key = Key;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	if (OutText != nullptr)
		*OutText = params.OutText;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          A                              (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_TextText(const FText& A, const FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_TextText"));

	UKismetTextLibrary_EqualEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          A                              (ConstParm, Parm, OutParm, ReferenceParm)
// FText                          B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(const FText& A, const FText& B)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText"));

	UKismetTextLibrary_EqualEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_TextToString
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// FText                          InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UKismetTextLibrary::Conv_TextToString(const FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_TextToString"));

	UKismetTextLibrary_Conv_TextToString_Params params;
	params.InText = InText;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_StringToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FString                        InString                       (Parm, ZeroConstructor)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_StringToText(const FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_StringToText"));

	UKismetTextLibrary_Conv_StringToText_Params params;
	params.InString = InString;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_NameToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// FName                          InName                         (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_NameToText(const FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_NameToText"));

	UKismetTextLibrary_Conv_NameToText_Params params;
	params.InName = InName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_IntToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_IntToText"));

	UKismetTextLibrary_Conv_IntToText_Params params;
	params.Value = Value;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_FloatToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_FloatToText"));

	UKismetTextLibrary_Conv_FloatToText_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ByteToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_ByteToText(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_ByteToText"));

	UKismetTextLibrary_Conv_ByteToText_Params params;
	params.Value = Value;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_BoolToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::Conv_BoolToText(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.Conv_BoolToText"));

	UKismetTextLibrary_Conv_BoolToText_Params params;
	params.InBool = InBool;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimespan_Timespan
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FTimespan                      InTimespan                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsTimespan_Timespan(const FTimespan& InTimespan)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTimespan_Timespan"));

	UKismetTextLibrary_AsTimespan_Timespan_Params params;
	params.InTimespan = InTimespan;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTime_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsTime_DateTime(const FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsTime_DateTime"));

	UKismetTextLibrary_AsTime_DateTime_Params params;
	params.In = In;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsPercent_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsPercent_Float"));

	UKismetTextLibrary_AsPercent_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDateTime_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsDateTime_DateTime(const FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDateTime_DateTime"));

	UKismetTextLibrary_AsDateTime_DateTime_Params params;
	params.In = In;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDate_DateTime
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// FDateTime                      InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsDate_DateTime(const FDateTime& InDateTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsDate_DateTime"));

	UKismetTextLibrary_AsDate_DateTime_Params params;
	params.InDateTime = InDateTime;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Integer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        CurrencyCode                   (Parm, ZeroConstructor)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Integer"));

	UKismetTextLibrary_AsCurrency_Integer_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// FString                        CurrencyCode                   (Parm, ZeroConstructor)
// FText                          ReturnValue                    (Parm, OutParm, ReturnParm)

FText UKismetTextLibrary::AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.KismetTextLibrary.AsCurrency_Float"));

	UKismetTextLibrary_AsCurrency_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LoadingPerfBPFuncLib.WriteTimings
// (Final, Native, Static, Public, BlueprintCallable)

void ULoadingPerfBPFuncLib::WriteTimings()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LoadingPerfBPFuncLib.WriteTimings"));

	ULoadingPerfBPFuncLib_WriteTimings_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.LoadingPerfBPFuncLib.MarkEndStreaming
// (Final, Native, Static, Public, BlueprintCallable)

void ULoadingPerfBPFuncLib::MarkEndStreaming()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LoadingPerfBPFuncLib.MarkEndStreaming"));

	ULoadingPerfBPFuncLib_MarkEndStreaming_Params params;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelUnload
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNestedWorldCompositionFunctionLib::TriggerManualNestedLevelUnload(UObject* WorldContextObject, const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelUnload"));

	UNestedWorldCompositionFunctionLib_TriggerManualNestedLevelUnload_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelLoad
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNestedWorldCompositionFunctionLib::TriggerManualNestedLevelLoad(UObject* WorldContextObject, const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.TriggerManualNestedLevelLoad"));

	UNestedWorldCompositionFunctionLib_TriggerManualNestedLevelLoad_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisibleRecursive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNestedWorldCompositionFunctionLib::IsNestedLevelVisibleRecursive(UObject* WorldContextObject, const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisibleRecursive"));

	UNestedWorldCompositionFunctionLib_IsNestedLevelVisibleRecursive_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisible
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PackageName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNestedWorldCompositionFunctionLib::IsNestedLevelVisible(UObject* WorldContextObject, const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NestedWorldCompositionFunctionLib.IsNestedLevelVisible"));

	UNestedWorldCompositionFunctionLib_IsNestedLevelVisible_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            RepIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void UNetPushModelHelpers::MarkPropertyDirtyFromRepIndex(UObject* Object, int RepIndex, const FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex"));

	UNetPushModelHelpers_MarkPropertyDirtyFromRepIndex_Params params;
	params.Object = Object;
	params.RepIndex = RepIndex;
	params.PropertyName = PropertyName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.NetPushModelHelpers.MarkPropertyDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       Object                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void UNetPushModelHelpers::MarkPropertyDirty(UObject* Object, const FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NetPushModelHelpers.MarkPropertyDirty"));

	UNetPushModelHelpers_MarkPropertyDirty_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithShortQuarterResArea
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ShortQuarterRes                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithShortQuarterResArea(UParticleSystemComponent* Component, float ShortQuarterRes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithShortQuarterResArea"));

	UParticleWarningFunctions_RetrieveInfoOnEmitterWithShortQuarterResArea_Params params;
	params.Component = Component;
	params.ShortQuarterRes = ShortQuarterRes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongNearTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LongNearTransition             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithLongNearTransition(UParticleSystemComponent* Component, float LongNearTransition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongNearTransition"));

	UParticleWarningFunctions_RetrieveInfoOnEmitterWithLongNearTransition_Params params;
	params.Component = Component;
	params.LongNearTransition = LongNearTransition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongFarTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LongFarTransition              (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmitterWithLongFarTransition(UParticleSystemComponent* Component, float LongFarTransition)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmitterWithLongFarTransition"));

	UParticleWarningFunctions_RetrieveInfoOnEmitterWithLongFarTransition_Params params;
	params.Component = Component;
	params.LongFarTransition = LongFarTransition;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithoutPerVertexLighting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithoutPerVertexLighting(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithoutPerVertexLighting"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithoutPerVertexLighting_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLowAlphaThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          LowAlphaThreshold              (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithLowAlphaThreshold(UParticleSystemComponent* Component, float LowAlphaThreshold)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLowAlphaThreshold"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithLowAlphaThreshold_Params params;
	params.Component = Component;
	params.LowAlphaThreshold = LowAlphaThreshold;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLoopZero
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithLoopZero(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithLoopZero"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithLoopZero_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithKillOnCompleteUnticked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithKillOnCompleteUnticked(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithKillOnCompleteUnticked"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithKillOnCompleteUnticked_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithHighSpawnRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            HighSpawnRate                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithHighSpawnRate(UParticleSystemComponent* Component, int HighSpawnRate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithHighSpawnRate"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithHighSpawnRate_Params params;
	params.Component = Component;
	params.HighSpawnRate = HighSpawnRate;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithDurationZero
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersWithDurationZero(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersWithDurationZero"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersWithDurationZero_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersUsingMaxDrawCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersUsingMaxDrawCount(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersUsingMaxDrawCount"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersUsingMaxDrawCount_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersOnCPU
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UParticleSystemComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<FString>                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<FString> UParticleWarningFunctions::RetrieveInfoOnEmittersOnCPU(UParticleSystemComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.ParticleWarningFunctions.RetrieveInfoOnEmittersOnCPU"));

	UParticleWarningFunctions_RetrieveInfoOnEmittersOnCPU_Params params;
	params.Component = Component;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshesWithMorphTargets
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<USkeletalMesh*>         Meshes                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<FName>                  MorphTargetNames               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<float>                  MorphTargetWeights             (ConstParm, Parm, ZeroConstructor)
// USkeletalMesh*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USkeletalMesh* USkeletalMeshMergeBlueprintFunctionLibrary::MergeSkeletalMeshesWithMorphTargets(TArray<USkeletalMesh*> Meshes, TArray<FName> MorphTargetNames, TArray<float> MorphTargetWeights)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshesWithMorphTargets"));

	USkeletalMeshMergeBlueprintFunctionLibrary_MergeSkeletalMeshesWithMorphTargets_Params params;
	params.Meshes = Meshes;
	params.MorphTargetNames = MorphTargetNames;
	params.MorphTargetWeights = MorphTargetWeights;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshes
// (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<USkeletalMesh*>         Meshes                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// USkeletalMesh*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

USkeletalMesh* USkeletalMeshMergeBlueprintFunctionLibrary::MergeSkeletalMeshes(TArray<USkeletalMesh*> Meshes)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshMergeBlueprintFunctionLibrary.MergeSkeletalMeshes"));

	USkeletalMeshMergeBlueprintFunctionLibrary_MergeSkeletalMeshes_Params params;
	params.Meshes = Meshes;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.VisualLoggerKismetLibrary.LogText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Text                           (Parm, ZeroConstructor)
// FName                          LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogText(UObject* WorldContextObject, const FString& Text, const FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogText"));

	UVisualLoggerKismetLibrary_LogText_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Text = Text;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.VisualLoggerKismetLibrary.LogLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        Location                       (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Text                           (Parm, ZeroConstructor)
// FLinearColor                   ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// FName                          LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogLocation(UObject* WorldContextObject, const FVector& Location, const FString& Text, const FLinearColor& ObjectColor, float Radius, const FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogLocation"));

	UVisualLoggerKismetLibrary_LogLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Radius = Radius;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.VisualLoggerKismetLibrary.LogBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// FBox                           BoxShape                       (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Text                           (Parm, ZeroConstructor)
// FLinearColor                   ObjectColor                    (Parm, ZeroConstructor, IsPlainOldData)
// FName                          LogCategory                    (Parm, ZeroConstructor, IsPlainOldData)

void UVisualLoggerKismetLibrary::LogBox(UObject* WorldContextObject, const FBox& BoxShape, const FString& Text, const FLinearColor& ObjectColor, const FName& LogCategory)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.VisualLoggerKismetLibrary.LogBox"));

	UVisualLoggerKismetLibrary_LogBox_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxShape = BoxShape;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.LogCategory = LogCategory;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.Stop"));

	UCameraAnimInst_Stop_Params params;
	params.bImmediate = bImmediate;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.SetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::SetScale(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetScale"));

	UCameraAnimInst_SetScale_Params params;
	params.NewDuration = NewDuration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CameraAnimInst.SetDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::SetDuration(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CameraAnimInst.SetDuration"));

	UCameraAnimInst_SetDuration_Params params;
	params.NewDuration = NewDuration;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_TextSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UFont*                         RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        RenderText                     (Parm, ZeroConstructor)
// FVector2D                      Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UCanvas::K2_TextSize(UFont* RenderFont, const FString& RenderText, const FVector2D& Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_TextSize"));

	UCanvas_K2_TextSize_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_StrLen
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UFont*                         RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        RenderText                     (Parm, ZeroConstructor)
// FVector2D                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector2D UCanvas::K2_StrLen(UFont* RenderFont, const FString& RenderText)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_StrLen"));

	UCanvas_K2_StrLen_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_Project
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector                        WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UCanvas::K2_Project(const FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Project"));

	UCanvas_K2_Project_Params params;
	params.WorldLocation = WorldLocation;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_DrawTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTexture*                      RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FCanvasUVTri>           Triangles                      (Parm, ZeroConstructor)

void UCanvas::K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTriangle"));

	UCanvas_K2_DrawTriangle_Params params;
	params.RenderTexture = RenderTexture;
	params.Triangles = Triangles;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UTexture*                      RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawTexture(UTexture* RenderTexture, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, const FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawTexture"));

	UCanvas_K2_DrawTexture_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UFont*                         RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// FString                        RenderText                     (Parm, ZeroConstructor)
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Kerning                        (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ShadowColor                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ShadowOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreX                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreY                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOutlined                      (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   OutlineColor                   (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawText(UFont* RenderFont, const FString& RenderText, const FVector2D& ScreenPosition, const FLinearColor& RenderColor, float Kerning, const FLinearColor& ShadowColor, const FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const FLinearColor& OutlineColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawText"));

	UCanvas_K2_DrawText_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.ScreenPosition = ScreenPosition;
	params.RenderColor = RenderColor;
	params.Kerning = Kerning;
	params.ShadowColor = ShadowColor;
	params.ShadowOffset = ShadowOffset;
	params.bCentreX = bCentreX;
	params.bCentreY = bCentreY;
	params.bOutlined = bOutlined;
	params.OutlineColor = OutlineColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawPolygon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UTexture*                      RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumberOfSides                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawPolygon(UTexture* RenderTexture, const FVector2D& ScreenPosition, const FVector2D& Radius, int NumberOfSides, const FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawPolygon"));

	UCanvas_K2_DrawPolygon_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.Radius = Radius;
	params.NumberOfSides = NumberOfSides;
	params.RenderColor = RenderColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawMaterialTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<FCanvasUVTri>           Triangles                      (Parm, ZeroConstructor)

void UCanvas::K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterialTriangle"));

	UCanvas_K2_DrawMaterialTriangle_Params params;
	params.RenderMaterial = RenderMaterial;
	params.Triangles = Triangles;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawMaterial
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UMaterialInterface*            RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawMaterial(UMaterialInterface* RenderMaterial, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, float Rotation, const FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawMaterial"));

	UCanvas_K2_DrawMaterial_Params params;
	params.RenderMaterial = RenderMaterial;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawLine
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      ScreenPositionA                (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPositionB                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawLine(const FVector2D& ScreenPositionA, const FVector2D& ScreenPositionB, float Thickness, const FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawLine"));

	UCanvas_K2_DrawLine_Params params;
	params.ScreenPositionA = ScreenPositionA;
	params.ScreenPositionB = ScreenPositionB;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBox(const FVector2D& ScreenPosition, const FVector2D& ScreenSize, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBox"));

	UCanvas_K2_DrawBox_Params params;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_DrawBorder
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// UTexture*                      BorderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      BackgroundTexture              (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      LeftBorderTexture              (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      RightBorderTexture             (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      TopBorderTexture               (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      BottomBorderTexture            (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      BorderScale                    (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      BackgroundScale                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// FVector2D                      CornerSize                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, const FVector2D& ScreenPosition, const FVector2D& ScreenSize, const FVector2D& CoordinatePosition, const FVector2D& CoordinateSize, const FLinearColor& RenderColor, const FVector2D& BorderScale, const FVector2D& BackgroundScale, float Rotation, const FVector2D& PivotPoint, const FVector2D& CornerSize)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_DrawBorder"));

	UCanvas_K2_DrawBorder_Params params;
	params.BorderTexture = BorderTexture;
	params.BackgroundTexture = BackgroundTexture;
	params.LeftBorderTexture = LeftBorderTexture;
	params.RightBorderTexture = RightBorderTexture;
	params.TopBorderTexture = TopBorderTexture;
	params.BottomBorderTexture = BottomBorderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BorderScale = BorderScale;
	params.BackgroundScale = BackgroundScale;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;
	params.CornerSize = CornerSize;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Canvas.K2_Deproject
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// FVector2D                      ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldOrigin                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_Deproject(const FVector2D& ScreenPosition, FVector* WorldOrigin, FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.K2_Deproject"));

	UCanvas_K2_Deproject_Params params;
	params.ScreenPosition = ScreenPosition;

	UObject::ProcessEvent(fn, &params);

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.Canvas.DrawTextures
// (Native, Public, HasOutParms)
// Parameters:
// TArray<FTextureRenderData>     RenderDatas                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UCanvas::DrawTextures(TArray<FTextureRenderData> RenderDatas)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Canvas.DrawTextures"));

	UCanvas_DrawTextures_Params params;
	params.RenderDatas = RenderDatas;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.WidgetReflector
// (Exec, Native, Public)

void UCheatManager::WidgetReflector()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.WidgetReflector"));

	UCheatManager_WidgetReflector_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Walk
// (Exec, Native, Public)

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Walk"));

	UCheatManager_Walk_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewSelf
// (Exec, Native, Public)

void UCheatManager::ViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewSelf"));

	UCheatManager_ViewSelf_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewPlayer
// (Exec, Native, Public)
// Parameters:
// FString                        S                              (Parm, ZeroConstructor)

void UCheatManager::ViewPlayer(const FString& S)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewPlayer"));

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewClass
// (Exec, Native, Public)
// Parameters:
// UClass*                        DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewClass(UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewClass"));

	UCheatManager_ViewClass_Params params;
	params.DesiredClass = DesiredClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ViewActor
// (Exec, Native, Public)
// Parameters:
// FName                          ActorName                      (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewActor(const FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ViewActor"));

	UCheatManager_ViewActor_Params params;
	params.ActorName = ActorName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ToggleDebugCamera
// (Exec, Native, Public)

void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleDebugCamera"));

	UCheatManager_ToggleDebugCamera_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ToggleAILogging
// (Exec, Native, Public)

void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ToggleAILogging"));

	UCheatManager_ToggleAILogging_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.TextureAtlasVisualizer
// (Exec, Native, Public)

void UCheatManager::TextureAtlasVisualizer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.TextureAtlasVisualizer"));

	UCheatManager_TextureAtlasVisualizer_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.TestCollisionDistance
// (Exec, Native, Public)

void UCheatManager::TestCollisionDistance()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.TestCollisionDistance"));

	UCheatManager_TestCollisionDistance_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Teleport
// (Exec, Native, Public)

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Teleport"));

	UCheatManager_Teleport_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Summon
// (Exec, Native, Public)
// Parameters:
// FString                        ClassName                      (Parm, ZeroConstructor)

void UCheatManager::Summon(const FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Summon"));

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.StreamLevelOut
// (Exec, Native, Public)
// Parameters:
// FName                          PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelOut(const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelOut"));

	UCheatManager_StreamLevelOut_Params params;
	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.StreamLevelIn
// (Exec, Native, Public)
// Parameters:
// FName                          PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelIn(const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.StreamLevelIn"));

	UCheatManager_StreamLevelIn_Params params;
	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Slomo
// (Exec, Native, Public)
// Parameters:
// float                          T                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::Slomo(float T)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Slomo"));

	UCheatManager_Slomo_Params params;
	params.T = T;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetWorldOrigin
// (Final, Exec, Native, Public)

void UCheatManager::SetWorldOrigin()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetWorldOrigin"));

	UCheatManager_SetWorldOrigin_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetNavDrawDistance
// (Final, Exec, Native, Public)
// Parameters:
// float                          DrawDistance                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::SetNavDrawDistance(float DrawDistance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetNavDrawDistance"));

	UCheatManager_SetNavDrawDistance_Params params;
	params.DrawDistance = DrawDistance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.SetMouseSensitivityToDefault
// (Final, Exec, Native, Public)

void UCheatManager::SetMouseSensitivityToDefault()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.SetMouseSensitivityToDefault"));

	UCheatManager_SetMouseSensitivityToDefault_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ServerToggleAILogging
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UCheatManager::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ServerToggleAILogging"));

	UCheatManager_ServerToggleAILogging_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.RebuildNavigation
// (Exec, Native, Public)

void UCheatManager::RebuildNavigation()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.RebuildNavigation"));

	UCheatManager_RebuildNavigation_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.PlayersOnly
// (Exec, Native, Public)

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.PlayersOnly"));

	UCheatManager_PlayersOnly_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.OnlyLoadLevel
// (Exec, Native, Public)
// Parameters:
// FName                          PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::OnlyLoadLevel(const FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.OnlyLoadLevel"));

	UCheatManager_OnlyLoadLevel_Params params;
	params.PackageName = PackageName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.LogLoc
// (Exec, Native, Public)

void UCheatManager::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.LogLoc"));

	UCheatManager_LogLoc_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.InvertMouse
// (Final, Exec, Native, Public)

void UCheatManager::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.InvertMouse"));

	UCheatManager_InvertMouse_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.God
// (Exec, Native, Public)

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.God"));

	UCheatManager_God_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Ghost
// (Exec, Native, Public)

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Ghost"));

	UCheatManager_Ghost_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FreezeFrame
// (Exec, Native, Public)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FreezeFrame"));

	UCheatManager_FreezeFrame_Params params;
	params.Delay = Delay;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FontAtlasVisualizer
// (Exec, Native, Public)

void UCheatManager::FontAtlasVisualizer()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FontAtlasVisualizer"));

	UCheatManager_FontAtlasVisualizer_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.Fly
// (Exec, Native, Public)

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.Fly"));

	UCheatManager_Fly_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.FlushLog
// (Exec, Native, Public)

void UCheatManager::FlushLog()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.FlushLog"));

	UCheatManager_FlushLog_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpVoiceMutingState
// (Exec, Native, Public)

void UCheatManager::DumpVoiceMutingState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpVoiceMutingState"));

	UCheatManager_DumpVoiceMutingState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpPartyState
// (Exec, Native, Public)

void UCheatManager::DumpPartyState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpPartyState"));

	UCheatManager_DumpPartyState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DumpOnlineSessionState
// (Exec, Native, Public)

void UCheatManager::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DumpOnlineSessionState"));

	UCheatManager_DumpOnlineSessionState_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyTarget
// (Exec, Native, Public)

void UCheatManager::DestroyTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyTarget"));

	UCheatManager_DestroyTarget_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyPawns
// (Exec, Native, Public)
// Parameters:
// UClass*                        aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyPawns(UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyPawns"));

	UCheatManager_DestroyPawns_Params params;
	params.aClass = aClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyAllPawnsExceptTarget
// (Final, Exec, Native, Public)

void UCheatManager::DestroyAllPawnsExceptTarget()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAllPawnsExceptTarget"));

	UCheatManager_DestroyAllPawnsExceptTarget_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DestroyAll
// (Exec, Native, Public)
// Parameters:
// UClass*                        aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyAll(UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DestroyAll"));

	UCheatManager_DestroyAll_Params params;
	params.aClass = aClass;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepSize
// (Exec, Native, Public)
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepSize"));

	UCheatManager_DebugCapsuleSweepSize_Params params;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepPawn
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepPawn()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepPawn"));

	UCheatManager_DebugCapsuleSweepPawn_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepComplex
// (Exec, Native, Public)
// Parameters:
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepComplex"));

	UCheatManager_DebugCapsuleSweepComplex_Params params;
	params.bTraceComplex = bTraceComplex;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepClear
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepClear()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepClear"));

	UCheatManager_DebugCapsuleSweepClear_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepChannel
// (Exec, Native, Public)
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepChannel"));

	UCheatManager_DebugCapsuleSweepChannel_Params params;
	params.Channel = Channel;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweepCapture
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweepCapture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweepCapture"));

	UCheatManager_DebugCapsuleSweepCapture_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DebugCapsuleSweep
// (Exec, Native, Public)

void UCheatManager::DebugCapsuleSweep()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DebugCapsuleSweep"));

	UCheatManager_DebugCapsuleSweep_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.DamageTarget
// (Final, Exec, Native, Public)
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DamageTarget(float DamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.DamageTarget"));

	UCheatManager_DamageTarget_Params params;
	params.DamageAmount = DamageAmount;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.ChangeSize
// (Exec, Native, Public)
// Parameters:
// float                          F                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.ChangeSize"));

	UCheatManager_ChangeSize_Params params;
	params.F = F;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.BugItStringCreator
// (Exec, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// FVector                        ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// FRotator                       ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// FString                        GoString                       (Parm, OutParm, ZeroConstructor)
// FString                        LocString                      (Parm, OutParm, ZeroConstructor)

void UCheatManager::BugItStringCreator(const FVector& ViewLocation, const FRotator& ViewRotation, FString* GoString, FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItStringCreator"));

	UCheatManager_BugItStringCreator_Params params;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;

	UObject::ProcessEvent(fn, &params);

	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;
}


// Function Engine.CheatManager.BugItGo
// (Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugItGo"));

	UCheatManager_BugItGo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CheatManager.BugIt
// (Exec, Native, Public)
// Parameters:
// FString                        ScreenShotDescription          (Parm, ZeroConstructor)

void UCheatManager::BugIt(const FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CheatManager.BugIt"));

	UCheatManager_BugIt_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CurveLinearColor.GetLinearColorValue
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveLinearColor.GetLinearColorValue"));

	UCurveLinearColor_GetLinearColorValue_Params params;
	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CurveVector.GetVectorValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector UCurveVector::GetVectorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CurveVector.GetVectorValue"));

	UCurveVector_GetVectorValue_Params params;
	params.InTime = InTime;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlayerInput.SetMouseSensitivity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Sensitivity                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetMouseSensitivity(float Sensitivity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetMouseSensitivity"));

	UPlayerInput_SetMouseSensitivity_Params params;
	params.Sensitivity = Sensitivity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetForceFeedbackIntensity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Intensity                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetForceFeedbackIntensity(float Intensity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetForceFeedbackIntensity"));

	UPlayerInput_SetForceFeedbackIntensity_Params params;
	params.Intensity = Intensity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisScale
// (Final, Exec, Native, Public)
// Parameters:
// FName                          CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisScale(const FName& CombinedAxisName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisScale"));

	UPlayerInput_SetCombinedAxisScale_Params params;
	params.CombinedAxisName = CombinedAxisName;
	params.Scale = Scale;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisNonLinearity
// (Final, Exec, Native, Public)
// Parameters:
// FName                          CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          NonLinearity                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisNonLinearity(const FName& CombinedAxisName, float NonLinearity)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisNonLinearity"));

	UPlayerInput_SetCombinedAxisNonLinearity_Params params;
	params.CombinedAxisName = CombinedAxisName;
	params.NonLinearity = NonLinearity;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetCombinedAxisLowerDeadzone
// (Final, Exec, Native, Public)
// Parameters:
// FName                          CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          LowerDeadzone                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetCombinedAxisLowerDeadzone(const FName& CombinedAxisName, float LowerDeadzone)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetCombinedAxisLowerDeadzone"));

	UPlayerInput_SetCombinedAxisLowerDeadzone_Params params;
	params.CombinedAxisName = CombinedAxisName;
	params.LowerDeadzone = LowerDeadzone;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.SetBind
// (Final, Exec, Native, Public)
// Parameters:
// FName                          BindName                       (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Command                        (Parm, ZeroConstructor)

void UPlayerInput::SetBind(const FName& BindName, const FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.SetBind"));

	UPlayerInput_SetBind_Params params;
	params.BindName = BindName;
	params.Command = Command;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertMouseAxis
// (Final, Exec, Native, Public)
// Parameters:
// FName                          AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertMouseAxis(const FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertMouseAxis"));

	UPlayerInput_InvertMouseAxis_Params params;
	params.AxisName = AxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertGamepadAxis
// (Final, Exec, Native, Public)
// Parameters:
// FName                          AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertGamepadAxis(const FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertGamepadAxis"));

	UPlayerInput_InvertGamepadAxis_Params params;
	params.AxisName = AxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertCombinedAxisY
// (Final, Exec, Native, Public)
// Parameters:
// FName                          CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertCombinedAxisY(const FName& CombinedAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertCombinedAxisY"));

	UPlayerInput_InvertCombinedAxisY_Params params;
	params.CombinedAxisName = CombinedAxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertCombinedAxisX
// (Final, Exec, Native, Public)
// Parameters:
// FName                          CombinedAxisName               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertCombinedAxisX(const FName& CombinedAxisName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertCombinedAxisX"));

	UPlayerInput_InvertCombinedAxisX_Params params;
	params.CombinedAxisName = CombinedAxisName;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.InvertAxisKey
// (Final, Exec, Native, Public)
// Parameters:
// FKey                           AxisKey                        (ConstParm, Parm)

void UPlayerInput::InvertAxisKey(const FKey& AxisKey)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.InvertAxisKey"));

	UPlayerInput_InvertAxisKey_Params params;
	params.AxisKey = AxisKey;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.PlayerInput.ClearSmoothing
// (Final, Exec, Native, Public)

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlayerInput.ClearSmoothing"));

	UPlayerInput_ClearSmoothing_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.LevelStreaming.IsStreamingStatePending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsStreamingStatePending()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsStreamingStatePending"));

	ULevelStreaming_IsStreamingStatePending_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelVisible
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelVisible()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelVisible"));

	ULevelStreaming_IsLevelVisible_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelLoaded
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.IsLevelLoaded"));

	ULevelStreaming_IsLevelLoaded_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.GetLevelScriptActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ALevelScriptActor*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ALevelScriptActor* ULevelStreaming::GetLevelScriptActor()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.GetLevelScriptActor"));

	ULevelStreaming_GetLevelScriptActor_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.CreateInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FString                        UniqueInstanceName             (Parm, ZeroConstructor)
// ULevelStreaming*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ULevelStreaming* ULevelStreaming::CreateInstance(const FString& UniqueInstanceName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.LevelStreaming.CreateInstance"));

	ULevelStreaming_CreateInstance_Params params;
	params.UniqueInstanceName = UniqueInstanceName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetVectorParameterValue(const FName& ParameterName, const FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetVectorParameterValue"));

	UMaterialInstanceDynamic_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetTextureParameterValue(const FName& ParameterName, UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetTextureParameterValue"));

	UMaterialInstanceDynamic_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetScalarParameterValue(const FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.SetScalarParameterValue"));

	UMaterialInstanceDynamic_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.MergeParameters
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInstance*             MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::MergeParameters(UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.MergeParameters"));

	UMaterialInstanceDynamic_MergeParameters_Params params;
	params.MaterialInstance = MaterialInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInstance*             MaterialA                      (Parm, ZeroConstructor, IsPlainOldData)
// UMaterialInstance*             MaterialB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(UMaterialInstance* MaterialA, UMaterialInstance* MaterialB, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams"));

	UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams_Params params;
	params.MaterialA = MaterialA;
	params.MaterialB = MaterialB;
	params.Alpha = Alpha;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue"));

	UMaterialInstanceDynamic_K2_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// UTexture*                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue"));

	UMaterialInstanceDynamic_K2_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// FName                          ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue"));

	UMaterialInstanceDynamic_K2_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInterface*            SourceMaterialToCopyFrom       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverride                      (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(UMaterialInterface* SourceMaterialToCopyFrom, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters"));

	UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters_Params params;
	params.SourceMaterialToCopyFrom = SourceMaterialToCopyFrom;
	params.bOverride = bOverride;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// UMaterialInstance*             MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::CopyParameterOverrides(UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaterialInstanceDynamic.CopyParameterOverrides"));

	UMaterialInstanceDynamic_CopyParameterOverrides_Params params;
	params.MaterialInstance = MaterialInstance;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.Texture2D.Blueprint_GetSizeY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeY"));

	UTexture2D_Blueprint_GetSizeY_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.Texture2D.Blueprint_GetSizeX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.Texture2D.Blueprint_GetSizeX"));

	UTexture2D_Blueprint_GetSizeX_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CanvasRenderTarget2D.UpdateResource
// (Native, Public, BlueprintCallable)

void UCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.UpdateResource"));

	UCanvasRenderTarget2D_UpdateResource_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.Render
// (Final, Native, Public, BlueprintCallable)

void UCanvasRenderTarget2D::Render()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.Render"));

	UCanvasRenderTarget2D_Render_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
// (Event, Public, BlueprintEvent)
// Parameters:
// UCanvas*                       Canvas                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::ReceiveUpdate(UCanvas* Canvas, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.ReceiveUpdate"));

	UCanvasRenderTarget2D_ReceiveUpdate_Params params;
	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.CanvasRenderTarget2D.GetSize
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Width                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::GetSize(int* Width, int* Height)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.GetSize"));

	UCanvasRenderTarget2D_GetSize_Params params;

	UObject::ProcessEvent(fn, &params);

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
}


// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// UClass*                        CanvasRenderTarget2DClass      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECanvasRenderTargetMips> Mips                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           HDR                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CreateTextureResource          (Parm, ZeroConstructor, IsPlainOldData)
// UCanvasRenderTarget2D*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UCanvasRenderTarget2D* UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass* CanvasRenderTarget2DClass, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D"));

	UCanvasRenderTarget2D_CreateCanvasRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	params.Width = Width;
	params.Height = Height;
	params.Mips = Mips;
	params.HDR = HDR;
	params.CreateTextureResource = CreateTextureResource;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.CompressedCanvasRenderTarget2D.UpdateResource
// (Native, Public, BlueprintCallable)

void UCompressedCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.CompressedCanvasRenderTarget2D.UpdateResource"));

	UCompressedCanvasRenderTarget2D_UpdateResource_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.UpdateResource
// (Final, Native, Public, BlueprintCallable)

void UMaybeCompressedCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.UpdateResource"));

	UMaybeCompressedCanvasRenderTarget2D_UpdateResource_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.GetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// UTexture*                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UTexture* UMaybeCompressedCanvasRenderTarget2D::GetTexture()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.GetTexture"));

	UMaybeCompressedCanvasRenderTarget2D_GetTexture_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.MaybeCompressedCanvasRenderTarget2D.CreateMaybeCompressedCanvasRenderTarget2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// UObject*                       WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECanvasRenderTargetMips> Mips                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           HDR                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CreateTextureResource          (Parm, ZeroConstructor, IsPlainOldData)
// UMaybeCompressedCanvasRenderTarget2D* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

UMaybeCompressedCanvasRenderTarget2D* UMaybeCompressedCanvasRenderTarget2D::CreateMaybeCompressedCanvasRenderTarget2D(UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.MaybeCompressedCanvasRenderTarget2D.CreateMaybeCompressedCanvasRenderTarget2D"));

	UMaybeCompressedCanvasRenderTarget2D_CreateMaybeCompressedCanvasRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Mips = Mips;
	params.HDR = HDR;
	params.CreateTextureResource = CreateTextureResource;

	static auto defaultObj = StaticClass()->CreateDefaultObject();
	defaultObj->ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsValid()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsValid"));

	UNavigationPath_IsValid_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsStringPulled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsStringPulled()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsStringPulled"));

	UNavigationPath_IsStringPulled_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsPartial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsPartial()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.IsPartial"));

	UNavigationPath_IsPartial_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathLength()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetPathLength"));

	UNavigationPath_GetPathLength_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathCost()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetPathCost"));

	UNavigationPath_GetPathCost_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetDebugString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UNavigationPath::GetDebugString()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.GetDebugString"));

	UNavigationPath_GetDebugString_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.NavigationPath.EnableRecalculationOnInvalidation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ENavigationOptionFlag> DoRecalculation                (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.EnableRecalculationOnInvalidation"));

	UNavigationPath_EnableRecalculationOnInvalidation_Params params;
	params.DoRecalculation = DoRecalculation;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.NavigationPath.EnableDebugDrawing
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           bShouldDrawDebugData           (Parm, ZeroConstructor, IsPlainOldData)
// FLinearColor                   PathColor                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableDebugDrawing(bool bShouldDrawDebugData, const FLinearColor& PathColor)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.NavigationPath.EnableDebugDrawing"));

	UNavigationPath_EnableDebugDrawing_Params params;
	params.bShouldDrawDebugData = bShouldDrawDebugData;
	params.PathColor = PathColor;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TwitterIntegrationBase.TwitterRequest
// (Native, Public, HasOutParms)
// Parameters:
// FString                        URL                            (Parm, ZeroConstructor)
// TArray<FString>                ParamKeysAndValues             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ETwitterRequestMethod> RequestMethod                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::TwitterRequest(const FString& URL, TArray<FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.TwitterRequest"));

	UTwitterIntegrationBase_TwitterRequest_Params params;
	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.ShowTweetUI
// (Native, Public)
// Parameters:
// FString                        InitialMessage                 (Parm, ZeroConstructor)
// FString                        URL                            (Parm, ZeroConstructor)
// FString                        Picture                        (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::ShowTweetUI(const FString& InitialMessage, const FString& URL, const FString& Picture)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.ShowTweetUI"));

	UTwitterIntegrationBase_ShowTweetUI_Params params;
	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.Init
// (Native, Public)

void UTwitterIntegrationBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.Init"));

	UTwitterIntegrationBase_Init_Params params;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.TwitterIntegrationBase.GetNumAccounts
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTwitterIntegrationBase::GetNumAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetNumAccounts"));

	UTwitterIntegrationBase_GetNumAccounts_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountName
// (Native, Public)
// Parameters:
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.GetAccountName"));

	UTwitterIntegrationBase_GetAccountName_Params params;
	params.AccountIndex = AccountIndex;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.CanShowTweetUI"));

	UTwitterIntegrationBase_CanShowTweetUI_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.TwitterIntegrationBase.AuthorizeAccounts"));

	UTwitterIntegrationBase_AuthorizeAccounts_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders"));

	UPlatformInterfaceWebResponse_GetNumHeaders_Params params;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// (Native, Public)
// Parameters:
// FString                        HeaderName                     (Parm, ZeroConstructor)
// FString                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

FString UPlatformInterfaceWebResponse::GetHeaderValue(const FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue"));

	UPlatformInterfaceWebResponse_GetHeaderValue_Params params;
	params.HeaderName = HeaderName;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeader
// (Native, Public, HasOutParms)
// Parameters:
// int                            HeaderIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// FString                        Header                         (Parm, OutParm, ZeroConstructor)
// FString                        Value                          (Parm, OutParm, ZeroConstructor)

void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, FString* Header, FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.PlatformInterfaceWebResponse.GetHeader"));

	UPlatformInterfaceWebResponse_GetHeader_Params params;
	params.HeaderIndex = HeaderIndex;

	UObject::ProcessEvent(fn, &params);

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// USkeletalMeshComponent*        SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// FVector                        WorldNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshSocket::InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, const FVector& WorldLocation, const FVector& WorldNormal)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation"));

	USkeletalMeshSocket_InitializeSocketFromLocation_Params params;
	params.SkelComp = SkelComp;
	params.WorldLocation = WorldLocation;
	params.WorldNormal = WorldNormal;

	UObject::ProcessEvent(fn, &params);
}


// Function Engine.SkeletalMeshSocket.GetSocketLocation
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// USkeletalMeshComponent*        SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// FVector                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

FVector USkeletalMeshSocket::GetSocketLocation(USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>(_xor_("Function Engine.SkeletalMeshSocket.GetSocketLocation"));

	USkeletalMeshSocket_GetSocketLocation_Params params;
	params.SkelComp = SkelComp;

	UObject::ProcessEvent(fn, &params);

	return params.ReturnValue;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
